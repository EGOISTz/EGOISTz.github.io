<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sports_app 项目学习</title>
    <link href="/2023/07/31/sports_app%20%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/31/sports_app%20%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="sports-app-项目学习"><a href="#sports-app-项目学习" class="headerlink" title="sports_app 项目学习"></a>sports_app 项目学习</h1><h2 id="一、创建异步任务"><a href="#一、创建异步任务" class="headerlink" title="一、创建异步任务"></a>一、创建异步任务</h2><h3 id="1-创建自定义ThreadPoolLogExecutor类继承Springboot提供的ThreadPoolTaskExecutor"><a href="#1-创建自定义ThreadPoolLogExecutor类继承Springboot提供的ThreadPoolTaskExecutor" class="headerlink" title="1.创建自定义ThreadPoolLogExecutor类继承Springboot提供的ThreadPoolTaskExecutor"></a>1.创建自定义ThreadPoolLogExecutor类继承Springboot提供的ThreadPoolTaskExecutor</h3><p>值得一提的是ThreadPoolTaskExecutor这个类Springboot已经为我们提供了，要使用的话可以直接@Autowired注入，此处由于需要自定义所以未使用这个类</p><blockquote><p>ThreadPoolLogExecutor.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolLogExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ThreadPoolTaskExecutor</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String info)</span></span>&#123;<br>        ThreadPoolExecutor threadPoolExecutor = getThreadPoolExecutor();<br>        log.info(<span class="hljs-string">&quot;threadNamePrefix = &#123;&#125;, &#123;&#125;, taskCount [&#123;&#125;], completedTaskCount [&#123;&#125;], activeCount [&#123;&#125;], queueSize [&#123;&#125;]&quot;</span>,<br>                <span class="hljs-keyword">this</span>.getThreadNamePrefix(),<br>                info,<br>                threadPoolExecutor.getTaskCount(),<br>                threadPoolExecutor.getCompletedTaskCount(),<br>                threadPoolExecutor.getActiveCount(),<br>                threadPoolExecutor.getQueue().size());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable task)</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;execute...&quot;</span>);<br>        <span class="hljs-keyword">super</span>.execute(task);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable task, <span class="hljs-keyword">long</span> startTimeout)</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;execute...&quot;</span>);<br>        <span class="hljs-keyword">super</span>.execute(task, startTimeout);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;<br>        log(<span class="hljs-string">&quot;submit...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.submit(task);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">Future&lt;T&gt; <span class="hljs-title">submit</span><span class="hljs-params">(Callable&lt;T&gt; task)</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;submit...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.submit(task);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ListenableFuture&lt;?&gt; submitListenable(Runnable task) &#123;<br>        log(<span class="hljs-string">&quot;submitListenable...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.submitListenable(task);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">ListenableFuture&lt;T&gt; <span class="hljs-title">submitListenable</span><span class="hljs-params">(Callable&lt;T&gt; task)</span> </span>&#123;<br>        log(<span class="hljs-string">&quot;submitListenable...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.submitListenable(task);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-编写配置文件，注入刚才创建的ThreadPoolLogExecutor类"><a href="#2-编写配置文件，注入刚才创建的ThreadPoolLogExecutor类" class="headerlink" title="2.编写配置文件，注入刚才创建的ThreadPoolLogExecutor类"></a>2.编写配置文件，注入刚才创建的ThreadPoolLogExecutor类</h3><blockquote><p>ThreadConfig.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAsync</span><span class="hljs-comment">//开启async注解功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean(&quot;defaultExecutor&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TaskExecutor <span class="hljs-title">defaultExecutor</span><span class="hljs-params">()</span></span>&#123;<br>        ThreadPoolTaskExecutor executor = <span class="hljs-keyword">new</span> ThreadPoolLogExecutor();<br>        <span class="hljs-comment">// 核心线程数</span><br>        executor.setCorePoolSize(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最大线程数</span><br>        executor.setMaxPoolSize(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 队列容量</span><br>        executor.setQueueCapacity(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 线程活跃时间（秒）</span><br>        executor.setKeepAliveSeconds(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 默认线程名称</span><br>        executor.setThreadNamePrefix(<span class="hljs-string">&quot;sports-app-defaultExecutor-thread-&quot;</span>);<br>        <span class="hljs-comment">// 拒绝策略（线程池无可用线程，主线程自己执行）</span><br>        executor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br>        <span class="hljs-comment">// 等待所有任务结束后再关闭线程池</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">return</span> executor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-将异步方法抽取到一个类中，避免某种情况下因为代理而导致-Async注解失效的问题"><a href="#3-将异步方法抽取到一个类中，避免某种情况下因为代理而导致-Async注解失效的问题" class="headerlink" title="3.将异步方法抽取到一个类中，避免某种情况下因为代理而导致@Async注解失效的问题"></a>3.将异步方法抽取到一个类中，避免某种情况下因为代理而导致@Async注解失效的问题</h3><blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AsyncLogTask</span>.</span></span>java<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncLogTask</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LogMapper logMapper;<br><br>    <span class="hljs-meta">@Async(&quot;defaultExecutor&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Log bean)</span></span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            logMapper.insert(bean);<br>            log.info(<span class="hljs-string">&quot;=====子线程1执行: &quot;</span> + Thread.currentThread().getName());<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.error(<span class="hljs-string">&quot;操作日志写入异常,exception=&#123;&#125;&quot;</span>, JSON.toJSONString(e));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-调用异步方法"><a href="#4-调用异步方法" class="headerlink" title="4.调用异步方法"></a>4.调用异步方法</h3><blockquote><p>AccountController.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;用户账户相关接口&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/account&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AsyncLogTask logTask;<br>    <br>    <br>    <span class="hljs-meta">@ApiOperation(value=&quot;测试异步任务&quot;, notes=&quot;测试异步任务&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/testAsync&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">testAsync</span><span class="hljs-params">()</span></span>&#123;<br>        Log bean = Log.builder()<br>                .account(<span class="hljs-string">&quot;王征华&quot;</span>)<br>                .operateType(<span class="hljs-string">&quot;operateType&quot;</span>)<br>                .userType(<span class="hljs-number">0</span>)<br>                .userId(<span class="hljs-number">0</span>)<br>                .systemType(<span class="hljs-string">&quot;systemType&quot;</span>)<br>                .version(<span class="hljs-string">&quot;version&quot;</span>)<br>                .createTime(<span class="hljs-keyword">new</span> Date())<br>                .parameter(<span class="hljs-string">&quot;parameter&quot;</span>)<br>                .result(<span class="hljs-string">&quot;result&quot;</span>)<br>                .build();<br>        logTask.save(bean);<br>        <span class="hljs-keyword">return</span> Result.success(bean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-执行结果"><a href="#5-执行结果" class="headerlink" title="5.执行结果"></a>5.执行结果</h3><p>用到的其他类：</p><blockquote><p>LogMapper.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">LogMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">Log</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Log.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     账号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String account;<br><br><br>    <span class="hljs-keyword">private</span> Integer userId;<br><br><br>    <span class="hljs-keyword">private</span> Integer userType;<br><br>    <span class="hljs-keyword">private</span> String systemType;<br><br>    <span class="hljs-keyword">private</span> String version;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     操作类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String operateType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     操作内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String operateContent;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输入参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String parameter;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String result;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     创建日期</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、拦截器配置"><a href="#二、拦截器配置" class="headerlink" title="二、拦截器配置"></a>二、拦截器配置</h2><p><strong>什么是拦截器</strong>：在AOP（Aspect-Oriented Programming）中用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。拦截是AOP的一种实现策略</p><p><strong>为什么需要拦截器</strong>：在做身份认证或者是进行日志的记录时，我们需要通过拦截器达到我们的目的。最常用的登录拦截、或是权限校验、或是防重复提交、或是根据业务像12306去校验购票时间,总之可以去做很多的事情</p><p><strong>如何用拦截器</strong>：在spring中用拦截器需要实现HandlerInterceptor接口或者它的实现子类：HandlerInterceptorAdapter，同时在applicationContext.xml文件中配置拦截器</p><h3 id="定义实现类："><a href="#定义实现类：" class="headerlink" title="定义实现类："></a><strong>定义实现类：</strong></h3><ol><li>类要实现Spring 的HandlerInterceptor 接口</li><li>类继承实现了HandlerInterceptor 接口的类，例如 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter</li></ol><p>下面用接口形式定义：</p><blockquote><p>LoginInterceptor.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拦截器，登录检查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtil redisUtil;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;webmvc.switch&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer webmvcSwitch;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.servlet.path&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String servletPath;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenUtil tokenUtil;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SchoolSeqMapper schoolSeqMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> </span>&#123;<br>        <span class="hljs-comment">//0、不开启Authorization校验、权限拦截 1、开启</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == webmvcSwitch) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(request.getMethod().equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        String api = request.getRequestURI();<br>        <span class="hljs-keyword">if</span> (api.contains(<span class="hljs-string">&quot;/null/&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        String token = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        log.info(request.getMethod());<br>        log.info(<span class="hljs-string">&quot;token=&#123;&#125;,访问api=&#123;&#125;&quot;</span>, token, api);<br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(token)) &#123;<br>            <span class="hljs-comment">//1、校验token有效性</span><br>            AuthLoginRespDto loginRespDto = redisUtil.get(token, AuthLoginRespDto.class);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == loginRespDto) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.USER_NO_LOGIN_ERROR);<br>            &#125;<br>            checkType(api,token);<span class="hljs-comment">//检测接口类型是否与token用户匹配</span><br>            checkSchoolCode();<br><br>            <span class="hljs-comment">//2、延长token有效时长</span><br>            redisUtil.set(token, loginRespDto, Constants.TOKEN_EXPIRE_TIME);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.USER_NO_LOGIN_ERROR);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkType</span><span class="hljs-params">(String api,String token)</span></span>&#123;<br>        api = api.replace(servletPath, <span class="hljs-string">&quot;&quot;</span>);<br>        RequestMappingHandlerMapping mapping = applicationContext.getBean(RequestMappingHandlerMapping.class);<br>        Map&lt;RequestMappingInfo, HandlerMethod&gt; methodMap = mapping.getHandlerMethods();<br>        <span class="hljs-keyword">for</span> (RequestMappingInfo requestMappingInfo : methodMap.keySet()) &#123;<br>            <span class="hljs-keyword">if</span> (requestMappingInfo.getPatternsCondition().getPatterns().contains(api))&#123;<br>                HandlerMethod rightHandlerMethod = methodMap.get(requestMappingInfo);<br>                Method method = rightHandlerMethod.getMethod();<br>                Annotation annotation = method.getAnnotation(SchoolRoot.class);<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != annotation)&#123;<br>                   <span class="hljs-keyword">if</span>(!token.startsWith(Constants.SCHOOL_ROOT_HEADER))&#123;<br>                       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.USER_TYPE_NOT_SCHOOL_ROOT);<br>                   &#125;<br>                &#125;<br>                annotation = method.getAnnotation(Student.class);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != annotation)&#123;<br>                    <span class="hljs-keyword">if</span>(!token.startsWith(Constants.SCHOOL_STUDENT_HEADER))&#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.USER_TYPE_IS_NOT_STUDENT);<br>                    &#125;<br>                &#125;<br><br>                annotation = method.getAnnotation(Teacher.class);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != annotation)&#123;<br>                    <span class="hljs-keyword">if</span>(!token.startsWith(Constants.SCHOOL_TEACHER_HEADER))&#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.USER_TYPE_NOT_TEACHER);<br>                    &#125;<br>                &#125;<br><br>                annotation = method.getAnnotation(WebRoot.class);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != annotation)&#123;<br>                    <span class="hljs-keyword">if</span>(!token.startsWith(Constants.WEB_USER_TOKEN))&#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.USER_TYPE_NOT_WEB_ROOT);<br>                    &#125;<br>                &#125;<br><br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkSchoolCode</span><span class="hljs-params">()</span></span>&#123;<br><br>        String schoolCode=tokenUtil.getSchoolCode();<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(schoolCode))&#123;<br>            SchoolSeq schoolSeq = schoolSeqMapper.selectBySeq(schoolCode);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == schoolSeq)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.SCHOOL_SEQ_NUM_ERROR);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (schoolSeq.getStatus().equals(Constants.SCHOOL_SEQ_STATUS_NO))&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SportException(ErrorEnum.SCHOOL_SEQ_STATUS_NO);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>preHandle：在业务处理器处理请求之前被调用。预处理，可以进行编码、安全控制、权限校验等处理；</li><li>postHandle：在业务处理器处理请求执行完成后，生成视图之前执行。后处理（调用了Service并返回ModelAndView，但未进行页面渲染），有机会修改ModelAndView （这个博主就基本不怎么用了）；</li><li>afterCompletion：在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。返回处理（已经渲染了页面）；</li></ul><h3 id="新建WebMvcConfig-实现WebMvcConfigurer接口"><a href="#新建WebMvcConfig-实现WebMvcConfigurer接口" class="headerlink" title="新建WebMvcConfig 实现WebMvcConfigurer接口"></a>新建WebMvcConfig 实现WebMvcConfigurer接口</h3><blockquote><p>WebMvcConfig.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginInterceptor loginInterceptor;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CorsInterceptor corsInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.loginInterceptor(registry);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">loginInterceptor</span><span class="hljs-params">(InterceptorRegistry registry)</span></span>&#123;<br>        registry.addInterceptor(corsInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>        registry.addInterceptor(loginInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/swagger-resources/**&quot;</span>, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;/v2/**&quot;</span>, <span class="hljs-string">&quot;/swagger-ui.html/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/swagger-ui.html&quot;</span>,<span class="hljs-string">&quot;swagger-ui.html&quot;</span>,<span class="hljs-string">&quot;/swagger-ui.html/*&quot;</span>,<span class="hljs-string">&quot;swagger/**&quot;</span>,<span class="hljs-string">&quot;/swagger-resources&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/error&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/login&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/loginV2&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/loginV3&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/code&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/school/query&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/school/invite&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/school/mySchool&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/**/**-ios&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/class/query&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/student/reg&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/upload&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/download&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/uploadNew&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/file/page&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/item/list&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/school/upload&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/loginRefresh&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/userLogin&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/student/notTokenAchievement&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/version/*&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/schoolRoot/Login&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/pathology/list&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/amap/region&quot;</span>)<br>                 .excludePathPatterns(<span class="hljs-string">&quot;/teacher/codeAddTeacher&quot;</span>)<br>                 .excludePathPatterns(<span class="hljs-string">&quot;/teacher/school/invite&quot;</span>)<br>                 .excludePathPatterns(<span class="hljs-string">&quot;/teacher/reg&quot;</span>)<br>                 .excludePathPatterns(<span class="hljs-string">&quot;/student/faceVerify&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/questionsAndHelp/pageSelect&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/questionsAndHelp/selectContent&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/sportsCoach/reg&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/school/page&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/area/**&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/school/list&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/school/listNoPage&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/qr/*&quot;</span>)<br><br>                .excludePathPatterns(<span class="hljs-string">&quot;/student/qrCodeBind&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/student/removeBindStudent&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/student/qrWho&quot;</span>)<br><br>                .excludePathPatterns(<span class="hljs-string">&quot;/teacher/qrCodeBind&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/teacher/qrCodeBindV2&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/teacher/removeBindTeacher&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/teacher/qrWho&quot;</span>)<br><br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/getLoginList&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/getLoginListV2&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/auth/loginNew&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/banner/page&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/banner/detail&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/bgReplace/*&quot;</span>)<br><br>                .excludePathPatterns(<span class="hljs-string">&quot;/aio/pcEdit&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/aio/pcPage&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/aio/faceWho&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/aio/allClass&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/aio/nameWho&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/aio/nameLogin&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/aio/qrQuery&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/weather/get&quot;</span>)<br><br>                .excludePathPatterns(<span class="hljs-string">&quot;/tus/*&quot;</span>)<br><br>                .excludePathPatterns(<span class="hljs-string">&quot;/preview/see&quot;</span>)<br><br>                .excludePathPatterns(<span class="hljs-string">&quot;/privacy/newest&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/privacy/newest-ios&quot;</span>)<br>                ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、配置自定义Interceptor"><a href="#三、配置自定义Interceptor" class="headerlink" title="三、配置自定义Interceptor"></a>三、<strong>配置自定义Interceptor</strong></h2>]]></content>
    
    
    <categories>
      
      <category>实际项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux java环境配置</title>
    <link href="/2023/07/31/linux%20java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/07/31/linux%20java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-java环境配置"><a href="#linux-java环境配置" class="headerlink" title="linux java环境配置"></a>linux java环境配置</h1><p>1.下载java <a href="https://www.oracle.com/java/technologies/downloads/#java8">下载地址</a></p><img src="/2023/07/31/linux%20java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20230119151927248.png" class title="下载地址页面"><p>2.将文件上传到自定义目录</p><p>3.创建java目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /usr/<span class="hljs-built_in">local</span>/java/<br></code></pre></td></tr></table></figure><p>4.将文件解压到java目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf jdk-8u333-linux-x64.tar.gz -C /usr/<span class="hljs-built_in">local</span>/java/<br></code></pre></td></tr></table></figure><p>5.配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#注意将文件夹名称替换为实际名称</span><br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/java/jdk1.8.0_333<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>6.使环境变量生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>7.检查java版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Future和CompletableFuture</title>
    <link href="/2023/07/31/Future%E5%92%8CCompletableFuture/"/>
    <url>/2023/07/31/Future%E5%92%8CCompletableFuture/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Future和CompletableFuture"><a href="#1-Future和CompletableFuture" class="headerlink" title="1.Future和CompletableFuture"></a>1.Future和CompletableFuture</h2><h3 id="利用Future来完成替换敏感词操作"><a href="#利用Future来完成替换敏感词操作" class="headerlink" title="利用Future来完成替换敏感词操作"></a>利用Future来完成替换敏感词操作</h3><p>用到的类如下：</p><blockquote><p>CommonUtil.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">readFileContent</span><span class="hljs-params">(String path)</span></span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!file.exists())<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        FileReader fileReader = <span class="hljs-keyword">null</span>;<br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-number">50</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> FileReader(file);<br>            <span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">4</span>];<br>            <span class="hljs-keyword">int</span> readCount = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">while</span>((readCount = fileReader.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>                stringBuilder.append(<span class="hljs-keyword">new</span> String(chars,<span class="hljs-number">0</span>,readCount));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> stringBuilder.toString();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleepSeconds</span><span class="hljs-params">(<span class="hljs-keyword">int</span> seconds)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.SECONDS.sleep(seconds);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleepMilliseconds</span><span class="hljs-params">(<span class="hljs-keyword">int</span> milliseconds)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            TimeUnit.MILLISECONDS.sleep(milliseconds);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printThreadLog</span><span class="hljs-params">(String message)</span></span>&#123;<br>        StringJoiner log = <span class="hljs-keyword">new</span> StringJoiner(message)<br>                .add(String.valueOf(Thread.currentThread().getId()))<br>                .add(Thread.currentThread().getName());<br>        System.out.println(log);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String path = <span class="hljs-string">&quot;D:/test/source.txt&quot;</span>;<br>        String s = readFileContent(path);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MyFutureTaskTest.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFutureTaskTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//获取源文本内容</span><br>        Future&lt;String&gt; sourceContentFuture = executorService.submit(() -&gt; &#123;<br>            String sourceContent = CommonUtil.readFileContent(<span class="hljs-string">&quot;D:/test/source.txt&quot;</span>);<br>            <span class="hljs-keyword">return</span> sourceContent;<br>        &#125;);<br>        <span class="hljs-comment">//获取敏感词内容</span><br>        Future&lt;String[]&gt; filterWordsFuture = executorService.submit(() -&gt; &#123;<br>                String filterWords = CommonUtil.readFileContent(<span class="hljs-string">&quot;D:/test/filterWords.txt&quot;</span>);<br>                String[] filterWordArray = filterWords.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                <span class="hljs-keyword">return</span> filterWordArray;<br>        &#125;);<br>        <span class="hljs-comment">//替换敏感词操作</span><br>        Future&lt;String&gt; filterFuture = executorService.submit(() -&gt; &#123;<br>            String sourceContent = sourceContentFuture.get();<br>            String[] filterWords = filterWordsFuture.get();<br>            <span class="hljs-keyword">for</span> (String filterWord : filterWords) &#123;<br>                <span class="hljs-keyword">if</span> (sourceContent.indexOf(filterWord) &gt;= <span class="hljs-number">0</span>)&#123;<br>                    sourceContent = sourceContent.replace(filterWord,<span class="hljs-string">&quot;**&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sourceContent;<br>        &#125;);<br><br>        String result = filterFuture.get();<br>        System.out.println(result);<br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面的代码，我们会发现，Future相比于所有任务都直接在主线程处理，有很多优势，但同时也存在不足，至少表现如下:</p><ol><li><strong>在没有阻塞的情况下，无法对Future的结果执行进一步的操作</strong>。Future不会告知你它什么时候完成，你如果想要得到结果，必须通过一个get()方法，该方法会阻塞直到结果可用为止。它不具备将回调函数附加到Future后并在Future的结果可用时自动调用回调的能力。</li><li><strong>无法解决任务相互依赖的问题</strong>。filterWordFuture和newsFuture的结果不能自动发送给replaceFuture，需要在replaceFuture中手动获取，所以使用Future不能轻而易举地创建异步工作流。</li><li><strong>不能将多个Future合并在一起</strong>。假设你有多种不同的Future，你想在它们全部并行完成后然后再运行某个函数，Future很难独立完成这一需要。</li><li><strong>没有异常处理</strong>。Future提供的方法中没有专门的API应对异常处理，还是需要开发者自己手动异常处理。</li></ol><h3 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h3><p><strong>继承关系：</strong></p><img src="/2023/07/31/Future%E5%92%8CCompletableFuture/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" class title="继承关系"><p><strong>completableFuture</strong> 实现了<strong>Future</strong>和<strong>Completionstage</strong>接口</p><p>CompletableFuture相对于Future具有以下优势:</p><ol><li>为快速创建、链接依赖和组合多个Future提供了大量的便利方法。</li><li>提供了适用于各种开发场景的回调函数，它还提供了非常全面的异常处理支持。·无缝衔接和亲和lambda表达式和Stream - APl。</li><li>我见过的真正意义上的异步编程，把异步编程和函数式编程、响应式编程多种高阶编程思维集于一身，设计上更优雅。</li></ol><h2 id="2-创建异步任务"><a href="#2-创建异步任务" class="headerlink" title="2.创建异步任务"></a>2.创建异步任务</h2><h3 id="2-1-runAsync-方法"><a href="#2-1-runAsync-方法" class="headerlink" title="2.1 runAsync()方法"></a>2.1 runAsync()方法</h3><p>如果你要异步运行某些耗时的后台任务,并且不想从任务中返回任何内容，则可以使用<br><strong>completableFuture.runAsync()<strong>方法。它接受一个</strong>Runnable接口</strong>的实现类对象，方法返回**completableFuture&lt; void &gt;**对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;Void&gt; <span class="hljs-title">runAsync</span><span class="hljs-params">(Runnable runnable)</span></span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><blockquote><p>RunAsyncDemo.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunAsyncDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CommonUtil.printThreadLog(<span class="hljs-string">&quot;main start&quot;</span>);<br><span class="hljs-comment">//        CompletableFuture.runAsync(new Runnable() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public void run() &#123;</span><br><span class="hljs-comment">//                CommonUtil.printThreadLog(&quot;读取文件开始&quot;);</span><br><span class="hljs-comment">//                CommonUtil.sleepSeconds(3);</span><br><span class="hljs-comment">//                CommonUtil.printThreadLog(&quot;读取文件结束&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br>        <span class="hljs-comment">//使用lambda表达式方式执行</span><br>        CompletableFuture.runAsync(() -&gt; &#123;<br>            CommonUtil.printThreadLog(<span class="hljs-string">&quot;读取文件开始&quot;</span>);<br>            CommonUtil.sleepSeconds(<span class="hljs-number">3</span>);<br>            CommonUtil.printThreadLog(<span class="hljs-string">&quot;读取文件结束&quot;</span>);<br>        &#125;);<br>        CommonUtil.printThreadLog(<span class="hljs-string">&quot;main continue&quot;</span>);<br>        CommonUtil.sleepSeconds(<span class="hljs-number">4</span>);<span class="hljs-comment">//此处休眠是为了等待CompletableFuture背后的线程池执行完成，此时CompletableFuture才得以执行</span><br>        CommonUtil.printThreadLog(<span class="hljs-string">&quot;main end&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CompletableFuture中的异步任务底层是通过开启线程的方式完成的</strong></p><p>疑问：异步任务是并发执行还是并行执行？</p><p>并发执行：单核cpu，多个线程轮流抢占一个cpu时是并发执行</p><p>并行执行，多核cpu或者多cpu，多个线程每个使用一个核心，线程是同时执行的，此时是并行执行。</p><p>所以这里取决于cpu的核心数。</p><p><strong>作为开发者，我们只需要清楚如何开启异步任务, CPU硬件会把异步任务合理的分配给CPU上的核运行。</strong></p><h3 id="2-2-supplyAsync-方法"><a href="#2-2-supplyAsync-方法" class="headerlink" title="2.2 supplyAsync()方法"></a>2.2 supplyAsync()方法</h3><p>completableFuture.runAsync()开启不带返回结果。但是，如果你想从后台的异步任务中返回一个结果怎么办?此时,completableFuture.supplyAsync()是你最好的选择了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;U&gt; <span class="hljs-function">CompletableFuture&lt;U&gt; <span class="hljs-title">supplyAsync</span><span class="hljs-params">(Supplier&lt;U&gt; supplier)</span></span><br></code></pre></td></tr></table></figure><p>入参一个Supplier&lt; U &gt;供给者，用于供给带返回值的异步任务<br>并返回completableFuture&lt; U &gt;，其中U是供给者给程序供给值的类型。</p><p>需求:开启异步任务读取source.txt文件中的内容，返回文件中内容并在主线程打印输出</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> RunAsyncDemo3 &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) throws ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//需求：使用CompletableFuture开启异步任务读取source.txt中的文字内容，并打印输出</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonUtil</span>.</span></span>print<span class="hljs-constructor">ThreadLog(<span class="hljs-string">&quot;main start&quot;</span>)</span>;<br>        CompletableFuture&lt;String&gt; resultFuture = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CompletableFuture</span>.</span></span>supply<span class="hljs-constructor">Async(()</span> -&gt; &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonUtil</span>.</span></span>print<span class="hljs-constructor">ThreadLog(<span class="hljs-string">&quot;读取文件&quot;</span>)</span>;<br>            String content = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonUtil</span>.</span></span>read<span class="hljs-constructor">FileContent(<span class="hljs-string">&quot;D:/test/source.txt&quot;</span>)</span>;<br>            return content;<br>        &#125;);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonUtil</span>.</span></span>print<span class="hljs-constructor">ThreadLog(<span class="hljs-string">&quot;main continue&quot;</span>)</span>;<br>        String result = resultFuture.get<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(result);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CommonUtil</span>.</span></span>print<span class="hljs-constructor">ThreadLog(<span class="hljs-string">&quot;main end&quot;</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-then-方法"><a href="#2-3-then-方法" class="headerlink" title="2.3 then*()方法"></a>2.3 then*()方法</h3><p>功能：前一个异步任务执行完，然后执行本任务。</p><p>注意：当前执行thenApply()方法的线程来负责执行本任务，比如main线程，但是如果前一个异步任务还没执行完，那么main线程就不能执行本任务了，得等前一个任务执行完成后才能执行本任务，这个时候就会在执行前一个任务的线程上执行本任务，这样才能保证执行顺序</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunAsyncDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        Supplier&lt;String&gt; readSourceTask = () -&gt; &#123;<br>            CommonUtil.printThreadLog(<span class="hljs-string">&quot;读取源文件&quot;</span>);<br>            String content = CommonUtil.readFileContent(<span class="hljs-string">&quot;D:/test/source.txt&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;源文本：&quot;</span>+content);<br>            <span class="hljs-keyword">return</span> content;<br>        &#125;;<br>        Function&lt;String,String&gt; readFilterTask = s -&gt; &#123;<br>            CommonUtil.printThreadLog(<span class="hljs-string">&quot;读取过滤词&quot;</span>);<br>            String content = CommonUtil.readFileContent(s);<br>            System.out.println(<span class="hljs-string">&quot;过滤词&quot;</span>+content);<br>            <span class="hljs-keyword">return</span> content;<br>        &#125;;<br><br>        CompletableFuture&lt;String&gt; readFuture = CompletableFuture.supplyAsync(readSourceTask,executorService);<br>        CommonUtil.sleepSeconds(<span class="hljs-number">1</span>);<br>        CompletableFuture&lt;String&gt; readFilterFuture = readFuture.thenApply(readFilterTask);<span class="hljs-comment">//当执行到此行代码时，若上面一个任务已经执行完成，则此行代码会由主线程执行。若没有执行完成，则主线程继续执行后面的代码</span><br>        <span class="hljs-comment">//这里也可以使用thenApplyAsync()方法指定线程池来执行</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="then-Async"><a href="#then-Async" class="headerlink" title="then*Async()"></a>then*Async()</h4><p>会利用CompletableFuture中公共的ForkJoinPool来执行任务</p><h4 id="thenApply"><a href="#thenApply" class="headerlink" title="thenApply()"></a>thenApply()</h4><p>任务类型：Function&lt;? super T,    ? extends U&gt; fn</p><p>有入参，有返回值</p><h4 id="thenAccept"><a href="#thenAccept" class="headerlink" title="thenAccept()"></a>thenAccept()</h4><p>任务类型：Cunsumer&lt;? super T&gt; action</p><p>有入参，无返回值</p><h4 id="thenRun"><a href="#thenRun" class="headerlink" title="thenRun()"></a>thenRun()</h4><p>任务类型：Runnable action</p><p>无入参，无返回值</p><h4 id="thenCompose"><a href="#thenCompose" class="headerlink" title="thenCompose()"></a>thenCompose()</h4><p>任务类型：Function&lt;? super T, ? extends CompletionStage&lt; U &gt;&gt; fn</p><p>有入参，有返回值，返回值类型只能是CompletionStage</p><p>按顺序执行两个并行任务。</p><h4 id="thenCombine"><a href="#thenCombine" class="headerlink" title="thenCombine()"></a>thenCombine()</h4><p>任务类型：CompletionStage&lt;? extends U other, BiFunction&lt;? super T,? super U,? extends V&gt;&gt; fn</p><p>有两个入参，第一个参数为CompletionStage，第二个参数为具体要执行的任务，认为类型为BiFunction，有两个入参，一个返回值。</p><p>整合两个并行执行的结果。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunAsyncDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        ExecutorService executorService = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        Supplier&lt;String&gt; readSourceTask = () -&gt; &#123;<br>            CommonUtil.printThreadLog(<span class="hljs-string">&quot;读取源文件&quot;</span>);<br>            String content = CommonUtil.readFileContent(<span class="hljs-string">&quot;D:/test/source.txt&quot;</span>);<br>            <span class="hljs-keyword">return</span> content;<br>        &#125;;<br>        Supplier&lt;String&gt; readFilterTask = () -&gt; &#123;<br>            CommonUtil.printThreadLog(<span class="hljs-string">&quot;读取过滤词&quot;</span>);<br>            String content = CommonUtil.readFileContent(<span class="hljs-string">&quot;D:/test/filterWords.txt&quot;</span>);<br>            <span class="hljs-keyword">return</span> content;<br>        &#125;;<br><br>        CompletableFuture&lt;String&gt; readFuture = CompletableFuture.supplyAsync(readSourceTask,executorService);<br>        CompletableFuture&lt;String&gt; readFilterFuture = CompletableFuture.supplyAsync(readFilterTask, executorService);<br>        CompletableFuture&lt;String&gt; resultFuture = readFuture.thenCombineAsync(readFilterFuture, (resultA, resultB) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> resultA + resultB;<br>        &#125;);<br>        System.out.println(resultFuture.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="runAfterEither"><a href="#runAfterEither" class="headerlink" title="runAfterEither()"></a>runAfterEither()</h4><p>两个任务其中一个完成了，就执行回调</p><h4 id="runAfterBoth"><a href="#runAfterBoth" class="headerlink" title="runAfterBoth()"></a>runAfterBoth()</h4><p>两个任务都完成了，才执行回调</p><h4 id="allOf"><a href="#allOf" class="headerlink" title="allOf()"></a>allOf()</h4><p>所有任务都执行完后才继续往后执行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CompletableFuture.allOf(readFuture,readFilterFuture).join();<br></code></pre></td></tr></table></figure><h4 id="anyOf"><a href="#anyOf" class="headerlink" title="anyOf()"></a>anyOf()</h4><p>任意一个任务都执行完后就继续往后执行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CompletableFuture.anyOf(readFuture,readFilterFuture).join();<br></code></pre></td></tr></table></figure><h4 id="exceptionally（）"><a href="#exceptionally（）" class="headerlink" title="exceptionally（）"></a>exceptionally（）</h4><p>入参类型为Function&lt;Throwable,? extends T&gt; fn,函数参数的入参为异常，异常类型是CompletionException。</p><p>可以返回其他值，如果任务没有出现异常则不会执行。</p><h4 id="complete（）"><a href="#complete（）" class="headerlink" title="complete（）"></a>complete（）</h4><p>直接让任务完成</p><h4 id="cancel"><a href="#cancel" class="headerlink" title="cancel()"></a>cancel()</h4><p>如果任务还没开始，或正在执行，则能取消，设置取消标记为true<br>如果任务已经完成，则设置取消标记为false</p>]]></content>
    
    
    <categories>
      
      <category>异步</category>
      
    </categories>
    
    
    <tags>
      
      <tag>future</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL where、having、on区别</title>
    <link href="/2023/06/26/SQL%20where%E3%80%81having%E3%80%81on%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/06/26/SQL%20where%E3%80%81having%E3%80%81on%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-where、having、on区别"><a href="#SQL-where、having、on区别" class="headerlink" title="SQL where、having、on区别"></a>SQL where、having、on区别</h1><h2 id="WHERE与HAVING"><a href="#WHERE与HAVING" class="headerlink" title="WHERE与HAVING"></a>WHERE与HAVING</h2><ul><li>WHERE子句在GROUP BY 分组和数据汇总<strong>之前</strong>对数据进行过滤</li><li>HAVING子句在GROUP BY 分组和数据汇总<strong>之后</strong>对数据进行过滤</li></ul><h2 id="WHERE与ON"><a href="#WHERE与ON" class="headerlink" title="WHERE与ON"></a>WHERE与ON</h2><p>连接查询中，WHERE和ON的主要区别在于:</p><ul><li>对于内连接查询，WHERE子句和ON子句等效</li><li>对于外连接查询，ON子句在连接操作之前执行，（逻辑上）WHERE子句在连接操作之后执行yon</li></ul><p>用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ...<br><span class="hljs-keyword">from</span> t1<br><span class="hljs-keyword">join</span> t2 <span class="hljs-keyword">on</span> (<span class="hljs-keyword">condition</span>)<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span>;<br></code></pre></td></tr></table></figure><p>内连接示例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> department d<br><span class="hljs-keyword">join</span> employee <span class="hljs-keyword">on</span> (d.dept_id <span class="hljs-operator">=</span> e.dept_id <span class="hljs-keyword">and</span> d.dept_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span>)<br></code></pre></td></tr></table></figure><p>内连接示例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> department d<br><span class="hljs-keyword">join</span> employee <span class="hljs-keyword">on</span> (d.dept_id <span class="hljs-operator">=</span> e.dept_id)<br><span class="hljs-keyword">where</span> d.dept_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span><br></code></pre></td></tr></table></figure><p>示例1和示例2等效。</p><p>示例3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> department d<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> employee <span class="hljs-keyword">on</span> (d.dept_id <span class="hljs-operator">=</span> e.dept_id <span class="hljs-keyword">and</span> d.dept_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span>)<br><span class="hljs-comment">-- 此语句d.dept_id = &#x27;财务部&#x27;过滤条件在连接之前就执行，但是由于left join的特性，返回结果必然会包含select * from department中的所有结果，所以此过滤条件会失效。</span><br></code></pre></td></tr></table></figure><p>示例4：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> department d<br><span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> employee <span class="hljs-keyword">on</span> (d.dept_id <span class="hljs-operator">=</span> e.dept_id)<br><span class="hljs-keyword">where</span> d.dept_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;财务部&#x27;</span><br><span class="hljs-comment">-- 此语句d.dept_id = &#x27;财务部&#x27;过滤条件是在连接之后执行</span><br></code></pre></td></tr></table></figure><p>示例3和示例4不等效。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot AOP</title>
    <link href="/2023/06/26/Springboot%20AOP/"/>
    <url>/2023/06/26/Springboot%20AOP/</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot-AOP"><a href="#Springboot-AOP" class="headerlink" title="Springboot AOP"></a>Springboot AOP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>AOP （<a href="https://so.csdn.net/so/search?q=Aspect&spm=1001.2101.3001.7020">Aspect</a> Orient Programming）,直译过来就是 面向切面编程,AOP 是一种编程思想，是面向对象编程（OOP）的一种补充。</p><p>面向切面编程，实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术.</p><hr><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>AOP 采取横向抽取机制（动态代理），取代了传统纵向继承机制的重复性代码，其应用主要体现在事务处理、日志管理、权限控制、异常处理等方面。</p><p>主要作用是分离功能性需求和非功能性需求，使开发人员可以集中处理某一个关注点或者横切逻辑，减少对业务代码的侵入，增强代码的可读性和可维护性。</p><p>简单的说，AOP 的作用就是保证开发者在不修改源代码的前提下，为系统中的业务组件添加某种通用功能。</p><hr><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>日志记录</li><li>事务管理</li><li>权限验证</li><li>性能监测</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-创建切面类"><a href="#2-创建切面类" class="headerlink" title="2.创建切面类"></a>2.创建切面类</h3><blockquote><p>LogAspect.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspect</span> </span>&#123;<br><span class="hljs-comment">//定义切点</span><br>    <span class="hljs-meta">@Pointcut(value = &quot;@annotation(io.swagger.annotations.ApiOperation)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swaggerAspect</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Pointcut(value = &quot;execution(* com.ego.system.controller.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">controllerAspect</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><span class="hljs-comment">//controllerAspect()可替换为execution(* com.ego.system.controller.*.*(..))</span><br>    <span class="hljs-meta">@Around(value = &quot;controllerAspect()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">doAround</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        MethodSignature signature = (MethodSignature)pjp.getSignature();<br>        Method method = signature.getMethod();<br>        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);<br>        NotLog notLog=method.getAnnotation(NotLog.class);<br>        Object res = pjp.proceed();<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == apiOperation||notLog!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        String parameter = getParameter(method,pjp.getArgs());<br><br>        log.info(<span class="hljs-string">&quot;【time】=&#123;&#125;-----------------: api=&#123;&#125;, method=&#123;&#125;, parameter=&#123;&#125;, res=&#123;&#125;&quot;</span>,<br>                 DateUtil.now(), apiOperation.value(), method.getName(), parameter, JSON.toJSONString(res));<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getParameter</span><span class="hljs-params">(Method method,Object[] args)</span> </span>&#123;<br>        List&lt;Object&gt; argList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Parameter[] parameters = method.getParameters();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br>            <span class="hljs-comment">//将RequestBody注解修饰的参数作为请求参数</span><br>            RequestBody requestBody = parameters[i].getAnnotation(RequestBody.class);<br>            <span class="hljs-keyword">if</span> (requestBody != <span class="hljs-keyword">null</span>) &#123;<br>                argList.add(args[i]);<br>            &#125;<br>            <span class="hljs-comment">//将RequestParam注解修饰的参数作为请求参数</span><br>            RequestParam requestParam = parameters[i].getAnnotation(RequestParam.class);<br>            <span class="hljs-keyword">if</span> (requestParam != <span class="hljs-keyword">null</span>) &#123;<br>                Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>                String key = parameters[i].getName();<br>                <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(requestParam.value())) &#123;<br>                    key = requestParam.value();<br>                &#125;<br>                map.put(key, args[i]);<br>                argList.add(map);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (argList.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;null&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (argList.size() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> argList.get(<span class="hljs-number">0</span>).toString();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> argList.toString();<br>        &#125;<br>    &#125;<br>    <br>    <br>    <span class="hljs-comment">//前置通知   </span><br>    <span class="hljs-meta">@Before(&quot;controllerAspect()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;========== 【Aspectj前置通知】 ==========&quot;</span>);<br>    &#125;<br> <br> <br>    <span class="hljs-comment">//后置通知：方法正常执行后，有返回值，执行该后置通知：如果该方法执行出现异常，则不执行该后置通知</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;controllerAspect()&quot;,returning = &quot;returnVal&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturningAdvice</span><span class="hljs-params">(JoinPoint joinPoint,Object returnVal)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;========== 【Aspectj后置通知】 ==========&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//后置通知</span><br>    <span class="hljs-meta">@After(&quot;controllerAspect()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;========== 【Aspectj后置通知】 ==========&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;controllerAspect()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">aroundAdvice</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;##########【环绕通知中的前置通知】##########&quot;</span>);<br>        Object returnVale = joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;##########【环绕通知中的后置通知】##########&quot;</span>);<br>        <span class="hljs-keyword">return</span> returnVale;<br>    &#125;<br> <br>    <span class="hljs-comment">// 异常通知：方法出现异常时，执行该通知</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;controllerAspect()&quot;,throwing = &quot;ex&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">throwAdvice</span><span class="hljs-params">(JoinPoint joinPoint, Exception ex)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;********** 【Aspectj异常通知】执行开始 **********&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;出现异常：&quot;</span> + ex.getMessage());<br>        System.out.println(<span class="hljs-string">&quot;********** 【Aspectj异常通知】执行结束 **********&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h2><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h3><p>对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责：职责1，职责2。 当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为 A1，A2</p><blockquote><p><strong>单一职责原则注意事项和细节</strong></p></blockquote><ol><li>降低类的复杂度，一个类只负责一项职责。</li><li> 提高类的可读性，可维护性</li><li>降低变更引起的风险 </li><li> 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违 反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则</li></ol><h3 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2.接口隔离原则"></a>2.接口隔离原则</h3><p>客户端不应该依赖它不需要的接 口，即一个类对另一个类的依赖 应该建立在最小的接口上</p><h3 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3.依赖倒置原则"></a>3.依赖倒置原则</h3><p>依赖倒转原则(Dependence Inversion Principle)是指：</p><ol><li><p>高层模块不应该依赖低层模块，二者都应该依赖其抽象 </p></li><li><p>抽象不应该依赖细节，细节应该依赖抽象 </p></li><li><p>依赖倒转(倒置)的中心思想是面向接口编程</p></li><li><p> 依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的 多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象 指的是接口或抽象类，细节就是具体的实现类</p></li><li><p>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的 任务交给他们的实现类去完</p></li></ol><blockquote><p>依赖倒转原则的注意事项和细节 </p></blockquote><ol><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.  </li><li>变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在 一个缓冲层，利于程序扩展和优化</li><li> 继承时遵循里氏替换原则</li></ol><h3 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4.里氏替换原则"></a>4.里氏替换原则</h3><ol><li>里氏替换原则(Liskov Substitution Principle)在1988年，由麻省理工学院的以为姓里 的女士提出的。</li><li> 如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序 P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。 </li><li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法 4) 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下，可 以通过聚合，组合，依赖 来解决问题。</li></ol><h3 id="5-开闭原则-ocp原则"><a href="#5-开闭原则-ocp原则" class="headerlink" title="5.开闭原则 ocp原则"></a>5.开闭原则 ocp原则</h3><ol><li>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则 </li><li> 一个软件实体如类，模块和函数应该***对扩展开放(对提供方)，对修改关闭(对使用 方)***。用抽象构建框架，用实现扩展细节。</li><li> 当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已 有的代码来实现变化。 </li><li> 编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则</li></ol><h3 id="6-迪米特法则"><a href="#6-迪米特法则" class="headerlink" title="6.迪米特法则"></a>6.迪米特法则</h3><ol><li>一个对象应该对其他对象保持最少的了解 </li><li>类与类关系越密切，耦合度越大 </li><li>迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的 越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内 部。对外除了提供的public 方法，不对外泄露任何信息 </li><li> 迪米特法则还有个更简单的定义：只与直接的朋友通信</li><li> <strong>直接的朋友</strong>：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系， 我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合 等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而 出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量 的形式出现在类的内部</li></ol><blockquote><p>迪米特法则注意事项和细节 </p></blockquote><ol><li>迪米特法则的核心是降低类之间的耦合 </li><li>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低 类间(对象间)耦合关系， 并不是要求完全没有依赖关系</li></ol><h3 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7.合成复用原则"></a>7.合成复用原则</h3><p>原则是尽量使用合成/聚合的方式，而不是使用继承</p><p>核心思想：</p><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代 码混在一起。 </li><li> 针对接口编程，而不是针对实现编程。</li><li> 为了交互对象之间的松耦合设计而努力</li></ol><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>指采取一定的方法保证在整个软件系统中，对<em><strong>某个类只能存在一个对象实例</strong></em>，并且该类只提供一个取得其对象实例的方法</p><p>单例模式的八种方式：</p><ul><li>饿汉式（静态常量）</li><li>饿汉式（静态代码块）</li><li>懒汉式（线程不安全）</li><li>懒汉式（线程安全，同步方法）</li><li>懒汉式（线程安全，同步代码块）</li><li>双重检查</li><li>静态内部类</li><li>枚举</li></ul><h3 id="1-饿汉式（静态常量）"><a href="#1-饿汉式（静态常量）" class="headerlink" title="1.饿汉式（静态常量）"></a>1.饿汉式（静态常量）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//饿汉式（静态变量）</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonTest01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance1 == instance2);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><br>    <span class="hljs-comment">//1.构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">//2.本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br>    <span class="hljs-comment">//3.提供一个公有的静态方法，返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：写法简单，在类加载的时候就完成实例化。避免了线程同步问题</p><p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终没有使用过这个实例，则会造成内存浪费。</p><p>结论：这种单例模式可用，但可能造成内存浪费</p><h3 id="2-饿汉式（静态代码块）"><a href="#2-饿汉式（静态代码块）" class="headerlink" title="2.饿汉式（静态代码块）"></a>2.饿汉式（静态代码块）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//饿汉式（静态代码块）</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonTest02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance1 == instance2);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><br>    <span class="hljs-comment">//1.构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-comment">//2.在静态代码块中创建单例对象</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br>    <span class="hljs-comment">//3.提供一个公有的静态方法，返回实例对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>(优缺点同饿汉式（静态常量）)</p><p>优点：写法简单，在类加载的时候就完成实例化。避免了线程同步问题</p><p>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终没有使用过这个实例，则会造成内存浪费。</p><p>结论：这种单例模式可用，但可能造成内存浪费</p><h3 id="3-懒汉式（线程不安全）"><a href="#3-懒汉式（线程不安全）" class="headerlink" title="3.懒汉式（线程不安全）"></a>3.懒汉式（线程不安全）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//懒汉式（线程不安全）</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance1 == instance2);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  Singleton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态的公有方法，当使用到该方法时，才去创建instance</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：起到了Lazy Loading的效果，但是只能在单线程 下使用</p><p>缺点：如果在多线程下使用，当一个线程进入到**if(singleton == null)**判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例</p><p>结论：在实际开发中，不要使用这种方式</p><h3 id="4-懒汉式（线程安全，同步方法）"><a href="#4-懒汉式（线程安全，同步方法）" class="headerlink" title="4.懒汉式（线程安全，同步方法）"></a>4.懒汉式（线程安全，同步方法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//懒汉式（线程安全，同步方法）</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance1.hashCode());<br>        System.out.println(instance2.hashCode());<br>        System.out.println(instance1 == instance2);<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态的公有方法，当使用到该方法时，才去创建instance</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：解决了线程不安全问题</p><p>缺点：效率低，每个线程在想获得类的实例的时候，执行getInstance方法都要进行同步。而其实这个方法只执行一次 实例化代码就够了，后面的想获得该类实例直接return就行了。</p><p>结论：在实际开发中，不推荐使用这种方式。</p><h3 id="5-懒汉式（线程安全，同步代码块）"><a href="#5-懒汉式（线程安全，同步代码块）" class="headerlink" title="5.懒汉式（线程安全，同步代码块）"></a>5.懒汉式（线程安全，同步代码块）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//懒汉式（线程安全，同步方法）</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance1.hashCode());<br>        System.out.println(instance2.hashCode());<br>        System.out.println(instance1 == instance2);<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态的公有方法，当使用到该方法时，才去创建instance</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>            instance = <span class="hljs-keyword">new</span> Singleton();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(优缺点同懒汉式（线程安全，同步方法）)</p><p>优点：解决了线程不安全问题</p><p>缺点：效率低，每个线程在想获得类的实例的时候，执行getInstance方法都要进行同步。而其实这个方法只执行一次 实例化代码就够了，后面的想获得该类实例直接return就行了。</p><p>结论：在实际开发中，不推荐使用这种方式。</p><h3 id="6-双重检查"><a href="#6-双重检查" class="headerlink" title="6.双重检查"></a>6.双重检查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双重检查</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton06</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance1.hashCode());<br>        System.out.println(instance2.hashCode());<br>        System.out.println(instance1 == instance2);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//提供一个静态的公有方法，加入双重检查代码，同时解决线程安全问题和懒加载问题</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class)&#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> Singleton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两 次if (singleton == null)检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)， 直接return实例化对象，也避免的反复进行方法同步</p><p>优点：线程安全；延迟加载；效率较高</p><p>结论：在实际开发中，推荐使用这种方式。</p><h3 id="7-静态内部类"><a href="#7-静态内部类" class="headerlink" title="7.静态内部类"></a>7.静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton07</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance1.hashCode());<br>        System.out.println(instance2.hashCode());<br>        System.out.println(instance1 == instance2);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 当Singleton类进行装载时，静态内部类SingletonInstance是不会进行装载的</span><br><span class="hljs-comment"> * 当调用Singleton.getInstance()方法时才会进行SingletonInstance类的装载，从而实现了懒加载，与此同时，jvm装载类时是线程安全的，利用了底层的类装载机制实现了线程安全</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//写一个静态内部类,该类中有一个静态属性Singleton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br><br>    <span class="hljs-comment">//提供一个静态的公有方法，直接返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">return</span> SingletonInstance.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化 时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的 实例化。类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们 保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p><p>优点：线程安全，利用静态内部类特点实现延迟加载，效率高</p><p>结论：在实际开发中，推荐使用这种方式。</p><h3 id="8-枚举"><a href="#8-枚举" class="headerlink" title="8.枚举"></a>8.枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//枚举</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance1 = Singleton.INSTANCE;<br>        Singleton instance2 = Singleton.INSTANCE;<br>        System.out.println(instance1.hashCode());<br>        System.out.println(instance2.hashCode());<br>        System.out.println(instance1 == instance2);<br>        instance1.test();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    INSTANCE;<span class="hljs-comment">//属性</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而 且还能防止反序列化重新创建新的对象。</p><p>这种方式是Effective Java作者Josh Bloch 提倡的</p><p>结论：在实际开发中，推荐使用这种方式。</p><h3 id="单例模式在JDK中的应用："><a href="#单例模式在JDK中的应用：" class="headerlink" title="单例模式在JDK中的应用："></a>单例模式在JDK中的应用：</h3><p>java.lang.Runtime是经典的单例模式(饿汉式静态常量)</p><p>部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Runtime</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Runtime currentRuntime = <span class="hljs-keyword">new</span> Runtime();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Version version;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the runtime object associated with the current Java application.</span><br><span class="hljs-comment">     * Most of the methods of class &#123;<span class="hljs-doctag">@code</span> Runtime&#125; are instance</span><br><span class="hljs-comment">     * methods and must be invoked with respect to the current runtime object.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  the &#123;<span class="hljs-doctag">@code</span> Runtime&#125; object associated with the current</span><br><span class="hljs-comment">     *          Java application.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title">getRuntime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentRuntime;<br>    &#125;<br><br>    <span class="hljs-comment">/** Don&#x27;t let anyone else instantiate this class */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Runtime</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>单例模式注意事项和细节说明</p><ol><li>单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需 要频繁创建销毁的对象，使用单例模式可以提高系统性能 </li><li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使 用new </li><li> 单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或 耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数 据库或文件的对象（比如数据源、session工厂等）</li></ol><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><ol><li>简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由一 个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族 中最简单实用的模式 </li><li>简单工厂模式：定义了一个创建对象的类，由这个类来封装<strong>实例化对象</strong>的行为(代码) </li><li>在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会 使用到工厂模式</li></ol><p><strong>订购pizza类图</strong></p><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221205165757955.png" class></div><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>新需求：披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如 北京的奶酪pizza、 北京的胡椒pizza 或者是伦敦的奶酪pizza、伦敦的胡椒pizza。</p><p><strong>使用工厂方法模式：</strong></p><p><strong>工厂方法模式设计方案：</strong>将披萨项目的实例化功能抽象成抽象方法，在不同的口味点 餐子类中具体实现。 </p><p>工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将<em><strong>对象的实例化推迟到子类</strong></em></p><p><strong>类图：OrderPizza及其子类就相当于工厂类</strong></p><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221205170755925.png" class></div><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><ol><li>抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象簇，而无需 指明具体的类 </li><li> 抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。 </li><li>从设计层面看，抽象工厂模式就是对简单工厂模式的改进(或者称为进一步的抽象)。</li><li> 将工厂抽象成两层，AbsFactory(抽象工厂) 和 具体实现的工厂子类。程序员可以 根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇， 更利于代码的维护和扩展。</li></ol><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ol><li>**代理模式:**为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象.这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能。</li><li>被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象</li><li>代理模式有不同的形式,主要有三种静态代理、动态代理(JDK代理、接口代理)和Cglib代理(可以在内存动态的创建对象，而不需要实现接口，他是属于动态代理的范畴)。</li></ol><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理在使用时,需要定义接口或者父类,被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同父类</p><p>样例：</p><ol><li>定义一个接口:ITeacherDao</li><li>目标对象TeacherDAO实现接口ITeacherDAO</li><li>使用静态代理方式,就需要在代理对象TeacherDAOProxy 中也实现ITeacherDAO</li><li>调用的时候通过调用代理对象的方法来调用目标对象.</li><li>特别提醒:代理对象与目标对象要实现相同的接口,然后通过调用相同的方法来调用目标对象的方法</li></ol><p>代码实现：</p><p><code>TeacherDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeacherDao</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始上课&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>ITeacherDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITeacherDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TeacherDaoProxy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeacherDao</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> ITeacherDao target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TeacherDaoProxy</span><span class="hljs-params">(ITeacherDao target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//可以在此做一些额外的操作</span><br>        System.out.println(<span class="hljs-string">&quot;准备代理&quot;</span>);<br>        target.teach();<br>        System.out.println(<span class="hljs-string">&quot;代理结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        TeacherDaoProxy teacherDaoProxy = <span class="hljs-keyword">new</span> TeacherDaoProxy(<span class="hljs-keyword">new</span> TeacherDao());<br><br>        <span class="hljs-comment">//通过代理对象，调用到被代理对象的方法</span><br>        teacherDaoProxy.teach();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点:在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展</p><p>缺点：因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类；一旦接口增加方法,目标对象与代理对象都要维护</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ol><li>代理对象,不需要实现接口，但是目标对象要实现接口，否则不能用动态代理</li><li>代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象</li><li>动态代理也叫做:JDK代理、接口代理</li></ol><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221212165925238.png" class></div><p>代码实现：</p><p><code>ITeacherDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITeacherDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TeacherDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeacherDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">teach</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始上课&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ProxyFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span> </span>&#123;<br><br>    <span class="hljs-comment">//维护一个目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-comment">//构造器，对target进行初始化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyFactory</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">//给目标生成一个代理对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ClassLoader loader :指定当前目标对象使用额类加载器</span><br><span class="hljs-comment">         * Class&lt;?&gt;[] interfaces :目标对象实现的接口类型，使用泛型方法确认类型</span><br><span class="hljs-comment">         * InvocationHandler h :事情处理，执行目标对象的方法时，会触发事情处理器方法，会把当前执行的目标对象方法作为参数传入</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;jdk代理开始&quot;</span>);<br>                Object returnVal = method.invoke(target, args);<br>                <span class="hljs-keyword">return</span> returnVal;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TeacherDao teacherDao = <span class="hljs-keyword">new</span> TeacherDao();<br><br>        ProxyFactory proxyFactory = <span class="hljs-keyword">new</span> ProxyFactory(teacherDao);<br><br>        ITeacherDao proxyInstance = (ITeacherDao)proxyFactory.getProxyInstance();<br><br>        proxyInstance.teach();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h3><ol><li>静态代理和JDK代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个单独的对象,并没有实<br>现任何的接口,这个时候可使用目标对象子类来实现代理-这就是Cglib代理</li><li>Cglib代理也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能扩展,有些书也将Cglib代<br>理归属到动态代理。</li><li>Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的<br>框架使用,例如 Spring AOP，实现方法拦截</li><li>在AOP编程中如何选择代理模式:<ul><li><strong>目标对象需要实现接口，用JDK代理</strong></li><li><strong>目标对象不需要实现接口，用Cglib代理</strong></li></ul></li><li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类</li></ol><p><code>注意：在内存中动态构建子类，注意代理的类不能为final，否则报错java.lang.IllegalArgumentException: 目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.</code></p><p>类图：</p><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221212195650589.png" class></div><p>代码：</p><p><code>TeacherDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">teach</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;teaching----&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上课结束&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ProxyFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodInterceptor</span> </span>&#123;<br>    <span class="hljs-comment">//维护一个目标对象</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ProxyFactory</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写方法，会调用目标对象的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;cglib代理开始&quot;</span>);<br>        Object returnVal = method.invoke(target, args);<br>        System.out.println(<span class="hljs-string">&quot;cglib提交&quot;</span>);<br>        <span class="hljs-keyword">return</span> returnVal;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxyInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1.创建一个工具类</span><br>        Enhancer enhancer = <span class="hljs-keyword">new</span> Enhancer();<br>        <span class="hljs-comment">//2.设置父类</span><br>        enhancer.setSuperclass(target.getClass());<br>        <span class="hljs-comment">//3.设置回调函数</span><br>        enhancer.setCallback(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">//4.创建子类对象，即代理对象</span><br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ProxyFactory proxyFactory = <span class="hljs-keyword">new</span> ProxyFactory(<span class="hljs-keyword">new</span> TeacherDao());<br>        TeacherDao proxyInstance = (TeacherDao)proxyFactory.getProxyInstance();<br>        String result = proxyInstance.teach();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ol><li>模板方法模式(Template Method Patterm)，又叫模板模式(Template Pattern)，z在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</li><li>简单说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤</li><li>这种类型的设计模式属于行为型模式。</li></ol><p>类图：</p><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221212204256492.png" class></div><p><strong>AbstractClass 抽象类</strong>：类中实现了模板方法(template)，定义了算法的骨架，具体子类需要去实现其它的抽象方法 operationr2,3,4<br><strong>ConcreteClass</strong>：实现抽象方法 operationr2,3,4，以完成算法中特点子类的步骤</p><p>代码实现：</p><p><code>SoyaMilk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoyaMilk</span> </span>&#123;<br>    <span class="hljs-comment">//模板方法，make，使用final关键字防止子类覆盖</span><br>    <span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">make</span><span class="hljs-params">()</span></span>&#123;<br>        select();<br>        <span class="hljs-keyword">if</span> (isAddCondiments())&#123;<br>            addCondiments();<br>        &#125;<br>        soak();<br>        beat();<br>    &#125;<br>    <span class="hljs-comment">//选材料</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;1.选择黄豆&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//添加配料，抽象方法交给子类去实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//浸泡</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">soak</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;3.浸泡黄豆与配料&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">beat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;4.打磨黄豆与配料&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//钩子函数：定义一个方法，默认不做任何事，子类可以视情况决定要不要覆盖它</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isAddCondiments</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>RedSoyaMilk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;3.加上红豆&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PenutSoyaMilk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PenutSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;3.加入花生&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//制作红豆豆浆</span><br>        RedSoyaMilk redSoyaMilk = <span class="hljs-keyword">new</span> RedSoyaMilk();<br>        <span class="hljs-comment">//制作花生豆浆</span><br>        PenutSoyaMilk penutSoyaMilk = <span class="hljs-keyword">new</span> PenutSoyaMilk();<br>        redSoyaMilk.make();<br>        penutSoyaMilk.make();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>PureSoyaMilk</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PureSoyaMilk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SoyaMilk</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//空实现</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isAddCondiments</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>IOC中的应用：</p><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221212212254766.png" class></div><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221212212326464.png" class></div><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><ol><li>职责链模式(Chain of Responsibility Patterm)，又叫责任链模式，为请求创建了一个接收者对象的链(简单示意图)。这种模式对请求的发送者和接收者进行解耦。</li><li>职责链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</li><li>这种类型的设计模式属于行为型模式</li></ol><p>类图：</p><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221212214550056.png" class></div><p>**Handler:**抽象的处理者,定义了一个处理请求的接口，同时含有一个另外的Handler</p><p><strong>ConcretcHandlerA ,B</strong>是具体的处理者,处理它自己负责的请求，可以访问它的后继者(即下一个处理者)，如果可以处理当前请求，则处理，否则就将该请求交个后继者去处理，从而形成一个职责链</p><p><strong>Request</strong> ,含义很多属性，表示一个请求</p><p>代码实现：</p><p><code>Approver</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Approver</span> </span>&#123;<br><br>    Approver approver;<span class="hljs-comment">//下一个处理者</span><br><br>    String name;<span class="hljs-comment">//名字</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Approver</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setApprover</span><span class="hljs-params">(Approver approver)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.approver = approver;<br>    &#125;<br><br>    <span class="hljs-comment">//处理审批请求的方法，由子类完成</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>PurchaseRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PurchaseRequest</span> </span>&#123;<br>    <span class="hljs-comment">//请求类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> type;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> price = <span class="hljs-number">0.0f</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PurchaseRequest</span><span class="hljs-params">(<span class="hljs-keyword">int</span> type, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">float</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.type = type;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> type)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(<span class="hljs-keyword">float</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DepartmentApprover</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系审批人</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DepartmentApprover</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Approver</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DepartmentApprover</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (purchaseRequest.getPrice() &lt;= <span class="hljs-number">5000</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请求编号id= &quot;</span>+purchaseRequest.getId() + <span class="hljs-string">&quot;被&quot;</span>+ <span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;处理&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            approver.processRequest(purchaseRequest);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>CollegeApprover</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 院审批人</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CollegeApprover</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Approver</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CollegeApprover</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (purchaseRequest.getPrice() &gt; <span class="hljs-number">5000</span> &amp;&amp; purchaseRequest.getPrice() &lt;= <span class="hljs-number">10000</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请求编号id= &quot;</span>+purchaseRequest.getId() + <span class="hljs-string">&quot;被&quot;</span>+ <span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;处理&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            approver.processRequest(purchaseRequest);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SchoolMasterApprover</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 校长审批人</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SchoolMasterApprover</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Approver</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SchoolMasterApprover</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processRequest</span><span class="hljs-params">(PurchaseRequest purchaseRequest)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (purchaseRequest.getPrice() &gt; <span class="hljs-number">10000</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请求编号id= &quot;</span>+purchaseRequest.getId() + <span class="hljs-string">&quot;被&quot;</span>+ <span class="hljs-keyword">this</span>.name + <span class="hljs-string">&quot;处理&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            approver.processRequest(purchaseRequest);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建请求</span><br>        PurchaseRequest purchaseRequest = <span class="hljs-keyword">new</span> PurchaseRequest(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12000</span>);<br><br>        <span class="hljs-comment">//创建相关审批人</span><br>        DepartmentApprover departmentApprover = <span class="hljs-keyword">new</span> DepartmentApprover(<span class="hljs-string">&quot;张主任&quot;</span>);<br>        CollegeApprover collegeApprover = <span class="hljs-keyword">new</span> CollegeApprover(<span class="hljs-string">&quot;李院长&quot;</span>);<br>        SchoolMasterApprover schoolMaster = <span class="hljs-keyword">new</span> SchoolMasterApprover(<span class="hljs-string">&quot;王校长&quot;</span>);<br><br>        <span class="hljs-comment">//将下一个审批人设置好，处理人构成环形</span><br>        departmentApprover.setApprover(collegeApprover);<br>        collegeApprover.setApprover(schoolMaster);<br>        schoolMaster.setApprover(departmentApprover);<br><br>        departmentApprover.processRequest(purchaseRequest);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式:对象之间多对一依赖的一种设计方案，被依赖的对象为Subject，依赖的对象为Observer，Subject通知Observer变化,比如这里的奶站是Subject，是1的一方。用户时Observer，是多的一方。</p><ol><li>观察者模式类似订牛奶业务</li><li>奶站/气象局:Subject</li><li>用户/第三方网站:Observer</li></ol><p><strong>Subject：</strong>登记注册、移除和通知</p><ul><li>registerObserver 注册</li><li>removeObserver移除</li><li>notifyObservers()通知所有的注册的用户，根据不同需求，可以是更新数据，让用户来取，也可能是实施推送，看具体需求定</li><li>Observer:接收输入</li></ul><p>类图：</p><div style="width:50%;margin:auto"><img src="/2022/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20221213145545584.png" class></div><p>代码：</p><p><code>Subject</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//被依赖方接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Subject</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer o)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer o)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Observer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 观察者接口（依赖方接口），由观察者实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temperature,<span class="hljs-keyword">float</span> pressure,<span class="hljs-keyword">float</span> humidity)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CurrentConditions·</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实际观察者方</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CurrentConditions</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span> </span>&#123;<br><br>    <span class="hljs-comment">//温度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> temperature;<br>    <span class="hljs-comment">//气压</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">float</span> pressure;<br>    <span class="hljs-comment">//湿度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> humidity;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Today temperature: &quot;</span>+temperature);<br>        System.out.println(<span class="hljs-string">&quot;Today pressure: &quot;</span>+pressure);<br>        System.out.println(<span class="hljs-string">&quot;Today humidity: &quot;</span>+humidity);<br>    &#125;<br><br>    <span class="hljs-comment">//更新自己保存的天气信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temperature,<span class="hljs-keyword">float</span> pressure,<span class="hljs-keyword">float</span> humidity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.temperature = temperature;<br>        <span class="hljs-keyword">this</span>.pressure = pressure;<br>        <span class="hljs-keyword">this</span>.humidity = humidity;<br>        display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>WeatherData</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 被依赖方</span><br><span class="hljs-comment"> * 包含最新的天气情况信息</span><br><span class="hljs-comment"> * 含有观察者集合，用ArrayList管理</span><br><span class="hljs-comment"> * 当数据有更新时，主动调用ArrayList，通知所有的接入方</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subject</span></span>&#123;<br>    <span class="hljs-comment">//温度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> temperature;<br>    <span class="hljs-comment">//气压</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">float</span> pressure;<br>    <span class="hljs-comment">//湿度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> humidity;<br><br>    <span class="hljs-comment">//维护一个观察者列表</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Observer&gt; observers;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeatherData</span><span class="hljs-params">()</span> </span>&#123;<br>        observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getTemperature</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> temperature;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getPressure</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pressure;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getHumidity</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> humidity;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dataChange</span><span class="hljs-params">()</span></span>&#123;<br>        notifyObservers();<br>    &#125;<br>    <span class="hljs-comment">//当数据更新时，就调用dataChange()</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(<span class="hljs-keyword">float</span> temperature,<span class="hljs-keyword">float</span> pressure,<span class="hljs-keyword">float</span> humidity)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.temperature = temperature;<br>        <span class="hljs-keyword">this</span>.pressure = pressure;<br>        <span class="hljs-keyword">this</span>.humidity = humidity;<br>        dataChange();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer o)</span> </span>&#123;<br>        observers.add(o);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (observers.contains(o)) &#123;<br>            observers.remove(o);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//天气情况发生改变时推送给所有的观察者方</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyObservers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;<br>            observer.update(<span class="hljs-keyword">this</span>.getTemperature(),<span class="hljs-keyword">this</span>.getPressure(),<span class="hljs-keyword">this</span>.getHumidity());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CurrentConditions currentConditions = <span class="hljs-keyword">new</span> CurrentConditions();<br><br>        WeatherData weatherData = <span class="hljs-keyword">new</span> WeatherData();<br>        weatherData.registerObserver(currentConditions);<br><br>        weatherData.setData(<span class="hljs-number">30</span>,<span class="hljs-number">150</span>,<span class="hljs-number">40</span>);<br>        weatherData.setData(<span class="hljs-number">20</span>,<span class="hljs-number">150</span>,<span class="hljs-number">40</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker常用命令</title>
    <link href="/2022/12/21/Docker%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/12/21/Docker%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="一、镜像命令"><a href="#一、镜像命令" class="headerlink" title="一、镜像命令"></a>一、镜像命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 列出本地主机上的镜像</span><br>docker images<br><span class="hljs-comment">#参数：-a 列出本地所有的镜像（含历史映像层）；</span><br><span class="hljs-comment">#  -q 只显示镜像id</span><br><br><br><span class="hljs-comment">#在远程仓库搜索镜像</span><br>docker search [imageName]<br><span class="hljs-comment">#参数：--limit [n] 只列出n个镜像，默认W为25个</span><br><span class="hljs-comment">#例： docker search --limit 5 redis </span><br><br><span class="hljs-comment">#下载镜像</span><br>docker pull [imageName:tag]<br><span class="hljs-comment">#例：docker pull redis:6.0.8</span><br><br><span class="hljs-comment">#查看镜像、容器、数据卷所占的空间</span><br>docker system df <br><br><span class="hljs-comment">#删除镜像</span><br>docker rmi [imageName]<br>docker rmi [imageId]<br><span class="hljs-comment">#参数： -f 强制删除</span><br><br><span class="hljs-comment">#删除多个</span><br>docker rmi -f [imageName1:tag] [imageName2:tag]<br><br><span class="hljs-comment">#删除全部</span><br>docker rmi -f $(docker images -qa)<br></code></pre></td></tr></table></figure><p><strong>虚悬镜像：仓库名和tag都为&lt; none &gt;的镜像（无用，建议删除</strong></p><h2 id="二、容器命令"><a href="#二、容器命令" class="headerlink" title="二、容器命令"></a>二、容器命令</h2><h3 id="1-启动容器"><a href="#1-启动容器" class="headerlink" title="1.启动容器"></a>1.启动容器</h3><blockquote><p>docker run [options] IMAGE [command] [arg…]</p></blockquote><p><strong>常用options参数：</strong></p><p>–name=”containerName”  为容器指定一个名称</p><p>-d 后台运行容器并返回容器id，也即启动守护式容器（后台运行）</p><p>-i 为容器重新分配一个伪输入终端，通常与-i一起使用，也即启动交互式容器</p><p>-P 随机端口映射，大写P</p><p>-p 指定端口映射，小写p</p><blockquote><p>-p 6379:6379 左边为宿主机的端口，右边为docker中的端口</p></blockquote><p><strong>注意：有的镜像以-d参数后台启动后，由于前台没有运行的应用，该容器会立即自杀</strong></p><h3 id="2-列出当前正在运行的容器"><a href="#2-列出当前正在运行的容器" class="headerlink" title="2.列出当前正在运行的容器"></a>2.列出当前正在运行的容器</h3><blockquote><p>docker ps [options]</p></blockquote><p>参数： -a 列出当前正在运行的容器+历史上运行过的</p><p>​            -l 显示最近创建的容器</p><p>​            -n 显示最近n个创建的容器，例如 -n 3</p><p>​            -q 静默模式，只显示容器编号</p><h3 id="3-退出容器"><a href="#3-退出容器" class="headerlink" title="3.退出容器"></a>3.退出容器</h3><p><strong>exit：</strong>使用exit方式退出，容器会停止</p><p><strong>ctrl+p+q：</strong>使用ctrl+p+q退出，容器不会停止</p><h3 id="4-启动已停止运行的容器"><a href="#4-启动已停止运行的容器" class="headerlink" title="4.启动已停止运行的容器"></a>4.启动已停止运行的容器</h3><blockquote><p>docker start [containerId]</p><p>docker start [containerName]</p></blockquote><p>类似的，还有以下几种命令：</p><p><strong>重启容器</strong></p><blockquote><p>docker restart [containerId]</p><p>docker restart [containerName]</p></blockquote><p><strong>停止容器</strong></p><blockquote><p>docker stop [containerId]</p><p>docker stop [containerName]</p></blockquote><p><strong>强制停止容器</strong></p><blockquote><p>docker kill [containerId]</p><p>docker kill [containerName]</p></blockquote><h3 id="5-删除已停止的容器"><a href="#5-删除已停止的容器" class="headerlink" title="5.删除已停止的容器"></a>5.删除已停止的容器</h3><blockquote><p>docker rm [containerId]</p></blockquote><p>参数：-f 强制删除正在运行的容器</p><p>一次删除多个容器实例</p><blockquote><p>docker rm -f $(docker ps -a -q)</p></blockquote><blockquote><p>docker ps -a -q | xargs docker rm</p></blockquote><h3 id="6-查看容器日志"><a href="#6-查看容器日志" class="headerlink" title="6.查看容器日志"></a>6.查看容器日志</h3><blockquote><p>docker logs [containerId]</p></blockquote><h3 id="7-查看容器内部细节"><a href="#7-查看容器内部细节" class="headerlink" title="7.查看容器内部细节"></a>7.查看容器内部细节</h3><blockquote><p>docker inspect [containerId]</p></blockquote><h3 id="8-进入正在运行的容器"><a href="#8-进入正在运行的容器" class="headerlink" title="8.进入正在运行的容器"></a>8.进入正在运行的容器</h3><blockquote><p>docker exec [OPTIONS] CONTAINER COMMAND [ARGS]</p></blockquote><p>exec是在容器中打开新的终端，并且可以启动新的进程，用exit退出不会导致容器停止</p><blockquote><p>docker attach [CONTAINERID]</p></blockquote><p>attach直接进入容器启动命令的终端，不会启动新的进程，使用exit退出会导致容器停止</p><h3 id="9-从容器内拷贝文件到主机上"><a href="#9-从容器内拷贝文件到主机上" class="headerlink" title="9.从容器内拷贝文件到主机上"></a>9.从容器内拷贝文件到主机上</h3><blockquote><p>docker cp [CONTAINERID:PATH] DESTPATH</p></blockquote><p>PATH：容器内路径 </p><p>DESTPATH：目的主机路径</p><h3 id="10-导入导出容器"><a href="#10-导入导出容器" class="headerlink" title="10.导入导出容器"></a>10.导入导出容器</h3><p><strong>导出容器</strong></p><blockquote><p>docker export [CONTAINERID] &gt; FILENAME.tar</p></blockquote><p><strong>导入容器</strong></p><blockquote><p>cat FILENAME.tar | docker import -IMAGEUER/IMAGENAME:tag</p></blockquote><h2 id="三、commit命令"><a href="#三、commit命令" class="headerlink" title="三、commit命令"></a>三、commit命令</h2><p>提交容器副本使之成为一个新的镜像</p><blockquote><p>docker commit -m=”MESSAGE”  -a=”AUTHOR” [CONTAINERID] [NEWNAME:tag] </p></blockquote><p>MESSAGE：描述信息</p><p>AUTHOR：作者</p><p>NEWNAME：要创建的目标镜像名</p><p>tag: 版本</p><h3 id="四、本地镜像推送到私服仓库"><a href="#四、本地镜像推送到私服仓库" class="headerlink" title="四、本地镜像推送到私服仓库"></a>四、本地镜像推送到私服仓库</h3><h3 id="1-拉取registry镜像并运行"><a href="#1-拉取registry镜像并运行" class="headerlink" title="1.拉取registry镜像并运行"></a>1.拉取registry镜像并运行</h3><blockquote><p>docker pull registry</p></blockquote><blockquote><p>docker run -d -p 5000:5000 -v /usr/ego/:/tmp/registry –privileged=true registry</p></blockquote><p>privileged=true 作用是提高容器至root权限</p><p>默认情况下，仓库会建立在/var/lib/registry目录下</p><h3 id="2-利用tag命令将镜像修改为符合私服规范的Tag"><a href="#2-利用tag命令将镜像修改为符合私服规范的Tag" class="headerlink" title="2.利用tag命令将镜像修改为符合私服规范的Tag"></a>2.利用tag命令将镜像修改为符合私服规范的Tag</h3><blockquote><p>docker tag [IMAGE:tag] Host:Port/Repository:tag</p></blockquote><h3 id="3-修改配置文件以允许http方式推送镜像"><a href="#3-修改配置文件以允许http方式推送镜像" class="headerlink" title="3.修改配置文件以允许http方式推送镜像"></a>3.修改配置文件以允许http方式推送镜像</h3><blockquote><p>vim /etc/docker/daemon.json</p></blockquote><p>新增以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&quot;insecure-registries&quot;:[&quot;192.168.111.162:5000&quot;]<br></code></pre></td></tr></table></figure><p>重启docker</p><blockquote><p>systemctl restart docker</p></blockquote><h3 id="4-推送镜像到私服库"><a href="#4-推送镜像到私服库" class="headerlink" title="4.推送镜像到私服库"></a>4.推送镜像到私服库</h3><blockquote><p>docker push [IMAGENAME:tag]</p></blockquote><p>[IMAGENAME:tag] :此处的名镜像名即为tag命令处理后的符合规范的镜像名</p><h3 id="5-验证私服库上的镜像"><a href="#5-验证私服库上的镜像" class="headerlink" title="5.验证私服库上的镜像"></a>5.验证私服库上的镜像</h3><blockquote><p>curl -XGET <a href="http://192.168.111.162:5000/v2/_catalog">http://192.168.111.162:5000/v2/_catalog</a></p></blockquote><h3 id="6-pull镜像"><a href="#6-pull镜像" class="headerlink" title="6.pull镜像"></a>6.pull镜像</h3><blockquote><p>docker pull [IMAGENAME:tag]</p></blockquote><h2 id="五、容器数据卷映射"><a href="#五、容器数据卷映射" class="headerlink" title="五、容器数据卷映射"></a>五、容器数据卷映射</h2><h3 id="1-映射命令"><a href="#1-映射命令" class="headerlink" title="1.映射命令"></a>1.映射命令</h3><blockquote><p>docker run -it –privileged=true -v /HOSTPATH:/CONTAINERPATH [IMAGENAME]</p></blockquote><p>HOSTPATH:宿主机绝对路径目录</p><p>CONTAINERPATH ：容器内目录</p><p>挂载之后，宿主机目录和容器内的目录数据会共享，其中一个路径下的更改都会映射到另一个路径下，且容器重启后数据依然会被同步回来。</p><h3 id="2-查看数据卷是否挂载成功"><a href="#2-查看数据卷是否挂载成功" class="headerlink" title="2.查看数据卷是否挂载成功"></a>2.查看数据卷是否挂载成功</h3><blockquote><p>docker inspect [CONTAINERID]</p></blockquote><p>查询出的信息中的Mounts字段即为挂载目录的相关信息</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>image</tag>
      
      <tag>container</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springcloud配置过程中遇到的问题</title>
    <link href="/2022/12/21/springcloud%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/21/springcloud%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="springcloud配置过程中遇到的问题"><a href="#springcloud配置过程中遇到的问题" class="headerlink" title="springcloud配置过程中遇到的问题"></a>springcloud配置过程中遇到的问题</h1><h2 id="配置中心客户端启动报错"><a href="#配置中心客户端启动报错" class="headerlink" title="配置中心客户端启动报错"></a>配置中心客户端启动报错</h2><p>springcloud config Could not resolve placeholder ‘config.info’ in value “${config.info}</p><p>问题原因：在远程仓库中直接进行编辑可能会导致yml文件格式不正确</p><p>解决方法：重新修改为正确的yml格式</p><p>配置中心远程仓库更新后，客户端没有更新(已经加入@RefreshScope注解)</p><p>解决方法：在更新远程仓库配置文件内容后，需要手动发送一次请求给客户端端口进行刷新</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">curl -X POST &quot;http://localhost:<span class="hljs-number">3355</span>/actuator/refresh&quot;<br></code></pre></td></tr></table></figure><h2 id="nacos切换mysql数据库连接失败"><a href="#nacos切换mysql数据库连接失败" class="headerlink" title="nacos切换mysql数据库连接失败"></a>nacos切换mysql数据库连接失败</h2><p>nacos版本：1.4.3</p><p>mysql版本：8.0.27</p><p>解决方法：更改mysql版本，换为5.7.37版本后正常</p><h1 id="Sentinel自定义解耦兜底方法失效原因"><a href="#Sentinel自定义解耦兜底方法失效原因" class="headerlink" title="Sentinel自定义解耦兜底方法失效原因"></a>Sentinel自定义解耦兜底方法失效原因</h1><p><img src="https://img-blog.csdnimg.cn/ca28d85c7212480a9816e9d5cd93050b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RlRGR5X0thbmc=,size_16,color_FFFFFF,t_70" alt="img"></p><p>其中URL限流是@GetMapping中的value值。<br>而资源名是@SentinelResource中value值。</p><p><strong>结果：只有资源名限流，自定义兜底方法才能起作用。URL限流只会调用默认的方法</strong></p>]]></content>
    
    
    <categories>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot单元测试问题</title>
    <link href="/2022/12/21/springboot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/21/springboot%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot单元测试问题"><a href="#springboot单元测试问题" class="headerlink" title="springboot单元测试问题"></a>springboot单元测试问题</h1><h2 id="1-junit不同版本间的注解使用"><a href="#1-junit不同版本间的注解使用" class="headerlink" title="1.junit不同版本间的注解使用"></a>1.junit不同版本间的注解使用</h2><p>springboot引入依赖的时候，2.2.x版本以下的引入的是Junit4的测试版本，2.2.x及以上引入的是Junit5的版本</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>&lt;<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>使用junit4版本</p><p>引入的@Test注解为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test<br></code></pre></td></tr></table></figure><p>测试类上需要加上下面两个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br></code></pre></td></tr></table></figure></li><li><p>使用junit5版本</p><p>引入的@Test注解为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">org.junit.jupiter.api.Test<br></code></pre></td></tr></table></figure><p>测试类上需要加上下面一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br></code></pre></td></tr></table></figure><p>测试类所在包与启动类所在包名不一致时，也可以手动指定 <code>@SpringBootTest(classes = DemoApp.class)</code></p></li></ul><h2 id="2-报错java-lang-IllegalStateException-Failed-to-load-ApplicationContext"><a href="#2-报错java-lang-IllegalStateException-Failed-to-load-ApplicationContext" class="headerlink" title="2.报错java.lang.IllegalStateException: Failed to load ApplicationContext"></a>2.报错java.lang.IllegalStateException: Failed to load ApplicationContext</h2><p>主要报错信息：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">java.lang.IllegalStateException: Failed to load ApplicationContext<br><br>Error creating bean with name &#x27;requestMappingHandlerAdapter&#x27; defined in class path resource <br><br>Caused by: java.lang.NoClassDefFoundError: net/minidev/json/writer/JsonReaderI<br></code></pre></td></tr></table></figure><p>解决方法：</p><p>​    添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在进行单元测试时提示缺少对应的依赖，加上后解决--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.minidev<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>asm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.minidev<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json-smart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot映射本地文件为可访问地址，报404</title>
    <link href="/2022/12/21/springboot%E6%98%A0%E5%B0%84%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%BA%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%8A%A5404/"/>
    <url>/2022/12/21/springboot%E6%98%A0%E5%B0%84%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%BA%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%8A%A5404/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot映射本地文件为可访问地址，报404（docker文件映射问题）"><a href="#springboot映射本地文件为可访问地址，报404（docker文件映射问题）" class="headerlink" title="springboot映射本地文件为可访问地址，报404（docker文件映射问题）"></a>springboot映射本地文件为可访问地址，报404（docker文件映射问题）</h1><p>springboot将本地图片映射为一个可访问的路径，本地运行没问题，放到linux服务器上之后路径报404</p><p>原因：经排查后发现原因在于jar包是利用docker进行部署的，而docker容器本身自带的环境与linux的环境不同，导致读取到的路径为容器本身环境中的路径。最后报了404错误</p><p>解决方法：</p><p>​    1.不用docker进行部署，直接在服务器中利用java -jar 命令启动jar包</p><p>​    2.对docker容器的路径进行映射，映射到服务器实际的路径中</p>]]></content>
    
    
    <categories>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis缓存</title>
    <link href="/2022/10/20/Redis%E7%BC%93%E5%AD%98/Redis%E7%BC%93%E5%AD%98/"/>
    <url>/2022/10/20/Redis%E7%BC%93%E5%AD%98/Redis%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h1><h2 id="1-缓存更新策略"><a href="#1-缓存更新策略" class="headerlink" title="1.缓存更新策略"></a>1.缓存更新策略</h2><p>​    </p><table><thead><tr><th></th><th>内存淘汰</th><th>超市剔除</th><th>主动更新</th></tr></thead><tbody><tr><td>说明</td><td>不同自己维护，利用redis的内部淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。</td><td>给缓存数据添加TTL时间，到期后自动删除缓存。下次查询时更新缓存。</td><td>编写业务逻辑，在修改数据库的同时，更新缓存。</td></tr><tr><td>一致性</td><td>差</td><td>一般</td><td>好</td></tr><tr><td>维护成本</td><td>无</td><td>低</td><td>高</td></tr></tbody></table><p>业务场景;</p><ul><li><p>低一致性需求：使用内存淘汰机制。</p></li><li><p>高一致性需求：主动更新，并以超市剔除作为兜底方案。</p><p>读操作：</p><ul><li>缓存命中则直接返回</li><li>缓存未命中则擦护心数据库，并写入缓存</li></ul><p>写操作</p><ul><li>先写入数据库，然后再删除缓存</li><li>要确保数据库与缓存操作的原子性</li></ul></li></ul><p><strong>操作缓存和数据库时需要考虑的问题：</strong></p><ol><li><p>删除缓存还是更新缓存？</p><ul><li><p>更新缓存：每次更新数据库都要更新缓存，无效写操作较多。（×）</p></li><li><p>删除缓存：更新数据库时让缓存失效，查询时再更新缓存（√）    </p></li></ul></li><li><p>如何保证混村与数据库的操作同时成功或失败？</p><ul><li>单体系统：将缓存与与数据库操作放在同一个事务中</li><li>分布式系统：利用TCC等分布式事务方案</li></ul></li><li><p>先操作缓存还是先操作数据库？</p><ul><li><p>先删除缓存，再操作数据库</p></li><li><p>先操作数据库，再删除缓存（√）</p><p>这两种方式在多线程情况下都有可能会导致缓存与数据库中数据不一致的问题出现。但是由于操作数据库一般操作缓存更费时间，所以一般先<strong>先操作数据库，再删除缓存</strong>，这样可以使出现不一致情况的概率降低。</p></li></ul></li></ol><h2 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="2.缓存穿透"></a>2.缓存穿透</h2><p><strong>缓存穿透</strong>是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p><p>常见的解决方案有两种：</p><ul><li>缓存空对象<ul><li>优点：实现简单，维护方便</li><li>缺点：额外的内存消耗；可能造成短期的不一致</li></ul></li><li>布隆过滤<ul><li>优点：内存占用较少，没有多余key</li><li>缺点：实现复杂；存在误判可能</li></ul></li></ul><h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3.缓存雪崩"></a>3.缓存雪崩</h2><p><strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>解决方案：</p><ul><li>给不同的key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h2 id="4-缓存击穿"><a href="#4-缓存击穿" class="headerlink" title="4.缓存击穿"></a>4.缓存击穿</h2><p><strong>缓存击穿</strong>也叫热点key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求会在瞬间给数据库带来巨大的冲击。</p><p>常见的解决方案有两种：</p><table><thead><tr><th>解决方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>互斥锁</td><td>没有额外内存消耗；保存一致性;实现简单</td><td>线程需要等待，性能受影响</td></tr><tr><td>逻辑过期</td><td>线程无需等待，性能较好</td><td>不保证一致性；有额外内存消耗；实现复杂</td></tr></tbody></table><p><strong>互斥锁示意图：</strong></p><img src="/2022/10/20/Redis%E7%BC%93%E5%AD%98/Redis%E7%BC%93%E5%AD%98/huchisuo.png" alt="互斥锁 2022-10-21 154606" style="zoom:50%;"><p>逻辑过期示意图：</p><img src="/2022/10/20/Redis%E7%BC%93%E5%AD%98/Redis%E7%BC%93%E5%AD%98/luojiguoqi.png" alt="image-20221021154748234" style="zoom:50%;"><h2 id="5-缓存工具封装"><a href="#5-缓存工具封装" class="headerlink" title="5.缓存工具封装"></a>5.缓存工具封装</h2><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：</p><ol><li>方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</li><li>方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理花缓存击穿问题。</li><li>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方法解决缓存穿透问题</li><li>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheClient</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入redis键值对（设置TTL过期时间）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time TTL过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间单位</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit timeUnit)</span></span>&#123;<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value),time,timeUnit);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入redis键值对（设置逻辑过期时间）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 逻辑过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间单位</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWithLogicExpire</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit timeUnit)</span></span>&#123;<br>        <span class="hljs-comment">//设置逻辑过期</span><br>        RedisData redisData = <span class="hljs-keyword">new</span> RedisData();<br>        redisData.setData(value);<br>        redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(time)));<br>        <span class="hljs-comment">//写入redis</span><br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询键值对信息并设置空值解决缓存击穿问题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPrefix key的前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 要查询的数据的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 存入redis中的对象的class类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dbFallback</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time TTL过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间单位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;R&gt; 返回值类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;ID&gt; 要查询的数据的id的类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R,ID&gt; <span class="hljs-function">R <span class="hljs-title">queryWithPassThrough</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallback, Long time, TimeUnit timeUnit)</span></span>&#123;<br>        String key = keyPrefix + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        String json = stringRedisTemplate.opsForValue().get(key);<br>        Shop shop = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(json)) &#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(json, type);<br>        &#125;<br>        <span class="hljs-comment">//判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;&quot;</span>.equals(json))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//不存在，根据id去数据库查询</span><br>        R r = dbFallback.apply(id);<br><br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//将空值写入redis</span><br>            stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>, RedisConstants.CACHE_NULL_TTL, TimeUnit.MINUTES );<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//6.存在，写入redis缓存</span><br>        <span class="hljs-keyword">this</span>.set(key,r,time,timeUnit);<br><br><br><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询键值对信息并设置逻辑过期时间解决缓存击穿问题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPrefix key的前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 要查询的数据的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 存入redis中的对象的class类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dbFallback</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time TTL过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeUnit 时间单位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;R&gt; 返回值类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;ID&gt; 要查询的数据的id的类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R,ID&gt; <span class="hljs-function">R <span class="hljs-title">queryWithLogicExpire</span><span class="hljs-params">(String keyPrefix,ID id,Class&lt;R&gt; type,Function&lt;ID,R&gt; dbFallback, Long time, TimeUnit timeUnit)</span></span>&#123;<br>        String key = keyPrefix + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        String json = stringRedisTemplate.opsForValue().get(key);<br><br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(json)) &#123;<br>            <span class="hljs-comment">//3.不存在，直接返回</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br><br>        <span class="hljs-comment">//4.存在,需要先把json反序列化为对象</span><br>        RedisData redisData = JSONUtil.toBean(json, RedisData.class);<br>        R r = JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>        <span class="hljs-comment">//5.判断是否过期</span><br>        LocalDateTime expireTime = redisData.getExpireTime();<br>        <span class="hljs-keyword">if</span> (expireTime.isAfter(LocalDateTime.now()))&#123;<br>            <span class="hljs-comment">//5.1未过期，直接返回店铺信息</span><br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br><br>        <span class="hljs-comment">//5.2已过期，需要缓存重建</span><br>        <span class="hljs-comment">//6.缓存重建</span><br>        <span class="hljs-comment">//6.1获取互斥锁</span><br>        String lockKey = RedisConstants.LOCK_SHOP_KEY + id;<br>        <span class="hljs-keyword">boolean</span> isLock = tryLock(lockKey);<br>        <span class="hljs-comment">//6.2判断是否获取锁成功</span><br>        <span class="hljs-keyword">if</span> (isLock)&#123;<br>            <span class="hljs-comment">//6.3成功，开启独立线程实现缓存重建</span><br>            CACHE_REBUILD_EXECUTOR.submit(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-comment">//查询数据库</span><br>                    R r1 = dbFallback.apply(id);<br>                    <span class="hljs-keyword">this</span>.setWithLogicExpire(key,r1,time,timeUnit);<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException();<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">//释放锁</span><br>                    unLock(lockKey);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">//6.4返回过期的商铺信息</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 锁对应的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 获取锁成功 false 获取锁失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryLock</span><span class="hljs-params">(String key)</span></span>&#123;<br>        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 锁对应的key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unLock</span><span class="hljs-params">(String key)</span></span>&#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Stream详解</title>
    <link href="/2022/09/01/Java%20Stream%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/09/01/Java%20Stream%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-Stream详解"><a href="#Java-Stream详解" class="headerlink" title="Java Stream详解"></a>Java Stream详解</h1><h2 id="一-什么是流"><a href="#一-什么是流" class="headerlink" title="一.什么是流"></a>一.什么是流</h2><p>流是从支持数据处理操作的源生成的元素序列，源可以是数组、文件、集合、函数。流不是集合元素，它不是数据结构并不保存数据，它的主要目的在于计算。</p><h2 id="二-生成流的常用方式"><a href="#二-生成流的常用方式" class="headerlink" title="二.生成流的常用方式"></a>二.生成流的常用方式</h2><h3 id="1-通过集合创建"><a href="#1-通过集合创建" class="headerlink" title="1. 通过集合创建"></a>1. 通过集合创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个集合</span><br>List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>));<br><span class="hljs-comment">//得到一个顺序流</span><br>Stream&lt;User&gt; stream = list.stream();<br><span class="hljs-comment">//得到一个并行了流</span><br>Stream&lt;User&gt; stream2 = list.parallelStream();<br></code></pre></td></tr></table></figure><h3 id="2-通过数组"><a href="#2-通过数组" class="headerlink" title="2.通过数组"></a>2.通过数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先创建一个数组</span><br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><span class="hljs-comment">//使用数组Arrays工具类获取Stream流</span><br>IntStream stream = Arrays.stream(arr);<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>通过Arrays.stream()方法生成流，并且该方法生成的流是数值流【即IntStream】而不是 Stream。补充一点使用数值流可以避免计算过程中拆箱装箱，提高性能</p><p>Stream API提供了mapToInt、mapToDouble、mapToLong三种方式将对象流【即Stream 】转换成对应的数值流，同时提供了boxed方法将数值流转换为对象流.</p><h3 id="3-通过Stream-of-方法"><a href="#3-通过Stream-of-方法" class="headerlink" title="3.通过Stream.of()方法"></a>3.通过Stream.of()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Stream&lt;Integer&gt; stream = Stream.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h3 id="4-通过Stream-iterate-和Stream-generate"><a href="#4-通过Stream-iterate-和Stream-generate" class="headerlink" title="4.通过Stream.iterate()和Stream.generate()"></a>4.通过Stream.iterate()和Stream.generate()</h3><p>iterate方法接受两个参数，第一个为初始化值，第二个为进行的函数操作，因为iterator生成的流为无限流，通过limit方法对流进行了截断，只生成10个偶数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建了10个元素从0到18</span><br>Stream&lt;Integer&gt; s =  Stream.iterate(<span class="hljs-number">0</span>, t -&gt; t + <span class="hljs-number">2</span>).limit(<span class="hljs-number">10</span>);<br>        <br></code></pre></td></tr></table></figure><p>generate方法接受一个参数，方法参数类型为Supplier ，由它为流提供值。generate生成的流也是无限流，因此通过limit对流进行了截断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建了10个随机数</span><br>Stream&lt;Double&gt; s2 =  Stream.generate(Math::random).limit(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><h2 id="三-流程"><a href="#三-流程" class="headerlink" title="三.流程"></a>三.流程</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-number">1</span>）第一步：把集合转换为流<span class="hljs-keyword">stream</span><br><span class="hljs-number">2</span>）第二步：操作<span class="hljs-keyword">stream</span>流<br><span class="hljs-keyword">stream</span>流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h2 id="四-操作符"><a href="#四-操作符" class="headerlink" title="四.操作符"></a>四.操作符</h2><h3 id="1-中间操作符"><a href="#1-中间操作符" class="headerlink" title="1.中间操作符"></a>1.中间操作符</h3><h4 id="（1-filter"><a href="#（1-filter" class="headerlink" title="（1) filter"></a>（1) filter</h4><p>​    功能：通过设置的条件过滤出符合条件的元素</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>List&lt;String&gt; result = strings.stream()<br>    .filter(str -&gt; str.contains(<span class="hljs-string">&quot;ab&quot;</span>))<br>    .collect(Collectors.toList());<br>result.stream().forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果: abc abd</span><br></code></pre></td></tr></table></figure><h4 id="（2-distinct"><a href="#（2-distinct" class="headerlink" title="（2) distinct"></a>（2) distinct</h4><p>​    功能：返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流,可以理解为去重</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>List&lt;String&gt; result = strings.stream()<br>    .distinct()<br>    .collect(Collectors.toList());<br><br>result.stream().forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果: abc abd b ef ghq</span><br></code></pre></td></tr></table></figure><h4 id="（3-limit"><a href="#（3-limit" class="headerlink" title="（3) limit"></a>（3) limit</h4><p>​    功能：返回一个长度为n的流。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>List&lt;String&gt; result = strings.stream()<br>    .limit(<span class="hljs-number">3</span>)<br>    .collect(Collectors.toList());<br><br>result.stream().forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果: abc abd b</span><br></code></pre></td></tr></table></figure><h4 id="（4-skip"><a href="#（4-skip" class="headerlink" title="（4) skip"></a>（4) skip</h4><p>​    功能：返回一个删除前n个元素的流。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>List&lt;String&gt; result = strings.stream()<br>    .skip(<span class="hljs-number">3</span>)<br>    .collect(Collectors.toList());<br><br>result.stream().forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果: ef ghq ef ghq</span><br></code></pre></td></tr></table></figure><h4 id="（5-map"><a href="#（5-map" class="headerlink" title="（5) map"></a>（5) map</h4><p>​    功能：接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>List&lt;String&gt; result = strings.stream()<br>    .map(str -&gt; str.concat(<span class="hljs-string">&quot;_Ego&quot;</span>))<br>    .collect(Collectors.toList());<br><br>result.stream().forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果: abc_Ego abd_Ego b_Ego ef_Ego ghq_Ego ef_Ego ghq_Ego</span><br></code></pre></td></tr></table></figure><h4 id="（6-flatMap"><a href="#（6-flatMap" class="headerlink" title="（6) flatMap"></a>（6) flatMap</h4><p>​    功能：使用flatMap方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用map(Arrays::stream)时生成的单个流都被合并起来，即扁平化为一个流。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//strings中的每一个字符串都会经getStrStream()转换为对应的流，flatMap会将所有的这些流合并成一个单个的流，最后再由终止操作符输出为一个集合    </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>    List&lt;Character&gt; result = strings.stream()<br>        .flatMap(str -&gt; getStrStream(str))             <br>        .collect(Collectors.toList());<br><br>    result.stream().forEach(System.out::println);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 将字符串转换为对应的Stream</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> str 待转换的字符串</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Stream&lt;Character&gt; <span class="hljs-title">getStrStream</span><span class="hljs-params">(String str)</span></span>&#123;<br>    List&lt;Character&gt; characterList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>        characterList.add(str.charAt(i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> characterList.stream();<br>&#125;<br><br><span class="hljs-comment">//输出结果: a b c a b d b e f g h q e f g h q</span><br><br></code></pre></td></tr></table></figure><h4 id="（7-sorted"><a href="#（7-sorted" class="headerlink" title="（7) sorted"></a>（7) sorted</h4><p>​    功能：返回排序后的流</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*示例1</span><br><span class="hljs-comment">*/</span><br>List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>List&lt;String&gt; result = strings.stream()<br>    .sorted()           <br>    .collect(Collectors.toList());<br><br>result.stream().forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果abc abd b ef ef ghq ghq</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*示例2,根据对象的属性值进行比较</span><br><span class="hljs-comment">*/</span><br>List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>userList.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;女&quot;</span>));<br>List&lt;User&gt; result = userList.stream()<br>    .sorted(Comparator.comparing(User::getAge))<br>    .collect(Collectors.toList());<br><br>result.stream().forEach(System.out::println);<br><span class="hljs-comment">/*输出结果:</span><br><span class="hljs-comment">*User&#123;name=&#x27;李四&#x27;, sex=&#x27;男&#x27;, age=18&#125;</span><br><span class="hljs-comment">*User&#123;name=&#x27;张三&#x27;, sex=&#x27;男&#x27;, age=19&#125;</span><br><span class="hljs-comment">*User&#123;name=&#x27;王五&#x27;, sex=&#x27;女&#x27;, age=20&#125;</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="2-终止操作符"><a href="#2-终止操作符" class="headerlink" title="2.终止操作符"></a>2.<strong>终止操作符</strong></h3><h4 id="（1-anyMatch"><a href="#（1-anyMatch" class="headerlink" title="（1) anyMatch"></a>（1) anyMatch</h4><p>​    功能：检查是否至少匹配一个元素，若为真返回<strong>true</strong>，反之返回<strong>false</strong></p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br><span class="hljs-keyword">boolean</span> result = strings.stream()<br>    .anyMatch(str -&gt; str.contains(<span class="hljs-string">&quot;gh&quot;</span>));<br><br>System.out.println(result);<br><br><span class="hljs-comment">//输出结果:true</span><br></code></pre></td></tr></table></figure><h4 id="（2-allMatch"><a href="#（2-allMatch" class="headerlink" title="（2) allMatch"></a>（2) allMatch</h4><p>​    功能：检查是否匹配所有元素，若为真返回<strong>true</strong>，反之返回<strong>false</strong></p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br><span class="hljs-keyword">boolean</span> result = strings.stream()<br>    .allMatch(str -&gt; str.contains(<span class="hljs-string">&quot;gh&quot;</span>));<br><br>System.out.println(result);<br><br><span class="hljs-comment">//输出结果:false</span><br></code></pre></td></tr></table></figure><h4 id="（3-noneMatch"><a href="#（3-noneMatch" class="headerlink" title="（3) noneMatch"></a>（3) noneMatch</h4><p>​    功能：检查是否没有元素匹配，若为真返回<strong>true</strong>，反之返回<strong>false</strong></p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br><span class="hljs-keyword">boolean</span> result = strings.stream()<br>    .noneMatch(str -&gt; str.contains(<span class="hljs-string">&quot;gh&quot;</span>));<br><br>System.out.println(result);<br><br><span class="hljs-comment">//输出结果:false</span><br></code></pre></td></tr></table></figure><h4 id="（4-findAny"><a href="#（4-findAny" class="headerlink" title="（4) findAny"></a>（4) findAny</h4><p>​    功能：返回当前流中的任意一个元素。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br>Optional&lt;String&gt; result = strings.stream()<br>    .findAny();<br><span class="hljs-keyword">if</span>(result.isPresent())<br>    System.out.println(result);<br><br><span class="hljs-comment">//输出结果:Optional[ghq]</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>在普通的流中，findAny并不会随机输出，而是按照顺序输出，因为该流是有顺序的串行流，按照最优执行会按照顺序，如果要随机选择，需要改成并行流。<strong>另外：<code>findAny</code>不是为了随机而随机，而是为了进行最快速的选择，所以最好不要用在随机选择的场景。</strong></p><h4 id="（5-findFirst"><a href="#（5-findFirst" class="headerlink" title="（5) findFirst"></a>（5) findFirst</h4><p>​    功能：返回当前流中的第一个元素。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br>Optional&lt;String&gt; result = strings.stream()<br>    .findFirst();<br><span class="hljs-keyword">if</span>(result.isPresent())<br>    System.out.println(result);<br><br><span class="hljs-comment">//输出结果:Optional[abc]</span><br></code></pre></td></tr></table></figure><h4 id="（6-forEach"><a href="#（6-forEach" class="headerlink" title="（6) forEach"></a>（6) forEach</h4><p>​    功能：遍历流中的元素。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br>strings.stream()<br>    .forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果: abc abd b ef ghq ef ghq</span><br></code></pre></td></tr></table></figure><h4 id="（7-collect"><a href="#（7-collect" class="headerlink" title="（7) collect"></a>（7) collect</h4><p>​    功能：将流转换为其它形式（如list，map，set）。</p><p>​    <strong>示例1,转为list</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*示例1：转为list</span><br><span class="hljs-comment">*/</span><br>List&lt;String&gt; result = strings.stream()<br>    .map(str -&gt; str.concat(<span class="hljs-string">&quot;_Ego&quot;</span>))<br>    .collect(Collectors.toList());<br><br>result.stream().forEach(System.out::println);<br><br><span class="hljs-comment">//输出结果: abc_Ego abd_Ego b_Ego ef_Ego ghq_Ego ef_Ego ghq_Ego</span><br></code></pre></td></tr></table></figure><p><strong>示例2，转为map</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*示例2：转为map</span><br><span class="hljs-comment">*/</span><br> List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br>      <br><span class="hljs-comment">//(key1, key2) -&gt; key2此种情况下，当k重复时，选取后一个键值</span><br>Map&lt;String, String&gt; result = strings.stream()<br>    .collect(Collectors.toMap(str -&gt; str.concat(<span class="hljs-string">&quot;_k&quot;</span>), str -&gt; str.concat(<span class="hljs-string">&quot;_v&quot;</span>), (key1, key2) -&gt; key2));<br><br><span class="hljs-keyword">for</span> (String key: result.keySet()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + key +<span class="hljs-string">&quot;   value: &quot;</span>+ result.get(key));<br>&#125;<br><span class="hljs-comment">/*输出结果：</span><br><span class="hljs-comment">key: ghq_k   value: ghq_v</span><br><span class="hljs-comment">key: ef_k   value: ef_v</span><br><span class="hljs-comment">key: abc_k   value: abc_v</span><br><span class="hljs-comment">key: abd_k   value: abd_v</span><br><span class="hljs-comment">key: b_k   value: b_v</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>示例3，自定义一个Map来接收，不使用Collectors.toMap()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果对转换后的顺序有要求，这里还可以使用LinkedHashMap</span><br>HashMap&lt;String, String&gt; result = strings.stream()<br>                .collect(HashMap::<span class="hljs-keyword">new</span>, (map, str) -&gt; map.put(str + <span class="hljs-string">&quot;_k&quot;</span>, str + <span class="hljs-string">&quot;_v&quot;</span>), HashMap::putAll);<br><span class="hljs-keyword">for</span> (String key: result.keySet()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + key +<span class="hljs-string">&quot;   value: &quot;</span>+ result.get(key));<br>&#125;<br><span class="hljs-comment">/*输出结果： </span><br><span class="hljs-comment">key: ghq_k   value: ghq_v</span><br><span class="hljs-comment">key: ef_k   value: ef_v</span><br><span class="hljs-comment">key: abc_k   value: abc_v</span><br><span class="hljs-comment">key: abd_k   value: abd_v</span><br><span class="hljs-comment">key: b_k   value: b_v</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>示例4，转为set：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br>Set&lt;String&gt; result = strings.stream()<br>    .collect(Collectors.toSet());<br><br>result.stream().forEach(System.out::println);<br><span class="hljs-comment">//输出结果：ef ghq abd b abc</span><br></code></pre></td></tr></table></figure><h4 id="（8-count"><a href="#（8-count" class="headerlink" title="（8) count"></a>（8) count</h4><p>​    功能：返回流中元素总个数。</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br><span class="hljs-keyword">long</span> count = strings.stream().count();<br><br>System.out.println(count);<br><br><span class="hljs-comment">//输出结果:7</span><br></code></pre></td></tr></table></figure><h4 id="（9-reduce"><a href="#（9-reduce" class="headerlink" title="（9) reduce"></a>（9) reduce</h4><p>​    功能：可以将流中元素反复结合起来，得到一个新的值。</p><p>​    <strong>示例1，不指定第一次执行时相加的元素：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br><span class="hljs-comment">//reduce方法接受两个参数，acc参数为表达式执行结果的缓存，也就是说说表达式这一次的执行结果会被作为下一次执行的参数，第二个参数item是stream中的每个元素</span><br>Optional&lt;String&gt; result = strings.stream()<br>    .reduce((acc, item) -&gt; acc + item);<br><br><span class="hljs-keyword">if</span>(result.isPresent())<br>    System.out.println(result);<br><br><span class="hljs-comment">//输出结果: Optional[abcabdbefghqefghq]</span><br></code></pre></td></tr></table></figure><p><strong>示例2，指定第一次执行时相加的元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><span class="hljs-comment">//与前一种方法的区别是，首次执行时表达式中的acc参数为指定的&quot;1&quot;</span><br>String result = strings.stream()<br>    .reduce(<span class="hljs-string">&quot;1&quot;</span>, (acc, item) -&gt; acc + item);<br><br>System.out.println(result);<br><span class="hljs-comment">//输出结果： 1abcabdbefghqefghq</span><br></code></pre></td></tr></table></figure><p>另外，我们会注意到第一种方法返回的结果由Optional进行了包装，而第二种方法没有，这是因为存在Stream为空的情况，若Stream流中的对象为Integer类型，如果不进行包装就直接返回，由于Integer类型允许为null，所以无法判断究竟是值本来就为空还是Stream为空，所以需要Optional进行包装。而第二种方法由于指定了初始值，所以不会出现返回结果为空的情况，当Stream为空时，reduce将直接返回初始值。</p><p><strong>示例3,将计算结果转为一个新的类型</strong></p><p>由于前两种实现有一个缺陷，即计算结果必须与Stream中的元素类型相同，如上面的代码示例，Stream中的元素为String类型，那么计算结果也必须为String，这导致了灵活性的不足。下面的方法不讲将计算结果与Stream中 的元素类型绑死，大大提升了灵活性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br>StringBuffer result = strings.stream()<br>    .reduce(<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;Ego_&quot;</span>), (acc, item) -&gt; <span class="hljs-keyword">new</span> StringBuffer(acc + item), (acc, item) -&gt; <span class="hljs-keyword">null</span>);<br><br>System.out.println(result);<br><span class="hljs-comment">//输出结果：Ego_abcabdbefghqefghq</span><br></code></pre></td></tr></table></figure><p>第三个参数是用来处理多线程中每个线程结果如何合并的问题，举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br>StringBuffer result = strings.stream().parallel()<br>    .reduce(<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;Ego_&quot;</span>), (acc, item) -&gt; <span class="hljs-keyword">new</span> StringBuffer(acc + item), (acc, item) -&gt; <span class="hljs-keyword">new</span> StringBuffer(acc.append(item)));<br><br>System.out.println(result);<br><span class="hljs-comment">//输出结果： Ego_abcEgo_abdEgo_bEgo_efEgo_ghqEgo_efEgo_ghq</span><br></code></pre></td></tr></table></figure><p>问题是，Ego_这个初始字符串被相加了7次，推想一下，使用并行流进行计算时，开启了7个线程进行计算</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">Thread-1: Ego_ + abc = Ego_abc<br>Thread-2: Ego_ + abd = Ego_abd<br>Thread-3: Ego_ + b = Ego_b<br>Thread-4: Ego_ + ef = Ego_ef<br>Thread-5: Ego_ + ghq = Ego_ghq<br>Thread-6: Ego_ + ef = Ego_ef<br>Thread-7: Ego_ + ghq = Ego_ghq<br><br>最后将总结果进相加，即获取到：Ego_abcEgo_abdEgo_bEgo_efEgo_ghqEgo_efEgo_ghq<br></code></pre></td></tr></table></figure><p>Ego_这个初始字符串被重复计算了多次，这是值得注意的地方，要解决这个问题只需在两个元素相加之后的结果中去除初始元素即可,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abd&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>,<span class="hljs-string">&quot;ef&quot;</span>,<span class="hljs-string">&quot;ghq&quot;</span>);<br><br>StringBuffer result = strings.stream().parallel()<br>    .reduce(<span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;Ego_&quot;</span>), (acc, item) -&gt; <span class="hljs-keyword">new</span> StringBuffer((acc + item).substring(<span class="hljs-number">4</span>,(acc + item).length())), (acc, item) -&gt; <span class="hljs-keyword">new</span> StringBuffer(acc.append(item)));<br><br>System.out.println(result);<br><span class="hljs-comment">//输出结果：abcabdbefghqefghq</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>JavaStream</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaStream</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于vue动态路由跳转白屏的问题</title>
    <link href="/2022/08/30/%E5%85%B3%E4%BA%8Evue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E7%99%BD%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/30/%E5%85%B3%E4%BA%8Evue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E7%99%BD%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="关于vue动态路由跳转白屏的问题"><a href="#关于vue动态路由跳转白屏的问题" class="headerlink" title="关于vue动态路由跳转白屏的问题"></a>关于vue动态路由跳转白屏的问题</h1><h2 id="问题1：页面登录后正常，刷新页面白屏"><a href="#问题1：页面登录后正常，刷新页面白屏" class="headerlink" title="问题1：页面登录后正常，刷新页面白屏"></a>问题1：页面登录后正常，刷新页面白屏</h2><p>原因：页面中使用的是动态路由，存储在vuex中，刷新页面后vuex中的数据会被清空，所以无法找到之前添加的动态路由。</p><p>解决：1.将动态路由数据存入sessionStorage中，刷新页面时重新获取</p><p>​            2.刷新页面时重新请求动态路由数据</p><h2 id="问题2：登出后再登录，然后自动跳转回登出前的页面，此时会出现白屏"><a href="#问题2：登出后再登录，然后自动跳转回登出前的页面，此时会出现白屏" class="headerlink" title="问题2：登出后再登录，然后自动跳转回登出前的页面，此时会出现白屏"></a>问题2：登出后再登录，然后自动跳转回登出前的页面，此时会出现白屏</h2><p>原因：这是因为刚刚<code>addRoutes()</code>就立刻访问被添加的路由，然而此时<code>addRoutes()</code>没有执行结束，因而找不到刚刚被添加的路由导致白屏。</p><p>以上两个问题的解决方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">router.beforeEach(<span class="hljs-keyword">async</span>(to, <span class="hljs-keyword">from</span>, next) =&gt; &#123;<br>  <span class="hljs-comment">// start progress bar</span><br>  NProgress.start()<br><br>  <span class="hljs-comment">// set page title</span><br>  <span class="hljs-built_in">document</span>.title = getPageTitle(to.meta.title)<br><br>  <span class="hljs-comment">// determine whether the user has logged in</span><br>  <span class="hljs-keyword">const</span> hasToken = getToken()<br><br>  <span class="hljs-keyword">if</span> (hasToken) &#123;<span class="hljs-comment">//根据token判断是否登录</span><br>    <span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<span class="hljs-comment">//如果已经登录仍前往登录页，则跳转到主页</span><br>      <span class="hljs-comment">// if is logged in, redirect to the home page</span><br>      next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;)<br>      NProgress.done()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*主要操作*/</span><br>        <span class="hljs-keyword">if</span>(store.getters.resultAllRoutes.length == <span class="hljs-number">0</span>)&#123;  <span class="hljs-comment">//如果动态路由信息被清空，说明进行了刷新操作</span><br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)  <span class="hljs-comment">//重新添加动态路由信息（user/getInfo函数中进行了addRoutes()操作，添加了动态路由）</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">window</span>.sessionStorage.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>) !== <span class="hljs-literal">null</span>)<br>              <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/setUserInfo&#x27;</span>,<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">window</span>.sessionStorage.getItem(<span class="hljs-string">&#x27;userInfo&#x27;</span>)))  <span class="hljs-comment">//重新添加用户信息</span><br>            next(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)  <span class="hljs-comment">//等待路由添加完成后跳转</span><br>          &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-comment">// remove token and go to login page to re-login</span><br>            <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>)<br>            Message.error(error || <span class="hljs-string">&#x27;Has Error&#x27;</span>)<br>            next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>            NProgress.done()<br>          &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>          next();<br>        &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">/* has no token*/</span><br><br>    <span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// in the free login whitelist, go directly</span><br>      next()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// other pages that do not have permission to access are redirected to the login page.</span><br>      next(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>      NProgress.done()<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="关于next-next-…to-replace-true-的说明"><a href="#关于next-next-…to-replace-true-的说明" class="headerlink" title="关于next()/next({ …to, replace: true })的说明"></a>关于next()/next({ …to, replace: true })的说明</h2><p>平常项目中看到的next(‘/login’) 、 next(to) 或者 next({ …to, replace: true }) 这些都不是放行操作，而是：中断当前导航，执行新的导航，只有next()是放行。</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  next(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可能有同学会认为这个路由守卫会直接跳转到/login路由,但实际上，这个路由由于没有放行，将会陷入死循环。可以理解为下面的代码（由于next(‘/login’)不是放行，会中断当前导航，执行一次新的导航beforeEach((‘/login’, from, next)，但由于没有放行条件所以会一直循环下去）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//next(&#x27;/login&#x27;)</span><br><br>beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  beforeEach(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>   beforeEach(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    beforeEach(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    beforeEac...  <span class="hljs-comment">// 一直循环下去...... , 因为我们没有使用 next() 放行</span><br> &#125;<br>  &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**next({ …to, replace: true })**中的<code>replace: true</code>只是一个设置信息，告诉VUE本次操作后，不能通过浏览器后退按钮，返回前一个路由,避免用户在addRoutes()还未完成时进行回退操作。</p><p>其实next({ …to })的执行很简单，它会判断：</p><p>如果参数to不能找到对应的路由的话，就再执行一次beforeEach((to, from, next)直到其中的next({ …to})能找到对应的路由为止。</p><p>也就是说此时addRoutes()已经完成啦，找到对应的路由之后，接下来将执行前往对应路由的beforeEach((to, from, next) ，因此需要用代码来判断这一次是否就是前往对应路由的beforeEach((to, from, next)，如果是，就执行next()放行。</p><p>如果守卫中没有正确的放行出口的话，会一直next({ …to})进入死循环 !!!</p><p>因此你还需要确保在当addRoutes()已经完成时，所执行到的这一次beforeEach((to, from, next)中有一个正确的next()方向出口。<br>其实next({ …to })的执行很简单，它会判断：</p><p>如果参数to不能找到对应的路由的话，就再执行一次beforeEach((to, from, next)直到其中的next({ …to})能找到对应的路由为止。</p><p>也就是说此时addRoutes()已经完成啦，找到对应的路由之后，接下来将执行前往对应路由的beforeEach((to, from, next) ，因此需要用代码来判断这一次是否就是前往对应路由的beforeEach((to, from, next)，如果是，就执行next()放行。</p><p>如果守卫中没有正确的放行出口的话，会一直next({ …to})进入死循环 !!!</p><p>因此你还需要确保在当addRoutes()已经完成时，所执行到的这一次beforeEach((to, from, next)中有一个正确的next()方向出口。</p><p>参考文章原文链接：<a href="https://blog.csdn.net/qq_41912398/article/details/109231418">https://blog.csdn.net/qq_41912398/article/details/109231418</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态路由</tag>
      
      <tag>路由守卫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>队列与广度优先搜索</title>
    <link href="/2022/08/19/%E9%98%9F%E5%88%97%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/08/19/%E9%98%9F%E5%88%97%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="队列与广度优先搜索"><a href="#队列与广度优先搜索" class="headerlink" title="队列与广度优先搜索"></a>队列与广度优先搜索</h1><h2 id="岛屿问题"><a href="#岛屿问题" class="headerlink" title="岛屿问题"></a>岛屿问题</h2><h3 id="题目介绍："><a href="#题目介绍：" class="headerlink" title="题目介绍："></a>题目介绍：</h3><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog"> 输入：grid = [<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>]<br>]<br>输出：<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：grid = [<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>],<br>  [<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>]<br>]<br>输出：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a><strong>实现思路：</strong></h3><p>利用广度优先算法实现。首先遍历二维数组中的所有元素，当元素为1时，利用广度优先算法将与其连接（相邻的以及相邻的相邻也算）的所有1置为0，直至没有连接的1存在，此为一个岛屿。然后继续遍历，重复上述步骤，即可得出岛屿个数。</p><h3 id="简单流程："><a href="#简单流程：" class="headerlink" title="简单流程："></a>简单流程：</h3><p>第一轮过后，左上四个相连的1被置为0，岛屿数量+1，同理，算法一共将会进行3轮，最终所有1都会被置为0，岛屿数量最终输出为3</p><img src="/2022/08/19/%E9%98%9F%E5%88%97%E4%B8%8E%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/image-20220819173446180.png" class title="第一轮流程"><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a><strong>代码实现：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego.queue;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Ego</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/19 15:16</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给你一个由&#x27;1&#x27;（陆地）和 &#x27;0&#x27;（水）组成的的二维网格，请你计算网格中岛屿的数量。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 此外，你可以假设该网格的四条边均被水包围。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 示例：</span><br><span class="hljs-comment"> * 输入：grid = [</span><br><span class="hljs-comment"> *   [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="hljs-comment"> *   [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="hljs-comment"> *   [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="hljs-comment"> *   [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="hljs-comment"> * ]</span><br><span class="hljs-comment"> * 输出：3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IslandNum</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(grid == <span class="hljs-keyword">null</span> || grid.length == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; grid.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; grid[i].length;j++)&#123;<span class="hljs-comment">//遍历每个节点</span><br>                <span class="hljs-keyword">if</span>(grid[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    count++;<br>                    bfs(grid,i,j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span></span>&#123;<br>        Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><span class="hljs-comment">//        int m = grid.length;    //排数</span><br>        <span class="hljs-keyword">int</span> n = grid[<span class="hljs-number">0</span>].length;<span class="hljs-comment">//列数</span><br>        queue.add(i * n +j);    <span class="hljs-comment">//将横纵坐标合并为一个值，存入队列中</span><br>        grid[i][j] = <span class="hljs-string">&#x27;0&#x27;</span>;       <span class="hljs-comment">//将根元素置为0</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> node = queue.poll();    <span class="hljs-comment">//取出队首元素</span><br>            <span class="hljs-keyword">int</span> y = node % n;           <span class="hljs-comment">//转换坐标（列）</span><br>            <span class="hljs-keyword">int</span> x = node / n;            <span class="hljs-comment">//转换坐标（排）</span><br><br>            <span class="hljs-comment">//向队列中加入相邻元素</span><br>            <span class="hljs-keyword">if</span>(x-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[x-<span class="hljs-number">1</span>][y] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;   <span class="hljs-comment">//上</span><br>                grid[x-<span class="hljs-number">1</span>][y] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                queue.add((x-<span class="hljs-number">1</span>) * n +y);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(x+<span class="hljs-number">1</span> &lt; grid.length &amp;&amp; grid[x+<span class="hljs-number">1</span>][y] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;  <span class="hljs-comment">//下</span><br>                grid[x+<span class="hljs-number">1</span>][y] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                queue.add((x+<span class="hljs-number">1</span>) * n +y);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(y-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; grid[x][y-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;   <span class="hljs-comment">//左</span><br>                grid[x][y-<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                queue.add(x * n +y-<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(y+<span class="hljs-number">1</span> &lt; grid[x].length &amp;&amp; grid[x][y+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<span class="hljs-comment">//右</span><br>                grid[x][y+<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                queue.add(x * n +y+<span class="hljs-number">1</span>);<br>            &#125;<br><br>        &#125;<br><br><br>    &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[][] grid = &#123;<br>                &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>                &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>                &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>                &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>&#125;<br>        &#125;;<br>        <span class="hljs-keyword">int</span> result = numIslands(grid);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>队列</tag>
      
      <tag>广度优先算法BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次文件上传报错问题</title>
    <link href="/2022/05/23/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/23/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次文件上传报错问题"><a href="#记一次文件上传报错问题" class="headerlink" title="记一次文件上传报错问题"></a>记一次文件上传报错问题</h1><h2 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h2><p>后端在本地运行时，文件能够正常上传至移动云存储中，但是将程序部署到云服务器上后，再次执行文件上传操作报错。前端浏览器控制台请求返回504 Gateway Time-out，后端出现如下报错。</p><p>org.springframework.web.multipart.MultipartException: Failed to parse multipart servlet request; nested exception is java.io.IOException: </p><p>org.apache.tomcat.util.http.fileupload.impl.IOFileUploadException: Processing of multipart/form-data request failed. java.io.EOFException</p><h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><p>nginx访问出现504 Gateway Time-out，一般是由于程序执行时间过长导致响应超时，例如程序需要执行90秒，而nginx最大响应等待时间为30秒，这样就会出现超时。 </p><p>通常有以下几种情况导致</p><p>1.程序在处理大量数据，导致等待超时。<br>2.程序中调用外部请求，而外部请求响应超时。<br>3.连接数据库失败而没有停止，死循环重新连。</p><p>出现这种情况，我们可以先优化程序，缩短执行时间。另一方面，可以调大nginx超时限制的参数，使程序可以正常执行。</p><h2 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h2><p>这里选择调整nginx超时参数。</p><p>在nginx.conf配置文件的server模块下添加如下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx.conf">proxy_connect_timeout 600; #秒 <br>proxy_send_timeout 600; #秒 <br>proxy_read_timeout 600; #秒 <br>proxy_buffer_size 16k; <br>proxy_buffers 4 64k; <br>proxy_busy_buffers_size 128k; <br>proxy_temp_file_write_size 128k;<br></code></pre></td></tr></table></figure><p>检测语法有无错误</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nginx</span> -t<br></code></pre></td></tr></table></figure><p>无误后重启nginx服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nginx</span> -s reload<br></code></pre></td></tr></table></figure><p>重新执行上传文件操作，成功上传！</p>]]></content>
    
    
    <categories>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2022/03/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="一、目录操作"><a href="#一、目录操作" class="headerlink" title="一、目录操作"></a>一、目录操作</h2><h3 id="1-1切换目录"><a href="#1-1切换目录" class="headerlink" title="1.1切换目录"></a>1.1切换目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /        <span class="hljs-comment">#切换到根目录</span><br><span class="hljs-built_in">cd</span> /usr     <span class="hljs-comment">#切换到根目录下的usr目录</span><br><span class="hljs-built_in">cd</span> ../      <span class="hljs-comment">#切换到上一级目录 或者  cd ..</span><br><span class="hljs-built_in">cd</span> ~        <span class="hljs-comment">#切换到home目录</span><br><span class="hljs-built_in">cd</span> -        <span class="hljs-comment">#切换到上次访问的目录</span><br></code></pre></td></tr></table></figure><h3 id="1-2目录查看"><a href="#1-2目录查看" class="headerlink" title="1.2目录查看"></a>1.2目录查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ls              <span class="hljs-comment">#查看当前目录下的所有目录和文件</span><br>ls -a           <span class="hljs-comment">#查看当前目录下的所有目录和文件（包括隐藏的文件）</span><br>ls -l           <span class="hljs-comment">#列表查看当前目录下的所有目录和文件（列表查看，显示更多信息）或者 ll命令</span><br>ls /dir         <span class="hljs-comment">#查看指定目录下的所有目录和文件   如：ls /usr</span><br></code></pre></td></tr></table></figure><h3 id="1-3目录操作"><a href="#1-3目录操作" class="headerlink" title="1.3目录操作"></a>1.3目录操作</h3><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir    aaa            <span class="hljs-comment">#在当前目录下创建一个名为aaa的目录</span><br>mkdir    /usr/aaa    <span class="hljs-comment">#在指定目录下创建一个名为aaa的目录</span><br></code></pre></td></tr></table></figure><p>删除目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">rm 文件       <span class="hljs-comment">#删除当前目录下的文件</span><br>rm -f 文件    <span class="hljs-comment">#删除当前目录的的文件（不询问）</span><br><br>rm -r aaa     <span class="hljs-comment">#递归删除当前目录下的aaa目录</span><br>rm -rf aaa    <span class="hljs-comment">#递归删除当前目录下的aaa目录（不询问）</span><br><br>rm -rf *     <span class="hljs-comment">#将当前目录下的所有目录和文件全部删除</span><br>rm -rf /*    <span class="hljs-comment">#【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除</span><br></code></pre></td></tr></table></figure><p>移动目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv /dir1 /dir2<span class="hljs-comment">#如果目录dir2不存在，则将目录dir1改名为dir2；否则将dir1移动到dir2中</span><br></code></pre></td></tr></table></figure><p>搜索目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">find 目录 参数 文件名称<br>find /usr/tmp -name <span class="hljs-string">&#x27;a*&#x27;</span>    <span class="hljs-comment">#查找/usr/tmp目录下的所有以a开头的目录或文件</span><br></code></pre></td></tr></table></figure><h2 id="二、文件操作"><a href="#二、文件操作" class="headerlink" title="二、文件操作"></a>二、文件操作</h2><h3 id="MV命令"><a href="#MV命令" class="headerlink" title="MV命令"></a>MV命令</h3><p><strong>常用参数：</strong>    </p><p>-b ： 先备份在覆盖文件</p><p>-f  :  force（强制），目标文件已经存在，不询问直接覆盖</p><p>-i  ：  目标文件已经存在时，先询问是否覆盖</p><p>-u  ： 目标文件已经存在，且source比较新，才会更新update</p><p>-t  ： -target-directory=DIRECTORY move all SOURCE arguments into DIRECTOR</p><p><strong>移动文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv /tmp/test1.txt /tmp/n1<span class="hljs-comment">#将/tmp/test1.txt移动到/tmp/n1路径下</span><br>mv log1.txt log2.txt log3.txt test3<span class="hljs-comment">#移动多个文件</span><br></code></pre></td></tr></table></figure><p><strong>文件重命名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv test.txt  test1.txt<span class="hljs-comment">#此格式只是重命名，如test.txt文件中有内容，重命名之后不会影响内容，内容存在不被清空</span><br></code></pre></td></tr></table></figure><h3 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h3><p>rwx：r代表可读，w代表可写，x代表该文件是一个可执行文件，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。</p><p><strong>示例：给aaa.txt文件权限改为可执行文件权限，aaa.txt文件的权限是-rw——-</strong></p><p>第一位：-就代表是文件，d代表是文件夹<br>第一段（3位）：代表拥有者的权限<br>第二段（3位）：代表拥有者所在的组，组员的权限<br>第三段（最后3位）：代表的是其他用户的权限</p><p>  421  421  421<br>-  rw-  —   —</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chmod 100 aaa.txt<span class="hljs-comment">#修改权限为---x------</span><br></code></pre></td></tr></table></figure><h2 id="三、压缩文件操作"><a href="#三、压缩文件操作" class="headerlink" title="三、压缩文件操作"></a>三、压缩文件操作</h2><p>Windows的压缩文件的扩展名  .zip/.rar</p><p>linux中的打包文件：aa.tar    </p><p>linux中的压缩文件：bb.gz  </p><p>linux中打包并压缩的文件：.tar.gz</p><h3 id="打包并压缩文件"><a href="#打包并压缩文件" class="headerlink" title="打包并压缩文件"></a>打包并压缩文件</h3><p><strong>命令：tar -zcvf 打包压缩后的文件名 要打包的文件</strong><br>其中：</p><ul><li>-z：调用gzip压缩命令进行压缩</li><li>-c：打包文件</li><li>-v：显示运行过程</li><li>-f：指定文件名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zcvf ab.tar aa.txt bb.txt <span class="hljs-comment">#打包并压缩 aa.txt bb.txt</span><br>tar -zcvf ab.tar  * <span class="hljs-comment">#打包并压缩当前目录下的所有文件 </span><br></code></pre></td></tr></table></figure><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h3><p><strong>命令：tar -zxvf 压缩文件</strong>  </p><p>其中：x：代表解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf ab.tar<span class="hljs-comment">#将ab.tar解压到当前目录下</span><br>tar -zxvf ab.tar -C /usr <span class="hljs-comment">#-C指定解压的位置</span><br></code></pre></td></tr></table></figure><h2 id="四、查找命令"><a href="#四、查找命令" class="headerlink" title="四、查找命令"></a>四、查找命令</h2><h3 id="4-1-grep命令"><a href="#4-1-grep命令" class="headerlink" title="4.1 grep命令"></a>4.1 grep命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep [KEY]  查找指定关键字服务进程 <br>ps -ef | grep [KEY] | grep -v grep 查找指定服务进程，排除gerp身 <br></code></pre></td></tr></table></figure><h3 id="4-2-find命令"><a href="#4-2-find命令" class="headerlink" title="4.2 find命令"></a>4.2 find命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -name <span class="hljs-string">&quot;*.log&quot;</span> -ls  在当前目录查找以.<span class="hljs-built_in">log</span>结尾的文件，并显示详细信息。 <br>find /root/ -perm 600   查找/root/目录下权限为600的文件 <br>find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.log&quot;</span>  查找当目录，以.<span class="hljs-built_in">log</span>结尾的普通文件 <br>find . -<span class="hljs-built_in">type</span> d | sort   查找当前所有目录并排序 <br>find . -size +100M  查找当前目录大于100M的文件<br></code></pre></td></tr></table></figure><h3 id="4-3-locate命令"><a href="#4-3-locate命令" class="headerlink" title="4.3 locate命令"></a>4.3 locate命令</h3><p>locate 让使用者可以很快速的搜寻某个路径。默认每天自动更新一次，<strong>所以使用locate 命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令</strong>，手动更新数据库。如果数据库中没有查询的数据，则会报出locate: can not stat () `/var/lib/mlocate/mlocate.db’: No such file or directory该错误！updatedb即可！</p><p><strong>yum -y install mlocate</strong> 如果是精简版CentOS系统需要安装locate命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">updatedb<br>locate /etc/sh 搜索etc目录下所有以sh开头的文件 <br>locate <span class="hljs-built_in">pwd</span> 查找和<span class="hljs-built_in">pwd</span>相关的所有文件<br></code></pre></td></tr></table></figure><h3 id="4-4-whereis"><a href="#4-4-whereis" class="headerlink" title="4.4 whereis"></a>4.4 whereis</h3><p>whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">whereis ls    将和ls文件相关的文件都查找出来<br></code></pre></td></tr></table></figure><h3 id="4-5-which"><a href="#4-5-which" class="headerlink" title="4.5 which"></a>4.5 which</h3><p>which命令的作用是在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> <span class="hljs-built_in">pwd</span>  查找<span class="hljs-built_in">pwd</span>命令所在路径 <br><span class="hljs-built_in">which</span> java  查找path中java的路径 <br></code></pre></td></tr></table></figure><h2 id="五、防火墙相关命令"><a href="#五、防火墙相关命令" class="headerlink" title="五、防火墙相关命令"></a>五、防火墙相关命令</h2><h3 id="5-1防火墙"><a href="#5-1防火墙" class="headerlink" title="5.1防火墙"></a>5.1防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start firewalld    <span class="hljs-comment">#开启防火墙</span><br>systemctl <span class="hljs-built_in">enable</span> firewalld <span class="hljs-comment">#设置开机自启动防火墙</span><br>systemctl stop firewalld <span class="hljs-comment">#关闭防火墙</span><br>systemctl restart firewalld<span class="hljs-comment">#重启防火墙</span><br>systemctl status firewalld  <span class="hljs-comment">#查看防火墙状态</span><br></code></pre></td></tr></table></figure><h3 id="5-2端口"><a href="#5-2端口" class="headerlink" title="5.2端口"></a>5.2端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --list-all  <span class="hljs-comment">#查看防火墙开放端口等信息</span><br>firewall-cmd --list-ports<span class="hljs-comment">#查看防火墙开放端口</span><br>firewall-cmd --reload<span class="hljs-comment">#重新加载配置</span><br>firewall-cmd --zone=public --add-port=9200/tcp --permanent <span class="hljs-comment">#开启9200端口</span><br>firewall-cmd --zone=public --remove-port=9200/tcp --permanent<span class="hljs-comment">#关闭9200端口</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><p>–zone ：作用域</p><p>–add-port=9200/tcp ：添加端口，格式为：端口/通讯协议</p><p>–permanent ：永久生效，没有此参数重启后失效</p><p><strong>注意：添加端口后，必须用命令firewall-cmd –reload重新加载一遍才会生效</strong></p><h2 id="六、其他命令"><a href="#六、其他命令" class="headerlink" title="六、其他命令"></a>六、其他命令</h2><h3 id="6-1查看当前路径"><a href="#6-1查看当前路径" class="headerlink" title="6.1查看当前路径"></a>6.1查看当前路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><h3 id="6-2查看进程"><a href="#6-2查看进程" class="headerlink" title="6.2查看进程"></a>6.2查看进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef<span class="hljs-comment">#查看所有正在运行的进程</span><br>ps -ef | grep docker<span class="hljs-comment">#查看正在运行的与docker有关的进程</span><br>netstat -tunlp | grep 8080 <span class="hljs-comment">#查看占用8080的进程</span><br></code></pre></td></tr></table></figure><h3 id="6-3结束进程"><a href="#6-3结束进程" class="headerlink" title="6.3结束进程"></a>6.3结束进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> [pid]<span class="hljs-comment">#杀死进程，pid:进程号</span><br><span class="hljs-built_in">kill</span> -9 [pid]<span class="hljs-comment">#强制杀死进程 </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛奶装载项目部署文档</title>
    <link href="/2022/03/13/%E7%89%9B%E5%A5%B6%E8%A3%85%E8%BD%BD%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/"/>
    <url>/2022/03/13/%E7%89%9B%E5%A5%B6%E8%A3%85%E8%BD%BD%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="牛奶装载项目部署文档"><a href="#牛奶装载项目部署文档" class="headerlink" title="牛奶装载项目部署文档"></a>牛奶装载项目部署文档</h1><h2 id="一、Mysql环境部署"><a href="#一、Mysql环境部署" class="headerlink" title="一、Mysql环境部署"></a>一、Mysql环境部署</h2><p>1.docker拉取mysql镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><p>2.创建挂载文件所需目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /home/mysql<br>mkdir /home/mysql/conf.d<br>mkdir /home/mysql/data/<br></code></pre></td></tr></table></figure><p>3.创建my.cnf配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">touch /home/mysql/my.cnf<br></code></pre></td></tr></table></figure><p>my.cnf配置文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs my.cnf">[mysql]<br>default-character-set&#x3D;utf8<br><br>[mysqld]<br>collation-server &#x3D; utf8_unicode_ci<br>init-connect&#x3D;&#39;SET NAMES utf8&#39;<br>character-set-server &#x3D; utf8<br>sql_mode&#x3D;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION<br>lower_case_table_names&#x3D;1<br><br>[client]<br>default-character-set&#x3D;utf8<br><br></code></pre></td></tr></table></figure><p><strong>注意：mysql8.0以上版本取消了sql_mode属性中的NO_AUTO_CRATE_USER字段，用了Mysql启动会报错</strong></p><p>4.创建容器，挂载文件配置并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --restart=always --privileged=<span class="hljs-literal">true</span> -d <br>-v /home/mysql/data/:/var/lib/mysql <br>-v /home/mysql/conf.d:/etc/mysql/conf.d <br>-v /home/mysql/my.cnf:/etc/mysql/my.cnf <br>-p 3306:3306 --name my-mysql <br>-e MYSQL_ROOT_PASSWORD=123456 <br>mysql:5.7<br></code></pre></td></tr></table></figure><h2 id="二、Redis环境部署"><a href="#二、Redis环境部署" class="headerlink" title="二、Redis环境部署"></a>二、Redis环境部署</h2><p>1.docker拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br></code></pre></td></tr></table></figure><p>2.创建redis容器并运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 6379:6379 redis:latest<br></code></pre></td></tr></table></figure><h2 id="三、Vue前端部署"><a href="#三、Vue前端部署" class="headerlink" title="三、Vue前端部署"></a>三、Vue前端部署</h2><p>1.打包成镜像前的准备：</p><ul><li>准备好前端打包好的dist文件夹</li><li>准备Dockerfile文件</li><li>准备nginx.conf配置文件</li></ul><p><strong>Dockerfile文件内容</strong></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Docker"><span class="hljs-keyword">FROM</span> nginx<br><span class="hljs-comment"># 将本地文件添加到容器中</span><br><span class="hljs-comment"># 将dist文件中的内容复制到 /usr/local/nginx/html/ 这个目录下面，该路径是nginx容器生成的一个虚拟路径，你的项目会存在这里。</span><br><span class="hljs-keyword">COPY</span><span class="bash"> dist/  /usr/<span class="hljs-built_in">local</span>/nginx/html/</span><br><span class="hljs-keyword">COPY</span><span class="bash"> nginx.conf /etc/nginx/nginx.conf</span><br><span class="hljs-comment"># 构建镜像时执行的命令</span><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;echo init ok!!&#x27;</span></span><br></code></pre></td></tr></table></figure><p><strong>nginx.conf</strong>文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs nginx.conf"><br>#user  nobody;<br>worker_processes  1;<br><br>#error_log  logs&#x2F;error.log;<br>#error_log  logs&#x2F;error.log  notice;<br>#error_log  logs&#x2F;error.log  info;<br><br>#pid        logs&#x2F;nginx.pid;<br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       mime.types;<br>    default_type  application&#x2F;octet-stream;<br><br>    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;<br>    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;<br>    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;<br><br>    #access_log  logs&#x2F;access.log  main;<br><br>    sendfile        on;<br>    #tcp_nopush     on;<br><br>    #keepalive_timeout  0;<br>    keepalive_timeout  65;<br><br>    gzip  on; # 之前是 注释掉的<br>gzip_static on;#是否开启gzip静态资源 - 添加的<br><br># gzip config<br>    gzip_min_length 1k;<br>    gzip_comp_level 9;<br>    gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php image&#x2F;jpeg image&#x2F;gif image&#x2F;png;<br>    gzip_vary on;<br>    gzip_disable &quot;MSIE [1-6]\.&quot;;<br><br>server &#123;<br>listen       3000;<br>gzip  on; <br>gzip_static on;#是否开启gzip静态资源 - 添加的<br>server_name  124.223.63.154;<br><br><br>#后台服务配置，配置了这个location便可以通过http:&#x2F;&#x2F;域名&#x2F;jeecg-boot&#x2F;xxxx 访问<br>location ^~ &#x2F;milk_load &#123;<br>proxy_pass              http:&#x2F;&#x2F;124.223.63.154:8080&#x2F;milk_load&#x2F;;<br>proxy_set_header        Host 124.223.63.154;<br>proxy_set_header        X-Real-IP $remote_addr;<br>proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;<br>&#125;<br><br><br>#解决Router(mode: &#39;history&#39;)模式下，刷新路由地址不能找到页面的问题<br>location &#x2F; &#123;<br>root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html;<br>index  index.html index.htm;<br>if (!-e $request_filename) &#123;<br>rewrite ^(.*)$ &#x2F;index.html?s&#x3D;$1 last;<br>break;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面以我自己的目录为例，文件层级如下：</p><p>/usr/ego/milk_load/front</p><p>​    -dist</p><p>​    -Dockerfile</p><p>​    -nginx.conf</p><p>2.构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/ego/milk_load/front<br>docker build -t milk-load-front:1.0.0 .<br></code></pre></td></tr></table></figure><p>3.创建并运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --restart=always -p 3000:3000 --name=milk-load-front [CONTAINERID] <br></code></pre></td></tr></table></figure><h2 id="四、后端Springboot部署"><a href="#四、后端Springboot部署" class="headerlink" title="四、后端Springboot部署"></a>四、后端Springboot部署</h2><p>1.准备jar包。利用maven执行分别clean、compile、package命令后获取主程序入口的jar包文件</p><p>2.编写Dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span><br><span class="hljs-keyword">VOLUME</span><span class="bash"> /tmp</span><br><span class="hljs-keyword">ADD</span><span class="bash"> jeecg-boot-module-system-2.2.0.jar /milk-load.jar</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/milk-load.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>3.构建镜像（Dockerfile和jar包在同一级目录下）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入Dockfile文件所在目录下</span><br><span class="hljs-comment"># -f 指定 Dockerfile 文件的路径</span><br><span class="hljs-comment"># 最后的 ./ 是指定该目录作为构建的环境目录</span><br>docker build -t milk-load-back:1.0.0 -f ./Dockerfile ./<br></code></pre></td></tr></table></figure><p>4.创建并启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --restart=always -p 8080:8080 --name=milk-load-back [IMAGEID]<br></code></pre></td></tr></table></figure><h2 id="五、利用docker-compose方式快速启动"><a href="#五、利用docker-compose方式快速启动" class="headerlink" title="五、利用docker-compose方式快速启动"></a>五、利用docker-compose方式快速启动</h2><p>准备docker-compose.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">milk_load_back:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">milk-load-back:1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">milk-load-back</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/milk_load_back:/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">milk_load_net</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>      <br>  <span class="hljs-attr">milk_load_front:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">milk-load-front:1.0.0</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">milk-load-front</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000:3000&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">milk_load_net</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">milk_load_back</span><br>    <br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:6.0.8</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/redis/redis.conf:/etc/redis/redis.conf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/redis/data:/data</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">milk_load_net</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">/etc/redis/redis.conf</span><br>    <br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;milk_load_yangtzeu&#x27;</span><br>      <span class="hljs-attr">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class="hljs-string">&#x27;no&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/mysql/data/:/var/lib/mysql</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/mysql/my.cnf:/etc/mysql/my.cnf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/mysql/conf.d:/etc/mysql/conf.d</span> <br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">milk_load_net</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">--default-authentication-plugin=mysql_native_password</span><br>    <br><span class="hljs-attr">networks:</span><br>    <span class="hljs-attr">milk_load_net:</span><br></code></pre></td></tr></table></figure><p>同级目录下执行以下命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>关闭命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose stop<br></code></pre></td></tr></table></figure><p><strong>注意：在使用这种方式之前，更改springboot配置文件中的mysql以及redis地址，用服务名来代替固定ip，避免因容器ip变化而导致连接失败。如下：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://mysql:3306/milk_load?characterEncoding=UTF-8&amp;useUnicode=true&amp;useSSL=false&amp;tinyInt1isBit=false</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">milk_load_yangtzeu</span><br><span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile简介</title>
    <link href="/2022/03/09/Dockerfile%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/03/09/Dockerfile%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile简介"><a href="#Dockerfile简介" class="headerlink" title="Dockerfile简介"></a>Dockerfile简介</h1><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本</p><h2 id="一、构建大致流程："><a href="#一、构建大致流程：" class="headerlink" title="一、构建大致流程："></a>一、构建大致流程：</h2><ol><li>docker从基础镜像运行一个容器</li><li>执行一条指令并对容器做出修改</li><li>执行类似docker commit的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新容器</li><li>执行dockerfile中的下一条指令直到所有指令执行完成</li></ol><h2 id="二、dockerfile常用保留字"><a href="#二、dockerfile常用保留字" class="headerlink" title="二、dockerfile常用保留字"></a>二、dockerfile常用保留字</h2><h3 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1.FROM"></a>1.FROM</h3><p>指定基础镜像，当前镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板</p><h3 id="2-MAINTAINER"><a href="#2-MAINTAINER" class="headerlink" title="2.MAINTAINER"></a>2.MAINTAINER</h3><p>镜像维护者的姓名和邮箱地址</p><h3 id="3-RUN"><a href="#3-RUN" class="headerlink" title="3.RUN"></a>3.RUN</h3><p>容器构建时需要运行的命令，有两种格式：shell和exec格式，<strong>在docker build时执行</strong></p><p>shell格式：</p><blockquote><p>RUN &lt;命令行命令&gt;</p><p>例：RUN yum -y install vim </p></blockquote><p>exec格式</p><blockquote><p>RUN [“可执行文件”,”参数1”,”参数2”]</p><p>例：RUN [“./test.php”,”dev”,”offline”] 等价于 RUN ./test.php dev offline</p></blockquote><h3 id="4-EXPOSE"><a href="#4-EXPOSE" class="headerlink" title="4.EXPOSE"></a>4.EXPOSE</h3><p>指定暴露的端口</p><h3 id="5-WORKDIR"><a href="#5-WORKDIR" class="headerlink" title="5.WORKDIR"></a>5.WORKDIR</h3><p>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</p><h3 id="6-ENV"><a href="#6-ENV" class="headerlink" title="6.ENV"></a>6.ENV</h3><p>用来在构建镜像过程中设置环境变量，这个环境变量可以在后续的任何RUN指令中使用，也可以在其它指令中直接使用这些环境变量</p><h3 id="7-VOLUME"><a href="#7-VOLUME" class="headerlink" title="7.VOLUME"></a>7.VOLUME</h3><p>容器数据卷，用于数据保存和持久化工作</p><h3 id="8-ADD"><a href="#8-ADD" class="headerlink" title="8.ADD"></a>8.ADD</h3><p>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包</p><h3 id="9-COPY"><a href="#9-COPY" class="headerlink" title="9.COPY"></a>9.COPY</h3><p>类似ADD，拷贝文件和目录到镜像中，将从构建上下文目录中&lt; 源路径 &gt;的文件/目录复制到新的一层的镜像内的&lt; 目标路径 &gt;</p><blockquote><p>COPY [SRC] [DEST]</p><p>SRC:源文件或者源目录</p><p>DEST：容器内的指定路径（不用提前建立）</p></blockquote><h3 id="10-CMD"><a href="#10-CMD" class="headerlink" title="10.CMD"></a>10.CMD</h3><p>指定容器启动后要做的事情</p><p>注意：Dockerfile中可以有多个CMD指令，但是只有最后一个生效，CMD会被docker run之后的参数替换</p><blockquote><p>例：</p><p>docker run -it -p 8080:8080 [CONTAINERID] /bin/bash</p><p>/bin/bass会覆盖掉dockerfile文件中的CMD命令，等价于CMD [“/bin/bash”,”run”],可能会导致问题</p></blockquote><p><strong>CMD和RUN的区别：</strong>CMD在docker run时运行，RUN在docker build时运行</p><h3 id="11-ENTRYPOINT"><a href="#11-ENTRYPOINT" class="headerlink" title="11.ENTRYPOINT"></a>11.ENTRYPOINT</h3><p>类似于CMD命令，也是用来指定容器启动时要运行的命令，但是ENTRYPOINT不会被docker run后面的命令覆盖，而且这些命令行参数会被当做参数送给ENTRYPOINT指令指定的程序</p><blockquote><p>ENTRYPOINT [“executeable”,”param1”,”param2”]</p></blockquote><p>ENTRYPOINT可以和CMD一起使用，当指定了ENTRYPOINT后，CMD的含义就发生了变化，不再是直接运行其命令而是将其作为参数传给ENTRYPOINT指令，变为&lt; ENTRYPOINT &gt; “&lt; CMD &gt;”主要用于传递变参</p><p>例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;nginx&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>]     <span class="hljs-comment">#定参</span></span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="hljs-comment"># 变参</span></span><br></code></pre></td></tr></table></figure><p>如果不传参数</p><blockquote><p>docker run nginx:latest</p><p>最终执行的命令为</p><p>nginx -c /etc/nginx/nginx.conf</p></blockquote><p>如果传参数</p><blockquote><p>docker run nginx:latest -c /etc/nginx/new.conf</p><p>最终执行的命令为</p><p>nginx -c /etc/nginx/new.conf</p></blockquote><h2 id="三、-docker构建命令"><a href="#三、-docker构建命令" class="headerlink" title="三、 docker构建命令"></a>三、 docker构建命令</h2><p>在Dockerfile文件同级目录下运行命令</p><blockquote><p>docker build -t 新镜像名字:tag</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis菜单树数据条件查询实现</title>
    <link href="/2022/02/12/mybatis%E8%8F%9C%E5%8D%95%E6%A0%91%E6%95%B0%E6%8D%AE%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/02/12/mybatis%E8%8F%9C%E5%8D%95%E6%A0%91%E6%95%B0%E6%8D%AE%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis菜单树数据条件查询实现"><a href="#mybatis菜单树数据条件查询实现" class="headerlink" title="mybatis菜单树数据条件查询实现"></a>mybatis菜单树数据条件查询实现</h1><p>通过Sql语句实现查询，将查询到的数据自动映射为对应的实体类中</p><p>在实际编写过程中发现用sql语句进行实现时，语句比较复杂，且查询结果父菜单中子菜单可能出现重复结果。</p><p>此方法仅供学习参考，不推荐利用此方法实现（推荐在程序端递归实现层级菜单数据）</p><h2 id="SysMenuMapper-xml"><a href="#SysMenuMapper-xml" class="headerlink" title="SysMenuMapper.xml"></a>SysMenuMapper.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.ego.system.mapper.SysMenuMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--此处映射的是SysMenu实体类中的所有属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseSysMenuResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;SysMenu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_name&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;parent_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderNum&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_num&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;path&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;component&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;component&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;query&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isFrame&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_frame&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isCache&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_cache&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuType&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_type&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;visible&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;perms&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;perms&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;icon&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_by&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_by&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;remark&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;remark&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <br>    <br>    <span class="hljs-comment">&lt;!--此处映射的是SysMenuVO中的属性--&gt;</span><br>    <span class="hljs-comment">&lt;!--SysMenuVO继承SysMenu实体类，但多出一个属性：List&lt;SysMenuVO&gt; children ,此属性存储的是子菜单信息--&gt;</span><br>    <span class="hljs-comment">&lt;!--可将此映射理解为一个三级的菜单树--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SysMenuVOResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;SysMenuVO&quot;</span> <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;BaseSysMenuResult&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此处映射的是二级组件的信息--&gt;</span><br>        <span class="hljs-comment">&lt;!--columnPrefix=&quot;m2_&quot;为字段的前缀，即查询结果中的m2_menuId将被映射为二级组件的menuId属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">columnPrefix</span>=<span class="hljs-string">&quot;m2_&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;children&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;SysMenuVO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_id&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_name&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;parent_id&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderNum&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_num&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;path&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;component&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;component&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;query&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isFrame&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_frame&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isCache&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_cache&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuType&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_type&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;visible&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;perms&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;perms&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;icon&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_by&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_by&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;remark&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;remark&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--此处映射的是三级组件的信息--&gt;</span><br>            <span class="hljs-comment">&lt;!--columnPrefix=&quot;m3_&quot;为字段的前缀，即查询结果中的名m2_m3_menuId将被映射为三级组件的menuId属性--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">columnPrefix</span>=<span class="hljs-string">&quot;m3_&quot;</span>  <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;children&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;SysMenuVO&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_id&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_name&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;parent_id&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderNum&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_num&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;path&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;path&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;component&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;component&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;query&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isFrame&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_frame&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isCache&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_cache&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;menuType&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;menu_type&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;visible&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;visible&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;perms&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;perms&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;icon&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_by&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_by&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;remark&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;remark&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--此处是动态为查询字段取别名，为查询出的属性添加对应的前缀，避免因查询出的结果中字段名重复影响映射结果--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addColumns&quot;</span>&gt;</span><br>        $&#123;tableAlias&#125;.menu_id as $&#123;prefix&#125;menu_id,<br>        $&#123;tableAlias&#125;.menu_name as $&#123;prefix&#125;menu_name,<br>        $&#123;tableAlias&#125;.parent_id as $&#123;prefix&#125;parent_id,<br>        $&#123;tableAlias&#125;.order_num as $&#123;prefix&#125;order_num,<br>        $&#123;tableAlias&#125;.path as $&#123;prefix&#125;path,<br>        $&#123;tableAlias&#125;.component as $&#123;prefix&#125;component,<br>        $&#123;tableAlias&#125;.query as $&#123;prefix&#125;query,<br>        $&#123;tableAlias&#125;.is_frame as $&#123;prefix&#125;is_frame,<br>        $&#123;tableAlias&#125;.is_cache as $&#123;prefix&#125;is_cache,<br>        $&#123;tableAlias&#125;.menu_type as $&#123;prefix&#125;menu_type,<br>        $&#123;tableAlias&#125;.visible as $&#123;prefix&#125;visible,<br>        $&#123;tableAlias&#125;.status as $&#123;prefix&#125;status,<br>        $&#123;tableAlias&#125;.perms as $&#123;prefix&#125;perms,<br>        $&#123;tableAlias&#125;.icon as $&#123;prefix&#125;icon,<br>        $&#123;tableAlias&#125;.create_by as $&#123;prefix&#125;create_by,<br>        $&#123;tableAlias&#125;.create_time as $&#123;prefix&#125;create_time,<br>        $&#123;tableAlias&#125;.update_by as $&#123;prefix&#125;update_by,<br>        $&#123;tableAlias&#125;.update_time as $&#123;prefix&#125;update_time,<br>        $&#123;tableAlias&#125;.remark as $&#123;prefix&#125;remark<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllMenuVOList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;QueryParams&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysMenuVOResult&quot;</span>&gt;</span><br>        SELECT<br>            m1.*,<br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;addColumns&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tableAlias&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;m2&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;m2_&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               ,<br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;addColumns&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tableAlias&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;m3&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;m2_m3_&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        FROM<br>            ys_menu m1<br>                LEFT JOIN sys_menu m2 ON m2.parent_id = m1.menu_id<br>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param1 != null&quot;</span>&gt;</span><br>                    and m2.menu_name like concat( &#x27;%&#x27;, #&#123;queryParams.param1&#125;, &#x27;%&#x27; )<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param3 != null&quot;</span>&gt;</span><br>                    and m2.`status` = #&#123;queryParams.param3&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                LEFT JOIN sys_menu m3 ON m3.parent_id = m2.menu_id<br>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param1 != null&quot;</span>&gt;</span><br>                    and m2.menu_name like concat( &#x27;%&#x27;, #&#123;queryParams.param1&#125;, &#x27;%&#x27; )<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param3 != null&quot;</span>&gt;</span><br>                    and m2.`status` = #&#123;queryParams.param3&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param1 == null and queryParams.param3 == null&quot;</span>&gt;</span><br>                m1.parent_id = 0<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param1 != null or queryParams.param3 == null&quot;</span>&gt;</span><br>                m1.menu_id in ( select m4.menu_id FROM sys_menu m4<br>                <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param1 != null&quot;</span>&gt;</span><br>                        m4.menu_name like concat(&#x27;%&#x27;, #&#123;queryParams.param1&#125;, &#x27;%&#x27;)<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param3 != null&quot;</span>&gt;</span><br>                        and m4.status = #&#123;queryParams.param3&#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>                )<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="SysMenuMapper-java"><a href="#SysMenuMapper-java" class="headerlink" title="SysMenuMapper.java"></a>SysMenuMapper.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SysMenuMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">SysMenu</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">//TODO 此处是直接用sql查询出菜单及其子菜单数据，可以换一种实现方式，在程序端来实现</span><br>   <span class="hljs-comment">//次测试用例中只用到了QueryParams中的param1(代表菜单名) param3(代表菜单状态)两个参数</span><br>    <span class="hljs-function">List&lt;SysMenuVO&gt; <span class="hljs-title">getAllMenuVOList</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;queryParams&quot;)</span>QueryParams queryParams)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="QueryParams-java"><a href="#QueryParams-java" class="headerlink" title="QueryParams.java"></a>QueryParams.java</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@AllArgsConstructor</span><br><span class="hljs-variable">@NoArgsConstructor</span><br>public class QueryParams &#123;<br><br>    <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">param1</span>;<br><br>    <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">param2</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来存储状态字段</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-selector-tag">Boolean</span> <span class="hljs-selector-tag">param3</span>;<br><br>    <span class="hljs-selector-tag">Date</span> <span class="hljs-selector-tag">startDate</span>;<br><br>    <span class="hljs-selector-tag">Date</span> <span class="hljs-selector-tag">endDate</span>;<br><br>    <span class="hljs-selector-tag">Integer</span> <span class="hljs-selector-tag">pageSize</span>;<br><br>    <span class="hljs-selector-tag">Integer</span> <span class="hljs-selector-tag">pageNo</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="菜单树程序实现"><a href="#菜单树程序实现" class="headerlink" title="菜单树程序实现"></a>菜单树程序实现</h2><p>//TODO </p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
      <tag>resultMap映射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis resultMap复杂数据类型映射</title>
    <link href="/2022/02/10/Mybatis%20resultMap%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84/"/>
    <url>/2022/02/10/Mybatis%20resultMap%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-resultMap复杂数据类型映射"><a href="#Mybatis-resultMap复杂数据类型映射" class="headerlink" title="Mybatis resultMap复杂数据类型映射"></a>Mybatis resultMap复杂数据类型映射</h1><p><strong>property</strong>指的是实体类中的属性名 <strong>column</strong>指的是数据库中对应的字段名</p><p><strong>association标签：</strong></p><p>​        一般用于一对一或多对一</p><p>​        javaType指的是实体类的类型</p><p><strong>collection标签：</strong></p><p>​        一般用于一对多</p><p>​        javaType指的是集合类型（一般为ArrayList）</p><p>​        ofType指的是集合中元素的类型，可以为自定义实体类或者是包装类</p><p><strong>注意：当List中元素为包装类型时，&lt; collection &gt;标签中的&lt; result &gt;标签不用写property属性，直接写对应的数据库字段名。</strong></p><p>此处利用一个复杂的对象映射作为示例，主要有三种类型的映射（  List&lt; SysRole&gt; roles，List&lt; Long&gt; roleIds，SysDept dept）</p><h2 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserVOList&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.ego.system.entity.query.QueryParams&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SysUserVOResultMap&quot;</span>&gt;</span><br>        SELECT DISTINCT<br>            u.*,<br>            r.role_id,<br>            r.role_name,<br>            r.role_key,<br>            r.role_sort,<br>            r.data_scope,<br>            r.status role_status,<br>            d.parent_id,<br>            d.dept_name,<br>            d.order_num,<br>            d.leader,<br>            d.status dept_status<br>        FROM<br>            `sys_user` u<br>                LEFT JOIN sys_user_role ur ON u.user_id = ur.user_id<br>                LEFT JOIN sys_role r ON ur.role_id = r.role_id<br>                LEFT JOIN sys_dept d ON u.dept_id = d.dept_id<br>        WHERE u.del_flag = 0<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param3 != null&quot;</span>&gt;</span><br>            AND u.status = #&#123;queryParams.param3&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param1 != null and queryParams.param1 != &#x27;&#x27;&quot;</span>&gt;</span><br>            AND u.login_name like concat(&#x27;%&#x27;, #&#123;queryParams.param1&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.param2 != null and queryParams.param2 != &#x27;&#x27;&quot;</span>&gt;</span><br>            AND u.phonenumber like concat(&#x27;%&#x27;, #&#123;queryParams.param2&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;queryParams.startDate != null and queryParams.endDate != null&quot;</span>&gt;</span><br>            AND u.create_time between #&#123;queryParams.startDate&#125; and #&#123;queryParams.endDate&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SysUserVOResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.ego.system.entity.vo.SysUserVO&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;loginName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;login_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userType&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_type&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;phonenumber&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;phonenumber&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;salt&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;salt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;delFlag&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;del_flag&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;loginIp&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;login_ip&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;loginDate&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;login_date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;pwdUpdateDate&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd_update_date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_by&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateBy&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_by&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;remark&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;remark&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.ego.system.entity.SysDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptResult&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roles&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;roleResult&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleIds&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;long&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.ego.system.entity.SysDept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>     <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>   <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>     /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;parentId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;parent_id&quot;</span>   /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>   /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderNum&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_num&quot;</span>   /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;leader&quot;</span>   <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;leader&quot;</span>      /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span>   <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_status&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;roleResult&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.ego.system.entity.SysRole&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>     <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleId&quot;</span>       <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_id&quot;</span>        /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleName&quot;</span>     <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_name&quot;</span>      /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleKey&quot;</span>      <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_key&quot;</span>       /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleSort&quot;</span>     <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_sort&quot;</span>      /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dataScope&quot;</span>    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;data_scope&quot;</span>     /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span>       <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role_status&quot;</span>    /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>SysUserMapepr.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SysUserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">SysUser</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">//注意当返回值为Page对象时，入参的page对象不能为空</span><br>    <span class="hljs-function">IPage&lt;SysUserVO&gt; <span class="hljs-title">getUserVOList</span><span class="hljs-params">(Page&lt;SysUserVO&gt; page,<span class="hljs-meta">@Param(&quot;queryParams&quot;)</span> QueryParams queryParams)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="SysUserServiceImpl-java"><a href="#SysUserServiceImpl-java" class="headerlink" title="SysUserServiceImpl.java"></a><strong>SysUserServiceImpl.java</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">SysUserMapper</span>, <span class="hljs-title">SysUser</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">ISysUserService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    SysUserMapper sysUserMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IPage&lt;SysUserVO&gt; <span class="hljs-title">getUserVOList</span><span class="hljs-params">(Page&lt;SysUserVO&gt; page, QueryParams queryParams)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sysUserMapper.getUserVOList(page, queryParams);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="SysUserController-java"><a href="#SysUserController-java" class="headerlink" title="SysUserController.java"></a><strong>SysUserController.java</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(tags = &quot;系统用户表&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/sys-user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    ISysUserService sysUserService;<br><br>    <span class="hljs-meta">@ApiOperation(value=&quot;系统用户表-分页列表查询&quot;, notes=&quot;系统用户表-分页列表查询&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;/getUserVOList&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">getSysUserVOList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> QueryParams queryParams)</span></span>&#123;<br>        Page&lt;SysUserVO&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(queryParams.getPageNo(), queryParams.getPageSize());<br>        IPage&lt;SysUserVO&gt; pageList=sysUserService.getUserVOList(page,queryParams);<br>        <span class="hljs-keyword">return</span> Result.success(pageList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="QueryParams-java："><a href="#QueryParams-java：" class="headerlink" title="QueryParams.java："></a><strong>QueryParams.java：</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryParams</span> </span>&#123;<br><br>    String param1;<br><br>    String param2;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来存储状态字段</span><br><span class="hljs-comment">     */</span><br>    Boolean param3;<br><br>    Date startDate;<br><br>    Date endDate;<br><br>    Integer pageSize;<br><br>    Integer pageNo;<br><br></code></pre></td></tr></table></figure><h2 id="SysUserVO-java"><a href="#SysUserVO-java" class="headerlink" title="SysUserVO.java"></a><strong>SysUserVO.java</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserVO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SysUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;SysRole&gt; roles;<br><br>    <span class="hljs-keyword">private</span> List&lt;Long&gt; roleIds;<br><br>    <span class="hljs-keyword">private</span> SysDept dept;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="SysUser-java"><a href="#SysUser-java" class="headerlink" title="SysUser.java"></a><strong>SysUser.java</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@ApiModel(value=&quot;SysUser对象&quot;, description=&quot;用户信息表&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户ID&quot;)</span><br>    <span class="hljs-meta">@TableId(value = &quot;user_id&quot;, type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;部门ID&quot;)</span><br>    <span class="hljs-keyword">private</span> Long deptId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;登录账号&quot;)</span><br>    <span class="hljs-keyword">private</span> String loginName;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户昵称&quot;)</span><br>    <span class="hljs-keyword">private</span> String userName;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户类型（00系统用户 01注册用户）&quot;)</span><br>    <span class="hljs-keyword">private</span> String userType;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户邮箱&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;手机号码&quot;)</span><br>    <span class="hljs-keyword">private</span> String phonenumber;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;用户性别（0男 1女 2未知）&quot;)</span><br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;头像路径&quot;)</span><br>    <span class="hljs-keyword">private</span> String avatar;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;密码&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;盐加密&quot;)</span><br>    <span class="hljs-keyword">private</span> String salt;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;帐号状态（0 false正常 1 true停用）&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean status;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;删除标志（0 false代表存在 2 true代表删除）&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean delFlag;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;最后登录IP&quot;)</span><br>    <span class="hljs-keyword">private</span> String loginIp;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;最后登录时间&quot;)</span><br>    <span class="hljs-keyword">private</span> Date loginDate;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;密码最后更新时间&quot;)</span><br>    <span class="hljs-keyword">private</span> Date pwdUpdateDate;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建者&quot;)</span><br>    <span class="hljs-meta">@TableField(value = &quot;create_by&quot;,fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> String createBy;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br>    <span class="hljs-meta">@TableField(value = &quot;create_time&quot;,fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;更新者&quot;)</span><br>    <span class="hljs-meta">@TableField(value = &quot;update_by&quot;,fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> String updateBy;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br>    <span class="hljs-meta">@TableField(value = &quot;update_time&quot;,fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;备注&quot;)</span><br>    <span class="hljs-keyword">private</span> String remark;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​        </p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端VUE项目全流程配置</title>
    <link href="/2022/01/16/%E5%89%8D%E7%AB%AFVUE%E9%A1%B9%E7%9B%AE%E5%85%A8%E6%B5%81%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/01/16/%E5%89%8D%E7%AB%AFVUE%E9%A1%B9%E7%9B%AE%E5%85%A8%E6%B5%81%E7%A8%8B%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前端VUE项目全流程配置"><a href="#前端VUE项目全流程配置" class="headerlink" title="前端VUE项目全流程配置"></a>前端VUE项目全流程配置</h1><h2 id="1-创建Vue项目"><a href="#1-创建Vue项目" class="headerlink" title="1.创建Vue项目"></a>1.创建Vue项目</h2><p>安装完npm，vue cli等环境后，命令行输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">vue create projectName<br></code></pre></td></tr></table></figure><h2 id="2-项目相关配置"><a href="#2-项目相关配置" class="headerlink" title="2.项目相关配置"></a>2.项目相关配置</h2><h3 id="2-1配置项目启动后浏览器自动打开"><a href="#2-1配置项目启动后浏览器自动打开" class="headerlink" title="2.1配置项目启动后浏览器自动打开"></a>2.1配置项目启动后浏览器自动打开</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&quot;scripts&quot;: &#123;<br>    &quot;serve&quot;: &quot;vue-cli-service serve --open&quot;,<br>    &quot;build&quot;: &quot;vue-cli-service build&quot;,<br>    &quot;lint&quot;: &quot;vue-cli-service lint&quot;<br>  &#125;,<br></code></pre></td></tr></table></figure><h3 id="2-2关闭eslint校验"><a href="#2-2关闭eslint校验" class="headerlink" title="2.2关闭eslint校验"></a>2.2关闭eslint校验</h3><p>新建vue.config.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-comment">//关闭eslint</span><br>    lintOnSave:<span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-src文件夹简写方法，为其配置别名（-）"><a href="#2-3-src文件夹简写方法，为其配置别名（-）" class="headerlink" title="2.3 src文件夹简写方法，为其配置别名（@）"></a>2.3 src文件夹简写方法，为其配置别名（@）</h3><p>新建jsconfig.json文件配置别名@（@代表的是src文件夹）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,<br>    <span class="hljs-attr">&quot;paths&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;@/*&quot;</span>: [<br>        <span class="hljs-string">&quot;src/*&quot;</span><br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;exclude&quot;</span>: [<br>    <span class="hljs-string">&quot;node_modules&quot;</span>,<br>    <span class="hljs-string">&quot;dist&quot;</span><br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-4识别less文件"><a href="#2-4识别less文件" class="headerlink" title="2.4识别less文件"></a>2.4识别less文件</h3><p>项目中安装less相关依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install --save less less-loader@<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>vue组件的style标签后加上lang=”less”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style scoped lang&#x3D;&quot;less&quot;&gt;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><h2 id="3-组件基本使用"><a href="#3-组件基本使用" class="headerlink" title="3.组件基本使用"></a>3.组件基本使用</h2><ul><li><p>创建组件</p></li><li><p>引入组件</p></li><li><p>声明组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>&#x2F;&#x2F;引入<br>import Header from &quot;.&#x2F;components&#x2F;Header&quot;<br>import Footer from &quot;.&#x2F;components&#x2F;Footer&quot;<br><br>export default &#123;<br>  name: &#39;App&#39;,<br>  components: &#123;<br>    Header,<br>    Footer<br>  &#125;<br>&#125;<br>&lt;&#x2F;script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-路由组件搭建"><a href="#4-路由组件搭建" class="headerlink" title="4.路由组件搭建"></a>4.路由组件搭建</h2><p>安装vue-router依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install --save vue-router<br></code></pre></td></tr></table></figure><p>创建pages|views文件夹，用来放置路由组件（components一般放置非路由组件）</p><h3 id="4-1配置路由"><a href="#4-1配置路由" class="headerlink" title="4.1配置路由"></a>4.1配置路由</h3><p>1.src目录下新建router文件夹（项目中配置的路由一般放置在router文件夹中）</p><p>​    router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-comment">//使用插件</span><br>Vue.use(VueRouter)<br><br><span class="hljs-comment">//引入需要路由的组件</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> Search <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Search&#x27;</span><br><span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Login&#x27;</span><br><span class="hljs-keyword">import</span> Register <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Register&#x27;</span><br><br><span class="hljs-comment">//配置路由</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;<br>    routes:[<br>        &#123;<br>            path:<span class="hljs-string">&quot;/home&quot;</span>,<br>            component:Home<br>        &#125;,<br>        &#123;<br>            path:<span class="hljs-string">&quot;/search&quot;</span>,<br>            component:Search<br>        &#125;,<br>        &#123;<br>            path:<span class="hljs-string">&quot;/login&quot;</span>,<br>            component:Login<br>        &#125;,<br>        &#123;<br>            path:<span class="hljs-string">&quot;/register&quot;</span>,<br>            component:Register<br>        &#125;,&#123;     <span class="hljs-comment">//重定向</span><br>            path:<span class="hljs-string">&quot;/&quot;</span>,<br>            redirect:<span class="hljs-string">&quot;/home&quot;</span><br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>2.在main.js中引入并注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">//引入路由</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>  router    <span class="hljs-comment">//注册路由，当kv一致时可以省略v</span><br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><strong>注意：当注册完router之后，不管是路由组件还是非路由组件都会带有$route、$router属性</strong></p><p><strong>$route：一般获取路由信息（路径、query、params等等）</strong></p><p><strong>$router：一般进行编程式导航进行路由跳转（replace|push）</strong></p><p>3.在App.vue中设置路由出口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;Header&gt;&lt;&#x2F;Header&gt;<br>&lt;!--    路由组件出口--&gt;<br>    &lt;router-view&gt;&lt;&#x2F;router-view&gt;<br>    &lt;Footer&gt;&lt;&#x2F;Footer&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br></code></pre></td></tr></table></figure><h3 id="4-2路由跳转"><a href="#4-2路由跳转" class="headerlink" title="4.2路由跳转"></a>4.2路由跳转</h3><p>路由跳转的两种方式：</p><p>声明式导航router-link，可以进行路由的跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F;必须要有to属性<br>&lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;<br></code></pre></td></tr></table></figure><p>编程式导航$router.push|replace，可以进行路由跳转</p><p>编程式导航：声明式导航能做的，编程式导航都能做，编程式导航除了可以进行路由跳转，还可以做一些其他的业务逻辑。（例如在登录时对传递参数进行处理）</p><h2 id="5-Footer组件隐藏"><a href="#5-Footer组件隐藏" class="headerlink" title="5.Footer组件隐藏"></a>5.Footer组件隐藏</h2><p>使用v-if|v-show</p><p><strong>v-if：</strong>频繁操作dom，比较耗费性能</p><p><strong>v-show：</strong>通过样式控制节点显示或隐藏，性能较好</p><p>在此项目中我们配置路由元信息**(meta字段)**来控制Footer组件的显示与隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">routes:[<br>        &#123;<br>            path:<span class="hljs-string">&quot;/home&quot;</span>,<br>            component:Home,<br>            meta:&#123;<br>                showFooter:<span class="hljs-literal">true</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            path:<span class="hljs-string">&quot;/search&quot;</span>,<br>            component:Search,<br>            meta:&#123;<br>                showFooter:<span class="hljs-literal">true</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            path:<span class="hljs-string">&quot;/login&quot;</span>,<br>            component:Login,<br>            meta:&#123;<br>                showFooter:<span class="hljs-literal">false</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            path:<span class="hljs-string">&quot;/register&quot;</span>,<br>            component:Register,<br>            meta:&#123;<br>                showFooter:<span class="hljs-literal">false</span><br>            &#125;<br>        &#125;,&#123;     <span class="hljs-comment">//重定向</span><br>            path:<span class="hljs-string">&quot;/&quot;</span>,<br>            redirect:<span class="hljs-string">&quot;/home&quot;</span><br>        &#125;<br>    ]<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id&#x3D;&quot;app&quot;&gt;<br>    &lt;Header&gt;&lt;&#x2F;Header&gt;<br>&lt;!--路由组件出口--&gt;<br>    &lt;router-view&gt;&lt;&#x2F;router-view&gt;<br>&lt;!--在Home、Search时显示，在登录、注册时隐藏--&gt;<br>    &lt;Footer v-show&#x3D;&quot;$route.meta.showFooter&quot;&gt;&lt;&#x2F;Footer&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br></code></pre></td></tr></table></figure><h2 id="6-路由传参"><a href="#6-路由传参" class="headerlink" title="6.路由传参"></a>6.路由传参</h2><p>三种方式，一般使用第三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">goSearch()&#123;<br>      &#x2F;&#x2F;路由传递参数的三种方法<br>      &#x2F;&#x2F;第一种：字符串形式<br>      &#x2F;&#x2F; this.$router.push(&quot;&#x2F;search&#x2F;&quot;+this.keyword+&quot;?k&#x3D;&quot;+this.keyword.toUpperCase())<br>      &#x2F;&#x2F;第二种：模板字符串<br>      &#x2F;&#x2F; this.$router.push(&#96;&#x2F;search&#x2F;$&#123;this.keyword&#125;?k&#x3D;$&#123;this.keyword.toUpperCase()&#125;&#96;)<br>      &#x2F;&#x2F;第三种：对象<br>      this.$router.push(&#123;name:&quot;search&quot;,params:&#123;keyword:this.keyword&#125;,query:&#123;k:this.keyword.toUpperCase()&#125;&#125;)<br>    &#125;<br></code></pre></td></tr></table></figure><p>注意使用第三种方式时，需要为router配置name属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    path:<span class="hljs-string">&quot;/search/:keyword&quot;</span>,<br>    component:Search,<br>    meta:&#123;<br>    showFooter:<span class="hljs-literal">true</span><br>    &#125;,<br>    name:<span class="hljs-string">&quot;search&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-解决NavigationDuplicated异常"><a href="#7-解决NavigationDuplicated异常" class="headerlink" title="7.解决NavigationDuplicated异常"></a>7.解决NavigationDuplicated异常</h2><p>当编程式路由跳转到当前路由（参数不变），多次执行会导致NavigationDuplicated异常（声明式导航不会出现这种错误）</p><p>解决方法：通过给push方法传递相应的成功、失败回调函数，捕获当前异常</p><h2 id="8-三级联动组件实现"><a href="#8-三级联动组件实现" class="headerlink" title="8.三级联动组件实现"></a>8.三级联动组件实现</h2><p>1.创建组件并设置name属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;&#x2F;template&gt;<br>&lt;script&gt;<br>    export default &#123;<br>      name: &quot;TypeNav&quot;<br>    &#125;<br>&lt;&#x2F;script&gt;<br><br>&lt;style scoped lang&#x3D;&quot;less&quot;&gt;<br>&lt;&#x2F;style&gt;<br></code></pre></td></tr></table></figure><p>2.main.js中注册为全局组件方便使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//三级联动组件--全局组件</span><br><span class="hljs-keyword">import</span> TypeNav <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Home/TypeNav&#x27;</span>;<br><span class="hljs-comment">//第一个参数：全局组件的名字 第二个参数：哪一个组件</span><br>Vue.component(TypeNav.name,TypeNav);<br></code></pre></td></tr></table></figure><p>3.正常使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;TypeNav&gt;&lt;&#x2F;TypeNav&gt;<br>  &lt;&#x2F;div&gt;<br>&lt;&#x2F;template&gt;<br></code></pre></td></tr></table></figure><h2 id="9-axios二次封装"><a href="#9-axios二次封装" class="headerlink" title="9.axios二次封装"></a>9.axios二次封装</h2><p><strong>请求拦截器：</strong>可以在发送请求前处理一些业务</p><p><strong>响应拦截器：</strong>当服务器数据返回后，可以处理一些业务</p><p>request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//对axios进行二次封装</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-comment">//1.利用axios对象的方法create创建一个axios实例</span><br><span class="hljs-keyword">const</span> requests = axios.create(&#123;<br>    <span class="hljs-comment">//基础路径，发请求的时候会默认带上/api</span><br>    baseURL:<span class="hljs-string">&quot;/api&quot;</span>,<span class="hljs-comment">//注意此处不要写成baseUrl</span><br>    timeout:<span class="hljs-number">5000</span>,<br>&#125;)<br><span class="hljs-comment">//配置请求拦截器</span><br>requests.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">config</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//config:配置对象，对象里有一个属性很重要--header请求头</span><br>    <span class="hljs-keyword">return</span> config;<br>&#125;)<br><br><span class="hljs-comment">//响应拦截器</span><br>requests.interceptors.response.user(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> res.data;<br>&#125;,<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(error)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;fail&#x27;</span>));<br>&#125;)<br><br><br><span class="hljs-comment">//对外暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> requests;<br><br></code></pre></td></tr></table></figure><h2 id="10-接口统一管理"><a href="#10-接口统一管理" class="headerlink" title="10.接口统一管理"></a>10.接口统一管理</h2><p>  src-&gt;api目录下创建index.js文件统一管理接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//此模块对api地址进行统一管理</span><br><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api/request&quot;</span>;<br><br><span class="hljs-comment">//三级联动地址</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> reqCategoryList = <span class="hljs-function">()=&gt;</span> requests(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/product/getBaseCategoryList&#x27;</span>,<span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><h2 id="11-跨域问题解决"><a href="#11-跨域问题解决" class="headerlink" title="11.跨域问题解决"></a>11.跨域问题解决</h2><p>在vue.config.js中配置代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-comment">//关闭eslint</span><br>    lintOnSave:<span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">//代理跨域</span><br>    devServer: &#123;<br>        proxy: &#123;<br>            <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;       <span class="hljs-comment">//当请求中带有/api时会经过代理</span><br>                target: <span class="hljs-string">&#x27;http://39.98.123.211&#x27;</span>,<br>                <span class="hljs-comment">// pathRewrite: &#123;&#x27;^/api&#x27;: &#x27;&#x27;&#125;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="12-nprogress实现加载进度条"><a href="#12-nprogress实现加载进度条" class="headerlink" title="12.nprogress实现加载进度条"></a>12.nprogress实现加载进度条</h2><p>1.安装nprogress依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install --save nprogress<br></code></pre></td></tr></table></figure><p>2.在api/request.js文件中引入nprogress及其css样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> nprogress <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span>;<br><span class="hljs-comment">//start方法进度条开始，done方法进度条结束</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;nprogress/nprogress.css&quot;</span><br></code></pre></td></tr></table></figure><p>3.在请求和相应拦截器回调函数中启用start()和done()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置请求拦截器</span><br>requests.interceptors.request.use(<span class="hljs-function">(<span class="hljs-params">config</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//config:配置对象，对象里有一个属性很重要--header请求头</span><br>    nprogress.start();<br>    <span class="hljs-keyword">return</span> config;<br>&#125;)<br><br><span class="hljs-comment">//响应拦截器</span><br>requests.interceptors.response.use(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>    nprogress.done();<br>    <span class="hljs-keyword">return</span> res.data;<br>&#125;,<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(error)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;fail&#x27;</span>));<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：进度条样式可以进行修改，在node_modules/nprogress/nprogress.css文件</p><h2 id="13-使用Vuex模块式开发"><a href="#13-使用Vuex模块式开发" class="headerlink" title="13.使用Vuex模块式开发"></a>13.使用Vuex模块式开发</h2><p>当项目过大，组件过多数据多时，使用Vuex管理数据更加方便</p><p>1.创建模块相应的js文件</p><p>store/home/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//home模块仓库</span><br><span class="hljs-keyword">const</span> state = &#123;&#125;;<br><span class="hljs-keyword">const</span> mutations = &#123;&#125;;<br><span class="hljs-keyword">const</span> actions = &#123;&#125;;<br><span class="hljs-keyword">const</span> getters = &#123;&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;<br></code></pre></td></tr></table></figure><p>2.整合到总仓库中</p><p>store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-comment">//需要使用插件一次</span><br>Vue.use(Vuex);<br><br><span class="hljs-comment">//引入模块仓库</span><br><span class="hljs-keyword">import</span> home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./home&quot;</span><br><span class="hljs-keyword">import</span> search <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./search&quot;</span><br><br><span class="hljs-comment">//对外暴露Store类的一个实例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>    modules:&#123;<br>        home,<br>        search<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.在main.js中引入并注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入仓库</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span>;<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),<br>  router,    <span class="hljs-comment">//注册路由，当kv一致时可以省略v</span><br>  store<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="14-三级联动数据动态展示"><a href="#14-三级联动数据动态展示" class="headerlink" title="14.三级联动数据动态展示"></a>14.三级联动数据动态展示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F;引入辅助函数<br>import &#123;mapState&#125; from &#39;vuex&#39;<br><br>export default &#123;<br>  name: &quot;TypeNav&quot;,<br>  &#x2F;&#x2F;组件挂载完毕，向服务器发送请求<br>  mounted() &#123;<br>    &#x2F;&#x2F;通知Vuex发送请求，获取数据，存储于仓库中<br>    this.$store.dispatch(&#39;categoryList&#39;)<br>  &#125;,<br>  computed:&#123;<br>    ...mapState(&#123;<br>      &#x2F;&#x2F;右侧需要一个函数，当使用这个计算属性时，右侧函数会立即执行一次<br>      &#x2F;&#x2F;注入一个参数，为总仓库中的数据<br>      categoryList:(state)&#x3D;&gt;&#123;<br>        return state.home.categoryList;<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取到categoryList中的数据后v-for展示即可</p><h2 id="15-函数防抖与节流"><a href="#15-函数防抖与节流" class="headerlink" title="15.函数防抖与节流"></a>15.函数防抖与节流</h2><p>鼠标事件发速度过快导致的卡顿现象</p><p>如何解决？</p><p>节流：在规定的时间范围内不会重复出发回调，只有大于这个时间间隔才会出发回调，把频繁触发变为少量触发</p><p>防抖：前面所有的触发都会被取消，最后一次执行在规定的时间之后才会触发，也就是说如果连续快速的触发，只会触发一次</p><h3 id="15-1三级联动节流实现"><a href="#15-1三级联动节流实现" class="headerlink" title="15.1三级联动节流实现"></a>15.1三级联动节流实现</h3><p>1.引入lodash依赖</p><p>2.组件中引入并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:&#123;<br>    changeIndex:throttle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.currentIndex = index;<br>    &#125;,<span class="hljs-number">50</span>),<span class="hljs-comment">//限制为50ms</span><br>    <span class="hljs-function"><span class="hljs-title">initIndex</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.currentIndex = -<span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="16-三级联动菜单的路由跳转与参数传递"><a href="#16-三级联动菜单的路由跳转与参数传递" class="headerlink" title="16.三级联动菜单的路由跳转与参数传递"></a>16.三级联动菜单的路由跳转与参数传递</h2><p>1.使用router-link标签—&gt;会导致卡顿现象，不使用</p><p>2.a标签上绑定函数触发编程式导航，v-for循环后会产生大量函数，不使用</p><p>3.使用编程式导航+事件委派（在最外层的父元素上添加跳转事件函数goSearch）</p><p><strong>事件委派存在的问题：</strong></p><ul><li>点击a标签时才应该进行路由跳转（如何确定点击的一定是a标签）</li><li>及时确定了点击的是a标签，如何确定点击的是几级标签</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>&#x2F;&#x2F;在对应的a标签上加上自定义属性来确定触发事件的是否是a标签以及是几级标签<br>&#x2F;&#x2F;一级标签<br>&lt;a @mouseenter&#x3D;&quot;changeIndex(index)&quot; :data-categoryName&#x3D;&quot;c1.categoryName&quot; :data-category1Id&#x3D;&quot;c1.categoryId&quot;&gt;&#123;&#123; c1.categoryName &#125;&#125;&lt;&#x2F;a&gt;<br>&#x2F;&#x2F;二级标签<br>&lt;a :data-categoryName&#x3D;&quot;c1.categoryName&quot; :data-category2Id&#x3D;&quot;c1.categoryId&quot;&gt;&#123;&#123; c2.categoryName &#125;&#125;&lt;&#x2F;a&gt;<br>&#x2F;&#x2F;三级标签<br>&lt;a :data-categoryName&#x3D;&quot;c1.categoryName&quot; :data-category3Id&#x3D;&quot;c1.categoryId&quot;&gt;&#123;&#123; c3.categoryName &#125;&#125;&lt;&#x2F;a&gt;<br></code></pre></td></tr></table></figure><p>跳转函数goSearch逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">methods:&#123;<br>    changeIndex:throttle(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.currentIndex = index;<br>    &#125;,<span class="hljs-number">50</span>),<span class="hljs-comment">//限制为50ms</span><br>    <span class="hljs-function"><span class="hljs-title">initIndex</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.currentIndex = -<span class="hljs-number">1</span>;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">goSearch</span>(<span class="hljs-params">event</span>)</span>&#123;<br>      <span class="hljs-comment">//区分a标签：在a标签上加上自定义属性data-categoryName</span><br>      <span class="hljs-comment">//获取当前触发这个事件的节点，带有自定义属性categoryname（注意浏览器自动转为小写）等的一定是a标签</span><br>      <span class="hljs-keyword">let</span> element = event.target;<br>      <span class="hljs-keyword">let</span> &#123;categoryname,category1id,category2id,category3id&#125; = element.dataset;<br>      <span class="hljs-keyword">if</span> (categoryname)&#123;<br>        <span class="hljs-keyword">let</span> location = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;search&quot;</span>&#125;;<br>        <span class="hljs-keyword">let</span> query = &#123;<span class="hljs-attr">categoryName</span>:categoryname&#125;<br>        <span class="hljs-keyword">if</span> (category1id)&#123;<br>          query.category1Id = category1id;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(category2id)&#123;<br>          query.category2Id = category2id;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>          query.category3Id = category3id;<br>        &#125;<br>        location.query = query;<br>        <span class="hljs-built_in">this</span>.$router.push(location);<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="17-使用mockjs模拟数据"><a href="#17-使用mockjs模拟数据" class="headerlink" title="17.使用mockjs模拟数据"></a>17.使用mockjs模拟数据</h2><p>1.项目src目录下创建mock文件夹</p><p>2.准备json数组数据（在mock文件夹中创建相应的JSON文件）</p><p>3.把mock数据需要的图片放到public文件夹中【public文件夹在打包的时候，会把相应的资源原封不动的打包到dist文件夹中】</p><p>4.创建mockServe.js，通过mockjs插件实现数据的模拟</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//引入mockjs模块</span><br>import Mock from &#x27;mockjs&#x27;;<br>import banner from &#x27;./baaners.json&#x27;<br>import floor from &#x27;./baaners.json&#x27;<br><br><span class="hljs-comment">//mock数据：第一个参数为请求地址  第二个参数为请求数据</span><br>Mock.mock(&quot;/mock/banner&quot;,&#123;code:200,data:banner&#125;)<br>Mock.mock(&quot;/mock/floor&quot;,&#123;code:200,data:floor&#125;)<br></code></pre></td></tr></table></figure><p>5.main.js入口文件中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入MockServer.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/mock/mockServer&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="18-使用swiper实现轮播图效果"><a href="#18-使用swiper实现轮播图效果" class="headerlink" title="18.使用swiper实现轮播图效果"></a>18.使用swiper实现轮播图效果</h2><p>1.引入相应的依赖包</p><p>2.确保页面中已经有需要的结构</p><p>3.初始化swiper实例（需要确保此时页面中已经有完整的结构），给轮播图添加动态效果</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2021/12/23/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/12/23/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><h3 id="1-getPriority-setPriority"><a href="#1-getPriority-setPriority" class="headerlink" title="1.getPriority()/setPriority()"></a>1.getPriority()/setPriority()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 线程的优先级越高，获得cpu时间片的机会就越多</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPriority</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>         ThreadPriority tp = <span class="hljs-keyword">new</span> ThreadPriority();<br>         <span class="hljs-comment">//获取线程优先级</span><br>        <span class="hljs-keyword">int</span> priority = tp.getPriority();<br>        System.out.println(priority);<br><br>        <span class="hljs-comment">//设置线程优先级</span><br>        tp.setPriority(Thread.MAX_PRIORITY);<br><br>        priority = tp.getPriority();<br>        System.out.println(priority);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-join"><a href="#2-join" class="headerlink" title="2. join()"></a>2. join()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JoinThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(getName()+<span class="hljs-string">&quot;  run...&quot;</span>+i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        JoinThread joinThread0 = <span class="hljs-keyword">new</span> JoinThread();<br>        JoinThread joinThread1 = <span class="hljs-keyword">new</span> JoinThread();<br><br>        joinThread0.start();<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * join()</span><br><span class="hljs-comment">        * 等待该线程执行完毕后再执行join()后面的语句</span><br><span class="hljs-comment">         */</span><br>        joinThread0.join();<br>        joinThread1.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;  run...&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-sleep"><a href="#3-sleep" class="headerlink" title="3.sleep()"></a>3.sleep()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程休眠</span><br><span class="hljs-comment"> *      静态方法Thread类中的sleep()方法，让当前线程休眠指定的毫秒值</span><br><span class="hljs-comment"> *      时间到了之后，自动继续执行</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadSleep</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-comment">//线程休眠</span><br>            Thread.sleep(<span class="hljs-number">200</span>);<br>            System.out.println(<span class="hljs-string">&quot;main...&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-yield"><a href="#4-yield" class="headerlink" title="4.yield()"></a>4.yield()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程的让步</span><br><span class="hljs-comment"> * 方法Thread类中的静态方法yield()</span><br><span class="hljs-comment"> * 方法写在哪个线程中，哪个线程就会让出自己的cpu资源</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadYield</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;  run...&quot;</span>+i);<br>        &#125;<br>        <span class="hljs-comment">//执行让步功能</span><br>        Thread.yield();<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ThreadYield threadYield0 = <span class="hljs-keyword">new</span> ThreadYield();<br>        ThreadYield threadYield1 = <span class="hljs-keyword">new</span> ThreadYield();<br><br>        threadYield0.start();<br>        threadYield1.start();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-setDaemon"><a href="#5-setDaemon" class="headerlink" title="5. setDaemon()"></a>5. setDaemon()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 守护线程，后台线程</span><br><span class="hljs-comment"> * Thread类中的非静态方法setDaemon()</span><br><span class="hljs-comment"> * 当程序中运行的所有线程都是守护线程的时候，JVM自动退出</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 守护线程：</span><br><span class="hljs-comment"> *  当非守护线程结束后，守护线程也结束</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDaemon</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;run.....&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        ThreadDaemon threadDaemon = <span class="hljs-keyword">new</span> ThreadDaemon();<br>        <span class="hljs-comment">//设置为守护线程,必须在start()方法调用前设置</span><br>        threadDaemon.setDaemon(<span class="hljs-keyword">true</span>);<br>        threadDaemon.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-wait-和notify"><a href="#6-wait-和notify" class="headerlink" title="6.wait()和notify()"></a>6.wait()和notify()</h3><p>wait()和notify()都是Object类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.practice;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br>    String name;<br>    String sex;<br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-comment">//定义生产者线程，对学生中的成员变量赋值</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    Student s;<br><br>    Product(Student s)&#123;<br>        <span class="hljs-keyword">this</span>.s = s;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (s)&#123;<br>                <span class="hljs-keyword">if</span> (s.flag)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        s.wait();<span class="hljs-comment">//wait()和notify()阻塞和唤醒的对象都必须是同一把锁的对象</span><br>                        <span class="hljs-comment">//所以需要在前面指定由锁对象调用</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>                    s.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>                    s.sex = <span class="hljs-string">&quot;男&quot;</span>;<br>                    s.flag = <span class="hljs-keyword">true</span>;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                    s.name = <span class="hljs-string">&quot;李四&quot;</span>;<br>                    s.sex = <span class="hljs-string">&quot;女&quot;</span>;<br>                    s.flag = <span class="hljs-keyword">true</span>;<br>                &#125;<br>                s.flag = <span class="hljs-keyword">true</span>;<br>                flag++;<br>                s.notify();<br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义消费者线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    Student s;<br><br>    Customer(Student s)&#123;<br>        <span class="hljs-keyword">this</span>.s = s;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (s)&#123;<br>                <span class="hljs-keyword">if</span> (!s.flag) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        s.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                System.out.println(s.name+<span class="hljs-string">&quot;...&quot;</span>+s.sex);<br>                s.flag = <span class="hljs-keyword">false</span>;<br>                s.notify();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceThread</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Product(student)).start();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Customer(student)).start();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>将synchronized关键字放在方法前进行优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.practice;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(String name,String sex)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">this</span>.notify();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(name+<span class="hljs-string">&quot;...&quot;</span>+sex);<br>        flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">this</span>.notify();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//定义生产者线程，对学生中的成员变量赋值</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    Student s;<br><br>    Product(Student s)&#123;<br>        <span class="hljs-keyword">this</span>.s = s;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">if</span>(flag%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)&#123;<br>                   s.set(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                    s.set(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>                &#125;<br>                flag++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义消费者线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    Student s;<br><br>    Customer(Student s)&#123;<br>        <span class="hljs-keyword">this</span>.s = s;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                s.get();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SourceThread</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Product(student)).start();<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Customer(student)).start();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.practice;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现定时器</span><br><span class="hljs-comment"> * Timer构造方法</span><br><span class="hljs-comment"> *  Timer(boolean isDaemon) ,这里要填false，含义为不设置为守护进程</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * void schedule(TimerTask task, Date firstTime, long period)</span><br><span class="hljs-comment"> * 参数period为周期性运行任务的间隔时间，若不加这个参数则任务只会被运行一次</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimerDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个Timer对象就是新启动了一个线程</span><br>        Timer timer = <span class="hljs-keyword">new</span> Timer(<span class="hljs-keyword">false</span>);<br>        timer.schedule(<span class="hljs-keyword">new</span> TimerTask() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;定时器&quot;</span>);<br>            &#125;<br>        &#125;,<span class="hljs-keyword">new</span> Date(),<span class="hljs-number">2000</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><p>当计划时间早于当前时间，则任务立即被执行</p></li><li><p>TimerTask 是以队列的方式一个一个被顺序运行的，因为前面的任务可能消耗的时间较长，则后面的任务运行的时间会被延迟。延迟的任务具体开始的时间，就是依据前面任务的”结束时间”</p></li><li><p><strong>schedule(TimerTask task,long delay)</strong> 当前的时间为参考时间，在此时间基础上延迟制定的毫秒数后执行一次TimerTask任务。</p></li><li><p><strong>schedule(TimerTask task,long delay,long period)</strong> 当前的时间为参考时间，在此基础上延迟制定的毫秒数，再以某一间隔时间无限次数地执行某一任务。</p></li><li><p><strong>Timer的cancel()</strong> 和 <strong>TimerTask的cancel()</strong> 的区别？</p><p>​        前面提到任务的执行是以对列的方式一个个被顺序执行的，TimerTask.cancel() 指的是 把当前任务从任务对列里取消。Timer.cancel() 值的是把当前任务队列里的所有任务都取消。值得注意的是，Timer 的cancel()有时并不一定会停止执行计划任务，而是正常执行。这是因为Timer类中的cancel()方法有时并没有争抢到queue锁，所以TimerTask类中的任务继续正常执行。</p></li></ol><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><h3 id="继承Thread类实现："><a href="#继承Thread类实现：" class="headerlink" title="继承Thread类实现："></a><strong>继承Thread类实现：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThreadTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;当前运行的线程是&quot;</span>+Thread.currentThread().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    MyThreadTest myThreadTest = <span class="hljs-keyword">new</span> MyThreadTest();<br>        myThreadTest.start();<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="实现Runnable接口："><a href="#实现Runnable接口：" class="headerlink" title="实现Runnable接口："></a><strong>实现Runnable接口：</strong></h3><p>相比继承Thread类来说，有以下优点：</p><ul><li><p>​    避免了单继承的局限性</p></li><li><p>​    实现了数据的共享</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 100张售票</span><br><span class="hljs-comment"> * 线程采用实现接口方式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 实现接口方式与继承方式的差别</span><br><span class="hljs-comment"> *  实现接口方式可以避免单继承局限性</span><br><span class="hljs-comment"> *  实现接口方式让线程中的数据共享</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTicketsInterf</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tickets = <span class="hljs-number">100</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>         <span class="hljs-keyword">while</span>(tickets&gt;<span class="hljs-number">0</span>)&#123;<br>             System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;出售第&quot;</span>+tickets-- );<br>         &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建Thread类对象，传递Runnable接口到Thread类中</span><br>        ThreadTicketsInterf threadTicketsInterf = <span class="hljs-keyword">new</span> ThreadTicketsInterf();<br>        Thread thread0 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br><br>        thread0.start();<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Callable实现线程"><a href="#Callable实现线程" class="headerlink" title="Callable实现线程"></a>Callable实现线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">//1.重写Callable接口方法</span><br>        Callable&lt;Integer&gt; callable = <span class="hljs-keyword">new</span> Callable&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>                    result += i;<br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;我是线程&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;,我的结果为&quot;</span>+result);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;;<br>        HashSet&lt;FutureTask&lt;Integer&gt;&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">//将Callable传给futureTask</span><br>            FutureTask&lt;Integer&gt; futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(callable);<br>            set.add(futureTask);<br>            <span class="hljs-keyword">new</span> Thread(futureTask,<span class="hljs-string">&quot;T&quot;</span>+i).start();<br>        &#125;<br>        <span class="hljs-keyword">int</span> allResult = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (FutureTask&lt;Integer&gt; futureTask: set<br>             ) &#123;<br>            allResult += futureTask.get();<span class="hljs-comment">//获取计算完毕后的结果</span><br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最终结果为：&quot;</span>+allResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * java中对象成有默认分组，组名为main</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadGroupDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ThreadGroupDemo threadGroupDemo = <span class="hljs-keyword">new</span> ThreadGroupDemo();<br>        Thread thread = <span class="hljs-keyword">new</span> Thread(threadGroupDemo);<br>        <span class="hljs-comment">//返回当前线程所在的线程组对象</span><br>        ThreadGroup threadGroup = thread.getThreadGroup();<br>        <span class="hljs-comment">//获取线程组名字</span><br>        String threadGroupName = threadGroup.getName();<br>        System.out.println(threadGroupName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="变量安全问题"><a href="#变量安全问题" class="headerlink" title="变量安全问题"></a>变量安全问题</h2><h3 id="synchronized代码块"><a href="#synchronized代码块" class="headerlink" title="synchronized代码块"></a><strong>synchronized代码块</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//lock为一个对象</span><br><span class="hljs-keyword">synchronized</span>(lock)&#123;<br>    <span class="hljs-comment">//线程操作的共享数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>原理：</strong>当运行到synchronized代码块时，判断同步中的锁有没有被使用，如果没有被使用则获取这个锁，进入同步代码块中。</p><p>当其他线程在同步代码块外时，获取不到这个锁也就不会执行代码块中的。</p><p>当代码块中的代码执行完后会释放锁，别的线程就可以获取了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.practice;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 100张售票</span><br><span class="hljs-comment"> * 线程采用实现接口方式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 实现接口方式与继承方式的差别</span><br><span class="hljs-comment"> *  实现接口方式可以避免单继承局限性</span><br><span class="hljs-comment"> *  实现接口方式让线程中的数据共享</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  使用同步技术，保证线程的安全</span><br><span class="hljs-comment"> *  同步技术：为了保证共享的数据，同一时刻只有一个线程在操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  关键字 synchronized</span><br><span class="hljs-comment"> *      synchronized(任意对象)&#123;</span><br><span class="hljs-comment"> *          线程操作的共享数据</span><br><span class="hljs-comment"> *      &#125;</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTicketsInterf</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tickets = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> Object  obj = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>             <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                 <span class="hljs-keyword">synchronized</span> (obj)&#123;<span class="hljs-comment">//可以直接传this对象</span><br>                        <span class="hljs-keyword">if</span>(tickets&gt;<span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Thread.sleep(<span class="hljs-number">10</span>);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;出售第&quot;</span>+tickets-- );<br>                    &#125;<br>                 &#125;<br>             &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建Thread类对象，传递Runnable接口到Thread类中</span><br>        ThreadTicketsInterf threadTicketsInterf = <span class="hljs-keyword">new</span> ThreadTicketsInterf();<br>        Thread thread0 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br><br>        thread0.start();<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可使用Lock代替synchronized关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.practice;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 100张售票</span><br><span class="hljs-comment"> * 线程采用实现接口方式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 实现接口方式与继承方式的差别</span><br><span class="hljs-comment"> *  实现接口方式可以避免单继承局限性</span><br><span class="hljs-comment"> *  实现接口方式让线程中的数据共享</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  使用同步技术，保证线程的安全</span><br><span class="hljs-comment"> *  同步技术：为了保证共享的数据，同一时刻只有一个线程在操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  关键字 synchronized</span><br><span class="hljs-comment"> *      synchronized(任意对象)&#123;</span><br><span class="hljs-comment"> *          线程操作的共享数据</span><br><span class="hljs-comment"> *      &#125;</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTicketsInterf</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tickets = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> Object  obj = <span class="hljs-keyword">new</span> Object();<br>    Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><br>             <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                        lock.lock();<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>                                Thread.sleep(<span class="hljs-number">10</span>);<br><br>                                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;出售第&quot;</span> + tickets--);<br>                            &#125;<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                            System.out.println(e);<br>                        &#125;<br>                        <span class="hljs-keyword">finally</span> &#123;<br>                            lock.unlock();           <br>                        &#125;<br>                 <br>             &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建Thread类对象，传递Runnable接口到Thread类中</span><br>        ThreadTicketsInterf threadTicketsInterf = <span class="hljs-keyword">new</span> ThreadTicketsInterf();<br>        Thread thread0 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br>        Thread thread1 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br>        Thread thread2 = <span class="hljs-keyword">new</span> Thread(threadTicketsInterf);<br><br>        thread0.start();<br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="多个线程同时运行："><a href="#多个线程同时运行：" class="headerlink" title="多个线程同时运行："></a><strong>多个线程同时运行：</strong></h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>    Runnable runnable = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Runnable()</span> &#123;<br>        @Override<br>        public void run<span class="hljs-literal">()</span> &#123;<br>             num--;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;--&gt;&quot;</span>+num);<br>        &#125;<br>    &#125;;<br>    Thread thread1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">runnable</span>)</span>;<br>    Thread thread2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">runnable</span>)</span>;<br>    Thread thread3 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">runnable</span>)</span>;<br>    thread1.start<span class="hljs-literal">()</span>;<br>    thread2.start<span class="hljs-literal">()</span>;<br>    thread3.start<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/2021/12/23/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Users\hp\AppData\Roaming\Typora\typora-user-images\image-20210225204333430.png" alt="image-20210225204333430"></p><p><strong>利用synchronized关键字解决：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">在run方法前加入<span class="hljs-keyword">synchronized</span>关键字<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>     num--;<br>    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+num);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>synchronized的作用就是让一个线程执行完毕后再让另外一个线程执行。</strong></p><p><strong>run()方法中的变量是安全的，每个线程中的相同变量之间没有联系</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Override<br><span class="hljs-built_in">public</span> synchronized <span class="hljs-type">void</span> run() &#123;<br>    String <span class="hljs-keyword">temp</span> = &quot;ABC&quot;;//开启多个线程，<span class="hljs-keyword">temp</span>互不影响<br>     num<span class="hljs-comment">--;</span><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+&quot;--&gt;&quot;+num);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Runnable接口实现类中的成员变量是不安全的，因为只创建了一个Runnable实现类由多个线程共用，操作的都是同一个变量。可以加synchronized解决</strong></p><p><strong>若用类继承Thread创建多个线程，则synchronized无效，因为每个线程需要的锁都不一样，每个线程都拿到了自己的锁(当前线程实例对象)，从而可以同时执行并操作变量。</strong></p><p>解决：</p><p>当在static方法上加synchronized后，锁的钥匙就变成了当前对象的MimlThread.Class,只有一份，</p><p>若不是静态方法，则锁是本类对象（this）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MimlTest</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MimlThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">plusNum</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                num++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            plusNum();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        MimlThread t1 = <span class="hljs-keyword">new</span> MimlThread();<br>        MimlThread t2 = <span class="hljs-keyword">new</span> MimlThread();<br>        MimlThread t3 = <span class="hljs-keyword">new</span> MimlThread();<br>        MimlThread t4 = <span class="hljs-keyword">new</span> MimlThread();<br>        t1.start();<br>        t2.start();<br>        t3.start();<br>        t4.start();<br>        Thread.sleep(<span class="hljs-number">5000</span>);<span class="hljs-comment">//等待结果计算完成</span><br>        System.out.println(num);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注：当线程抛出异常后，锁会被自动释放，可以被其他线程使用。</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><img src="/2021/12/23/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20211223190638506.png" class title="线程的生命周期">]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
      <tag>锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven基本使用</title>
    <link href="/2021/12/22/Maven%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/22/Maven%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven基本使用"><a href="#Maven基本使用" class="headerlink" title="Maven基本使用"></a>Maven基本使用</h1><h2 id="一、Maven简介"><a href="#一、Maven简介" class="headerlink" title="一、Maven简介"></a>一、Maven简介</h2><h3 id="1-Maven能够做什么？"><a href="#1-Maven能够做什么？" class="headerlink" title="1.Maven能够做什么？"></a>1.Maven能够做什么？</h3><p>1）项目的自动构建，帮助开发人员进行项目的编译、测试、打包、安装和部署。</p><p>2）管理项目的依赖</p><h3 id="2-Maven中的概念"><a href="#2-Maven中的概念" class="headerlink" title="2.Maven中的概念"></a>2.Maven中的概念</h3><ol><li>Pom</li><li>约定的目录结构</li><li>坐标</li><li>依赖管理</li><li>仓库管理</li><li>生命周期</li><li>插件和目标</li><li>继承</li><li>聚合 </li></ol><h3 id="3-Maven安装"><a href="#3-Maven安装" class="headerlink" title="3.Maven安装"></a>3.Maven安装</h3><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a> 下载zip文件后解压。</p><p>安装：</p><p>​    1.确定java环境变量配置成功，包括JAVA_HOME环境变量</p><p>​    2.解压缩zip文件，解压路径不要带有中文和空格</p><p>​    3.将maven安装目录下的bin文件夹添加到系统变量path中</p><p>​    4.测试maven是否安装完成。命令行执行mvn -v</p><h2 id="二、Maven核心概念"><a href="#二、Maven核心概念" class="headerlink" title="二、Maven核心概念"></a>二、Maven核心概念</h2><h3 id="2-1-约定的目录结构"><a href="#2-1-约定的目录结构" class="headerlink" title="2.1 约定的目录结构"></a>2.1 约定的目录结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">HelloWorld<br>--src<br>--main<span class="hljs-comment">//主程序目录</span><br>--java<span class="hljs-comment">//源代码</span><br>--resources<span class="hljs-comment">//配置文件目录</span><br>--test<br>--java<span class="hljs-comment">//测试代码</span><br>--resources<span class="hljs-comment">//测试所需配置文件目录</span><br>--pom.xml<span class="hljs-comment">//maven配置文件</span><br>    <br>    <span class="hljs-comment">//pom.xml与src文件夹平级</span><br></code></pre></td></tr></table></figure><h3 id="2-2-pom文件"><a href="#2-2-pom文件" class="headerlink" title="2.2 pom文件"></a>2.2 pom文件</h3><p>即Project Object Model项目对象模型。Maven把一个项目的结构和内容抽象成一个模型，在xml文件中进行声明，方便进行构建和描述。</p><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span> = <span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span> = <span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span> = <span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-tag"><span class="hljs-string">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 模型版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 公司或者组织的唯一标志，常使用公司域名的倒写，也是打包成jar包路径的依据 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 例如com.companyname.project-group，maven打包jar包的路径：/com/companyname/project-group --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.companyname.project-group<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--项目产生的构件类型，包括jar、war、ear、pom等 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-坐标"><a href="#2-3-坐标" class="headerlink" title="2.3 坐标"></a>2.3 坐标</h3><p>坐标由 groupId，artifactId，version三个属性组成，在maven中，坐标值是唯一的，通过这三个属性可以唯一确定一个资源。</p><p><strong>注意：</strong>当版本号中带有-SNAPSHOT时，表示快照，说明这是一个不稳定的版本。</p><p>GAV在何处使用？</p><p>1.每个maven项目需要指定自己的GAV</p><p>2.管理依赖时，使用其它jar包，需要使用GAV来标识。</p><h3 id="2-4-依赖"><a href="#2-4-依赖" class="headerlink" title="2.4 依赖"></a>2.4 依赖</h3><p>指项目中所需使用的其他资源（jar），需要通过gav来具体指明一个依赖。</p><p><strong>Maven仓库地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></strong></p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0.Alpha1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>依赖范围：</strong></p><p>使用scope表示依赖的范围，指明依赖在项目构建的哪个阶段起作用。</p><p>compile：默认，参与构建项目的所有阶段    </p><p>test: 只在测试阶段起作用，比如mvn test</p><p>provided：项目在部署到服务器时，不需要提供这个依赖的jar，而是由服务器提供这个jar包。</p><h3 id="2-5-仓库"><a href="#2-5-仓库" class="headerlink" title="2.5 仓库"></a>2.5 仓库</h3><p>maven仓库中存放的是：</p><p>​    1.maven工具自己的jar包</p><p>​    2.第三方的jar，比如mysql驱动等</p><p>​    3.自己写的程序打包而成的jar</p><p>仓库分类:</p><p>​    1.本地仓库：默认位于系统盘当前用户目录下的./m2/repository，可以修改maven配置文件进行更改。配置文件settings.xml位于maven安装目录下的conf文件夹下。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>E:\apache-maven-3.8.4\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-6-Maven-的生命周期、插件和命令"><a href="#2-6-Maven-的生命周期、插件和命令" class="headerlink" title="2.6 Maven 的生命周期、插件和命令"></a>2.6 Maven 的生命周期、插件和命令</h3><p>指项目构建的各个阶段，包括清理、编译、测试、报告、打包、安装和部署。</p><p><strong>命令：</strong>执行maven功能需要通过命令来发出。</p><p><strong>插件：</strong> 命令发出后由插件进行执行，插件实际上也是jar</p><p><strong>常用命令：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">mvn clean#删除已经编译和测试的目录，即target目录，但是已经install到本地仓库的包不会删除<br>mvn compile#编译主程序，会在当前目录下生成一个target目录，里面存放主程序编译后的字节码文件<br>mvn package#打包主程序，会编译、编译测试、测试，并且按照pom.xml文件中指定的打包方式生成jar或者war包<br>mvn install#安装主程序，会把工程打包，并按照工程坐标保存到本地仓库中<br>mvn test#测试，会生成一个surefire-reports目录，里面保存测试结果<br>mvn test-compile #编译测试程序，会在当前目录下生成一个target目录，里面存放测试程序编译后的字节码文件<br>mvn deploy#部署主程序，会把工程打包，并按照工程的坐标保存到本地仓库和私服仓库中。还会自动把项目部署到web容器中。<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1.compile编译命令会将src/main/java目录中的java代码编译为class文件，并将生成的文件拷贝到target、classes目录。这个目录是存放类文件的根目录（也叫做类路径，classpath）</p><p>2.maven-resources-plugin插件的功能是将src/main/resources资源目录下的的文件拷贝到target/classes目录下</p><h2 id="三、常用配置"><a href="#三、常用配置" class="headerlink" title="三、常用配置"></a>三、常用配置</h2><h3 id="3-1-常用插件配置"><a href="#3-1-常用插件配置" class="headerlink" title="3.1 常用插件配置"></a>3.1 常用插件配置</h3><p>若要指定插件版本号等信息，可在pom.xml文件中进行配置</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置构建项目相关的内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugins<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-comment">&lt;!--指定编译代码的jdk版本 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><span class="hljs-comment">&lt;!--指定java程序使用的jdk版本 --&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>properties中的基本配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-全局变量"><a href="#3-2-全局变量" class="headerlink" title="3.2 全局变量"></a>3.2 全局变量</h3><p>​        在properties标签中定义标签，这个标签就是一个变量，标签的文本就是变量的值。使用全局变量可以表示多个依赖使用的版本号。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自定义变量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用变量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-使用资源插件过滤"><a href="#3-3-使用资源插件过滤" class="headerlink" title="3.3 使用资源插件过滤"></a>3.3 使用资源插件过滤</h3><p>​    处理的配置文件的信息，以下是maven的默认处理：</p><ul><li><p>maven会把src/main/resources目录中的文件拷贝到target/classes目录下</p></li><li><p>maven只处理src/main/java目录中的.java文件，而不处理其它文件</p><p>若要处理src/main/java目录中的.properties，.xml文件，需要在pom.xml文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pom</tag>
      
      <tag>maven</tag>
      
      <tag>dependencies</tag>
      
      <tag>xml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次swagger扫描接口缺少问题</title>
    <link href="/2021/12/18/%E8%AE%B0%E4%B8%80%E6%AC%A1swagger%E6%89%AB%E6%8F%8F%E6%8E%A5%E5%8F%A3%E7%BC%BA%E5%B0%91%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/18/%E8%AE%B0%E4%B8%80%E6%AC%A1swagger%E6%89%AB%E6%8F%8F%E6%8E%A5%E5%8F%A3%E7%BC%BA%E5%B0%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次swagger扫描接口缺少问题"><a href="#记一次swagger扫描接口缺少问题" class="headerlink" title="记一次swagger扫描接口缺少问题"></a>记一次swagger扫描接口缺少问题</h1><p>首先项目中有两种类型的接口：</p><p><strong>一种是不带有@RequiresAuthentication注解的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    @LogAnnotation(module = &quot;testModule&quot;,operation = &quot;testOperation&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value=&quot;项目信息表-根据id查询项目信息&quot;, notes=&quot;项目信息表-根据id查询项目信息&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/getProjectInfo&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">getProjectInfo</span><span class="hljs-params">(String id)</span></span>&#123;<br>        BizProjectInfo projectInfo = bizProjectInfoService.getById(Long.parseLong(id));<br><br>        <span class="hljs-keyword">return</span> Result.success(projectInfo);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>一种是带有@RequiresAuthentication</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@RequiresAuthentication<br>@<span class="hljs-constructor">ApiOperation(<span class="hljs-params">value</span>=<span class="hljs-string">&quot;用户信息表-根据id查询用戶信息&quot;</span>, <span class="hljs-params">notes</span>=<span class="hljs-string">&quot;用户信息表-根据id查询用戶信息&quot;</span>)</span><br>@<span class="hljs-constructor">GetMapping(<span class="hljs-string">&quot;/getUserInfo&quot;</span>)</span><br>public Result get<span class="hljs-constructor">UserInfo(String <span class="hljs-params">id</span>)</span>&#123;<br>    SysUser user = sysUserService.get<span class="hljs-constructor">ById(Long.<span class="hljs-params">parseLong</span>(<span class="hljs-params">id</span>)</span>);<br><br>    return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Result</span>.</span></span>success(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>问题描述，当在项目当中引入aop的依赖之后，带有@RequiresAuthentication注解的接口无法被swagger扫描到。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>起初一直以为是aop影响了swagger扫描接口，尝试许久后还是没有解决。</p><p>于是转而查询@RequiresAuthentication注解相关信息。发现了相关的问题。抱着试试的心态，在原来的ShiroConfig中添加了如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开启Shiro的注解(如<span class="hljs-doctag">@RequiresRoles</span>,<span class="hljs-doctag">@RequiresPermissions</span>)</span><br><span class="hljs-comment"> * 配置以下两个bean(DefaultAdvisorAutoProxyCreator和AuthorizationAttributeSourceAdvisor)即可实现此功能</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="hljs-title">advisorAutoProxyCreator</span><span class="hljs-params">()</span></span>&#123;<br>    DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = <span class="hljs-keyword">new</span> DefaultAdvisorAutoProxyCreator();<br>    advisorAutoProxyCreator.setProxyTargetClass(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">return</span> advisorAutoProxyCreator;<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="hljs-title">authorizationAttributeSourceAdvisor</span><span class="hljs-params">(SecurityManager securityManager)</span></span>&#123;<br>    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="hljs-keyword">new</span> AuthorizationAttributeSourceAdvisor();<br>    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);<br>    <span class="hljs-keyword">return</span> authorizationAttributeSourceAdvisor;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题解决！！！</p>]]></content>
    
    
    <categories>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次跨模块的Mapper注入失败问题</title>
    <link href="/2021/12/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E6%A8%A1%E5%9D%97%E7%9A%84Mapper%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E6%A8%A1%E5%9D%97%E7%9A%84Mapper%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="记一次跨模块的Mapper注入失败问题"><a href="#记一次跨模块的Mapper注入失败问题" class="headerlink" title="记一次跨模块的Mapper注入失败问题"></a>记一次跨模块的Mapper注入失败问题</h1><h3 id="1-首先展示一下项目结构"><a href="#1-首先展示一下项目结构" class="headerlink" title="1.首先展示一下项目结构"></a>1.首先展示一下项目结构</h3><img src="/2021/12/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E6%A8%A1%E5%9D%97%E7%9A%84Mapper%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20210819234644706.png" class title="目录结构"><h3 id="2-跨模块时包的引入"><a href="#2-跨模块时包的引入" class="headerlink" title="2.跨模块时包的引入"></a>2.跨模块时包的引入</h3><p>此项目需要在system模块中引入biz模块的controller等接口，所以需进行以下操作：</p><ol><li><p>​    在右侧Maven  biz模块下依次点击 clean  package   install三个按钮</p><img src="/2021/12/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E6%A8%A1%E5%9D%97%E7%9A%84Mapper%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20210819235104176.png" class title="点击clean,package,install"></li><li><p>在system模块的pom文件中添加biz模块的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jeecgframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jeecg-boot-biz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在system模块的启动程序上添加包扫描注解@ComponentScan()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//com.yangtze为biz模块下的包，若前面的依赖导入失败，此处会爆红</span><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;org.jeecg.*&quot;,&quot;com.yangtze.*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JeecgApplication</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当时完成到这一步我以为已经差不多应该行了，结果启动主程序后直接报错了，大意就是说**Mapper这个类找不到，无法注入.</p><img src="/2021/12/18/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B7%A8%E6%A8%A1%E5%9D%97%E7%9A%84Mapper%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/image-20210819235907758.png" class title="点击clean,package,install"></li><li><p>接下来就是漫长的排错过程，在经历了  <strong>改变xml文件的路径</strong>，<strong>更改application.yml文件中的mybatis-plus.mapper-locations路径</strong>等等的尝试过后，项目依然报错。。。。</p></li><li><p>接下来仍然是查找原因ing，直到我想起来去config包下看看配置类看有没有什么解决办法，打开config包，扫了一眼，立马发现了一个起眼的类名MybatisPlusConfig。此时心中好像燃起了一丝希望，双击打开，第一眼看到的就是**@MapperScan()**这个注解，好的，不出意外，问题就出在这个了。于是添加了biz模块下对应的包名。重启程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages=&#123;&quot;org.jeecg.modules.**.mapper*&quot;,&quot;com.yangtze.**.mapper*&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ok！！！程序终于正常运行了！测试了一下插入操作，也可以正常插入！至此，问题完结，撒花！！！</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>疑难杂症</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MybatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库基础笔记</title>
    <link href="/2021/12/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="sql查询语句"><a href="#sql查询语句" class="headerlink" title="sql查询语句"></a>sql查询语句</h1><h2 id="表级约束列级约束"><a href="#表级约束列级约束" class="headerlink" title="表级约束列级约束"></a>表级约束列级约束</h2><p>列级约束有六种：主键Primary key、外键foreign key 、唯一 unique、检查 checck 、默认default 、非空/空值 not null/ null<br>表级约束有四种：主键、外键、唯一、检查</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">primary</span> key,<span class="hljs-comment">/*列级约束*/</span><br>    sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course(<br>cno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">primary</span> key,<br>    cname <span class="hljs-type">char</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    cpno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br>    <span class="hljs-keyword">foreign</span> key(cpno) <span class="hljs-keyword">references</span> course(cno)<span class="hljs-comment">/*表级约束*/</span><br>);<br><br></code></pre></td></tr></table></figure><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="1-外连接"><a href="#1-外连接" class="headerlink" title="1.外连接"></a>1.外连接</h3><p>​    左外连接（列出左边所有元组）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Student.sno,sname,ssex,sage,sdept,cno,grade <br><span class="hljs-keyword">from</span> Student <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> SC <span class="hljs-keyword">on</span>(student.sno<span class="hljs-operator">=</span>sc.sno);<br></code></pre></td></tr></table></figure><p>​    右外连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Student.sno,sname,ssex,sage,sdept,cno,grade<br><span class="hljs-keyword">from</span> Student <span class="hljs-keyword">right</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> SC <span class="hljs-keyword">on</span>(student.sno<span class="hljs-operator">=</span>sc.sno);<br></code></pre></td></tr></table></figure><h3 id="2-多表连接"><a href="#2-多表连接" class="headerlink" title="2.多表连接"></a>2.多表连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Student.sno,sname,cname,grade <span class="hljs-keyword">from</span> student,course,sc<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span>sc.sno <span class="hljs-keyword">and</span> sc.cno<span class="hljs-operator">=</span>course.cno;<br></code></pre></td></tr></table></figure><h3 id="3-嵌套查询"><a href="#3-嵌套查询" class="headerlink" title="3.嵌套查询"></a>3.嵌套查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Sname <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>);<br></code></pre></td></tr></table></figure><p>查询选修了数据库的学生的学号和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> cname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库&#x27;</span>;<br><br><span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> cname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库);</span><br><span class="hljs-string"></span><br><span class="hljs-string">select sno,sname from student</span><br><span class="hljs-string">where sno in (select sno from sc</span><br><span class="hljs-string">where cno in (select cno from course</span><br><span class="hljs-string">where cname=&#x27;</span>数据库<span class="hljs-string">&#x27;));</span><br></code></pre></td></tr></table></figure><p>用连接查询解决：p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Student.sno,sname <span class="hljs-keyword">from</span> Student,course,sc<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> course.cno<span class="hljs-operator">=</span> sc.cno<br><span class="hljs-keyword">and</span> course.cname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据库&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="4-相关子查询"><a href="#4-相关子查询" class="headerlink" title="4.相关子查询"></a>4.相关子查询</h3><p>找出每个学生超过自己选修课平均成绩的课程号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Sno,cno <span class="hljs-keyword">from</span> sc x<br><span class="hljs-keyword">where</span> grade<span class="hljs-operator">&gt;=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade) <span class="hljs-keyword">from</span> sc y <br>              <span class="hljs-keyword">where</span> y.sno<span class="hljs-operator">=</span>x.sno);<br></code></pre></td></tr></table></figure><h3 id="5-带有exists谓词的子查询"><a href="#5-带有exists谓词的子查询" class="headerlink" title="5.带有exists谓词的子查询"></a>5.带有exists谓词的子查询</h3><p>​    查询所有选修了1号课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> (<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sc<br>    <span class="hljs-keyword">where</span> sno<span class="hljs-operator">=</span>student.sno<br>    <span class="hljs-keyword">and</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>另一种方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname <span class="hljs-keyword">from</span> sc,student<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span>sc.sno<br><span class="hljs-keyword">and</span> sc.cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="6-基于派生表的查询"><a href="#6-基于派生表的查询" class="headerlink" title="6.基于派生表的查询"></a>6.基于派生表的查询</h3><p>​    查询所有选修了1号课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname <br><span class="hljs-keyword">from</span> student,(<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">as</span> SC1<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span>sc1.sno;<br></code></pre></td></tr></table></figure><h2 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h2><h3 id="1-插入一条数据"><a href="#1-插入一条数据" class="headerlink" title="1.插入一条数据"></a>1.插入一条数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(sno,sname,ssex,sdept,sage)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;201215129&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;IS&#x27;</span>,<span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><h3 id="2-插入子查询结果"><a href="#2-插入子查询结果" class="headerlink" title="2.插入子查询结果"></a>2.插入子查询结果</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Dept_age(<br>Sdept <span class="hljs-type">char</span>(<span class="hljs-number">15</span>),<br>    Avg_age <span class="hljs-type">smallint</span><br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Dept_age(Sdept,avg_age) <br><span class="hljs-keyword">select</span> Sdept,<span class="hljs-built_in">avg</span>(sage) <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sdept; <br></code></pre></td></tr></table></figure><h3 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3.修改数据"></a>3.修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">update student <br><span class="hljs-keyword">set</span> sage<span class="hljs-operator">=</span> <span class="hljs-number">24</span><br><span class="hljs-keyword">where</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;201215121&#x27;</span>; <br></code></pre></td></tr></table></figure><p>带子查询的修改语句（mysql不支持）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">update student<br><span class="hljs-keyword">set</span> sage<span class="hljs-operator">=</span>sage<span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> student<br>    <span class="hljs-keyword">where</span> sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cs&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><h3 id="1-删除某个元祖"><a href="#1-删除某个元祖" class="headerlink" title="1.删除某个元祖"></a>1.删除某个元祖</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;201215121&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="2-带子查询的删除语句（mysql不支持）"><a href="#2-带子查询的删除语句（mysql不支持）" class="headerlink" title="2.带子查询的删除语句（mysql不支持）"></a>2.带子查询的删除语句（mysql不支持）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> grade <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> grade <span class="hljs-keyword">from</span> sc <br><span class="hljs-keyword">where</span> grade<span class="hljs-operator">&gt;</span><span class="hljs-number">91</span>); <br></code></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="1-视图创建"><a href="#1-视图创建" class="headerlink" title="1.视图创建"></a>1.视图创建</h3><p>建立计算机科学系选修了1号课程的学生的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_S1(sno,sname,grade)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> student.sno,sname,grade<br><span class="hljs-keyword">from</span> student,sc<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span>sc.sno<br><span class="hljs-keyword">and</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">and</span> sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cs&#x27;</span>;<br></code></pre></td></tr></table></figure><p>建立信息系学生视图，并要求进行修改和插入操作时仍需保证视图有信息系的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_student<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno,sname,sage<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;is&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option;<br></code></pre></td></tr></table></figure><p>视图可以建立在另外的视图上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_s2<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno,sname,grade<br><span class="hljs-keyword">from</span>  is_s1<br><span class="hljs-keyword">where</span> grade<span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><p><strong>带虚拟列的视图</strong></p><p>定义一个反映学生出生年份的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> BT_S(sno,sname,Sbirth)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno,sname,<span class="hljs-number">2020</span><span class="hljs-operator">-</span>sage<br><span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p>带group by子句的视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> S_G(sno,Gavg)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> F_Student(F_sno,name,Sex,age,dept)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> ssex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="2-删除视图"><a href="#2-删除视图" class="headerlink" title="2.删除视图"></a>2.删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> is_s2 cascade;<span class="hljs-comment">/*级联删除语句*/</span><br></code></pre></td></tr></table></figure><h3 id="3-查询视图"><a href="#3-查询视图" class="headerlink" title="3.查询视图"></a>3.查询视图</h3><p>注意某些视图查询可能会出现错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> s_g<br><span class="hljs-keyword">where</span> Gavg<span class="hljs-operator">&gt;</span><span class="hljs-number">86</span>;<br><br>s<span class="hljs-operator">-</span>G定义：<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> S_G(sno,Gavg)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno;<br><br>结合后查询语句为：<br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> <span class="hljs-built_in">avg</span>(grade)<span class="hljs-operator">&gt;</span><span class="hljs-number">86</span><span class="hljs-comment">/*where子句中不能使用聚集函数*/</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno;<br></code></pre></td></tr></table></figure><h3 id="4-更新视图"><a href="#4-更新视图" class="headerlink" title="4.更新视图"></a>4.更新视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">update is_student<br><span class="hljs-keyword">set</span> sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘辰&#x27;</span><br><span class="hljs-keyword">where</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;201215122&#x27;</span>;<br></code></pre></td></tr></table></figure><p>插入新记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> is_student<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;201215127&#x27;</span>,<span class="hljs-string">&#x27;赵新&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;is&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意：有些视图是不可转换为对基本表的更新的，例如平均成绩</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="1-建立索引"><a href="#1-建立索引" class="headerlink" title="1.建立索引"></a>1.建立索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index stusno <span class="hljs-keyword">on</span> student(sno);<span class="hljs-comment">/*学号升序唯一索引*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index coucno <span class="hljs-keyword">on</span> course(cno);<span class="hljs-comment">/*课程号升序唯一索引*/</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> index SCno <span class="hljs-keyword">on</span> SC(sno <span class="hljs-keyword">asc</span>,cno <span class="hljs-keyword">desc</span>);<span class="hljs-comment">/*学号升序，课程号降序唯一索引*/</span><br></code></pre></td></tr></table></figure><h3 id="2-修改索引"><a href="#2-修改索引" class="headerlink" title="2.修改索引"></a>2.修改索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> index SCno rename <span class="hljs-keyword">to</span> SCSno;<br><span class="hljs-keyword">alter</span>  <span class="hljs-keyword">table</span> SC rename index SCno <span class="hljs-keyword">to</span> SCsno;<span class="hljs-comment">/*mysql写法*/</span><br></code></pre></td></tr></table></figure><h3 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3.删除索引"></a>3.删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> index stusno;<br><span class="hljs-keyword">drop</span> index stusno <span class="hljs-keyword">on</span> student;<span class="hljs-comment">/*mysql写法*/</span><br></code></pre></td></tr></table></figure><h1 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h1><h2 id="用户的角色授权与回收"><a href="#用户的角色授权与回收" class="headerlink" title="用户的角色授权与回收"></a>用户的角色授权与回收</h2><h3 id="1-创建用户及用户授权"><a href="#1-创建用户及用户授权" class="headerlink" title="1.创建用户及用户授权"></a>1.创建用户及用户授权</h3><p>创建名为test1的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;test1&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">/*host – 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost,  如 果想让该用户可以从任意远程主机登陆,可以使用通配符% */</span><br></code></pre></td></tr></table></figure><p>把查询student表的权限授权给用户test1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> test1<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<span class="hljs-comment">/*该用户可以将权限授予别的用户*/</span><br></code></pre></td></tr></table></figure><p>把对student表和course表的所有权限授予用户test1，test2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges<br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student,course<span class="hljs-comment">/*mysql不支持这种写法，mysql只能写一个table*/</span><br><span class="hljs-keyword">to</span> test1,test2;<br></code></pre></td></tr></table></figure><p>把student表查询权限赋予所有用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> public;<span class="hljs-comment">/*mysql不支持*/</span><br></code></pre></td></tr></table></figure><p>把更新学号和查询student表的权限授予test3</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> update(sno),<span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> test3;<br></code></pre></td></tr></table></figure><h3 id="2-用户权限回收"><a href="#2-用户权限回收" class="headerlink" title="2.用户权限回收"></a>2.用户权限回收</h3><p>收回test3修改学号及查询student表的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> update(sno),<span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">from</span> test3;<br></code></pre></td></tr></table></figure><p>收回所有用户对表sc的查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> sc<br><span class="hljs-keyword">from</span> public;<br></code></pre></td></tr></table></figure><p>收回test3的insert权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> sc<br><span class="hljs-keyword">from</span> test3 cascade;<span class="hljs-comment">/*级联收回所有权限，mysql不用加cascade*/</span><br></code></pre></td></tr></table></figure><h2 id="角色的权限与回收"><a href="#角色的权限与回收" class="headerlink" title="角色的权限与回收"></a>角色的权限与回收</h2><h3 id="1-角色创建"><a href="#1-角色创建" class="headerlink" title="1.角色创建"></a>1.角色创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> role role_select;<br></code></pre></td></tr></table></figure><h3 id="2-给角色授权"><a href="#2-给角色授权" class="headerlink" title="2.给角色授权"></a>2.给角色授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> role_select;<br></code></pre></td></tr></table></figure><p>将一个角色授予其他的角色或用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> role1,role2<br><span class="hljs-keyword">to</span> role3,user1<span class="hljs-comment">/*role3的权限为role1，role2的总和*/</span><br><span class="hljs-keyword">with</span> admin option;<br></code></pre></td></tr></table></figure><h3 id="3-权限收回"><a href="#3-权限收回" class="headerlink" title="3.权限收回"></a>3.权限收回</h3><p>整体步骤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> role r1;<span class="hljs-comment">/*创建角色*/</span><br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,update,<span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> r1;<span class="hljs-comment">/*授予角色权限*/</span><br><br><span class="hljs-keyword">grant</span> r1<br><span class="hljs-keyword">to</span> user1;<span class="hljs-comment">/*将角色权限授予用户*/</span><br><br><span class="hljs-keyword">revoke</span> r1<br><span class="hljs-keyword">from</span> user1;<span class="hljs-comment">/*收回权限*/</span><br></code></pre></td></tr></table></figure><p>角色权限修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">delete</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">to</span> r1;<span class="hljs-comment">/*增加了delete权限*/</span><br><br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">from</span> r1;<span class="hljs-comment">/*减少了select权限*/</span><br></code></pre></td></tr></table></figure><h2 id="强制存取控制方法"><a href="#强制存取控制方法" class="headerlink" title="强制存取控制方法"></a>强制存取控制方法</h2><p><strong>主体：</strong>系统中的活动实体，包括数据库管理系统的实际用户，也包括代表用户的各进程。</p><p><strong>客体：</strong>系统中的被动实体，是受主体操纵的，包括文件、基本表、索引、视图等。</p><p><strong>敏感度标记：</strong>绝密（TS）、机密（S），可信（C），公开（P）。</p><p>主体的敏感度级别被称为<strong>许可证级别</strong></p><p>客体的敏感度级别被称为<strong>密级</strong></p><p>必须遵循如下规则：</p><p>​    1.仅当主体的许可证级别大于或等于客体的密级时，该主体才能读取相应的客体。</p><p>​    2.仅当主体的许可证级别小于或等于客体的密级时，改主体才能写相应的客体（避免使数据的密级由高流向低。P148）</p><h2 id="视图机制"><a href="#视图机制" class="headerlink" title="视图机制"></a>视图机制</h2><p>建立计算机系学生的视图，把select权限授予teacher1，所有权限授予teacher2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;teacher1&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;teacher2&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> CS_Student<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cs&#x27;</span>;<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">on</span> CS_Student<br><span class="hljs-keyword">to</span> teacher1;<br><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges<br><span class="hljs-keyword">on</span> CS_Student<br><span class="hljs-keyword">to</span> teacher2;<br></code></pre></td></tr></table></figure><h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><h3 id="AUDIT语句和NOAUDIT语句"><a href="#AUDIT语句和NOAUDIT语句" class="headerlink" title="AUDIT语句和NOAUDIT语句"></a>AUDIT语句和NOAUDIT语句</h3><p>对修改sc表结构或数据的操作进行审计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">audit <span class="hljs-keyword">alter</span>,update<br><span class="hljs-keyword">on</span> sc;<br></code></pre></td></tr></table></figure><p>取消对修改sc表结构或数据的操作进行审计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">noaudit <span class="hljs-keyword">alter</span>,update<br><span class="hljs-keyword">on</span> sc;<br></code></pre></td></tr></table></figure><h2 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h2><p>复习P150</p><h1 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h1><h2 id="1-实体完整性"><a href="#1-实体完整性" class="headerlink" title="1.实体完整性"></a>1.实体完整性</h2><p>关系模型实体完整性在create table 中用primary key定义，有以下两种方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">primary</span> key,<span class="hljs-comment">/*列级约束条件*/</span><br>    sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<br>    Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-keyword">primary</span> key(sno)<span class="hljs-comment">/*表级约束条件*/</span><br>);<br></code></pre></td></tr></table></figure><h2 id="2-参照完整性"><a href="#2-参照完整性" class="headerlink" title="2.参照完整性"></a>2.参照完整性</h2><p>关系模型参照完整性在create table 中用foreign key定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> sc(<br>Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    Cno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    grade <span class="hljs-type">smallint</span>,<br>    <span class="hljs-keyword">primary</span> key(Sno,Cno),<span class="hljs-comment">/*表级定义实体完整性*/</span><br>    <span class="hljs-keyword">foreign</span> key(Sno) <span class="hljs-keyword">references</span> Student(Sno),<span class="hljs-comment">/*表级定义参照完整性*/</span><br>    <span class="hljs-keyword">foreign</span> key(Cno) <span class="hljs-keyword">references</span> Course(Cno)<br>);<span class="hljs-comment">/*表级定义参照完整性*/</span><br></code></pre></td></tr></table></figure><p>参照完整性违约处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> sc(<br>Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    Cno <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    grade <span class="hljs-type">smallint</span>,<br>    <span class="hljs-keyword">primary</span> key(Sno,Cno),<br>    <span class="hljs-keyword">foreign</span> key(Sno) <span class="hljs-keyword">references</span> Student(Sno) <br>    <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> cascade <span class="hljs-comment">/*删除student表元组时，级联删除sc表中元组*/</span><br>    <span class="hljs-keyword">on</span> update cascade,<span class="hljs-comment">/*更新student表元组时，级联更新sc表中元组*/</span><br>    <span class="hljs-keyword">foreign</span> key(Cno) <span class="hljs-keyword">references</span> Course(Cno) <span class="hljs-keyword">on</span> <span class="hljs-keyword">delete</span> cascade <span class="hljs-keyword">on</span> update cascade<br>);<br></code></pre></td></tr></table></figure><h2 id="3-用户定义完整性"><a href="#3-用户定义完整性" class="headerlink" title="3.用户定义完整性"></a>3.用户定义完整性</h2><ul><li>列值非空（NOT NULL）</li><li>列值唯一（UNIQUE）</li><li>检查列值是否满足一个条件表达式（CHECK短语）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    Ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">check</span>(Ssex <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>))<br>    <br>   <span class="hljs-comment">/*grade smallint check(grade&gt;=0 and grade &lt;=100)*/</span><br>);<br></code></pre></td></tr></table></figure><p>元组上的约束条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>Sno <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">primary</span> key,<span class="hljs-comment">/*列级约束条件*/</span><br>    sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">check</span>(Ssex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">or</span> Sname <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Ms.%&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="4-完整性约束命名子句"><a href="#4-完整性约束命名子句" class="headerlink" title="4.完整性约束命名子句"></a>4.完整性约束命名子句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>Sno <span class="hljs-type">numeric</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">constraint</span> c1 <span class="hljs-keyword">check</span>(Sno <span class="hljs-keyword">between</span> <span class="hljs-number">90000</span> <span class="hljs-keyword">and</span> <span class="hljs-number">99999</span>),<br>    Sname <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">constraint</span> c2 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    Sage <span class="hljs-type">numeric</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">constraint</span> c3 <span class="hljs-keyword">check</span>(Sage<span class="hljs-operator">&lt;</span><span class="hljs-number">30</span>),<br>    Ssex <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">constraint</span> c4 <span class="hljs-keyword">check</span>(Ssex <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>)),<br>    <span class="hljs-keyword">constraint</span> studentkey <span class="hljs-keyword">primary</span> key(Sno)<br>);<br></code></pre></td></tr></table></figure><p>修改表中的完整性限制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">constraint</span> C4;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> c1 <span class="hljs-keyword">check</span>(Sno <span class="hljs-keyword">between</span> <span class="hljs-number">900000</span> <span class="hljs-keyword">and</span> <span class="hljs-number">999999</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> c3 <span class="hljs-keyword">check</span>(sage<span class="hljs-operator">&lt;</span> <span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure><h2 id="5-域完整性限制"><a href="#5-域完整性限制" class="headerlink" title="5.域完整性限制"></a>5.域完整性限制</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> domain GenderDomain <span class="hljs-type">char</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">check</span>(<span class="hljs-keyword">value</span> <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>));<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>Ssex GenderDomain<br>);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> domain GenderDomain <span class="hljs-type">char</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">constraint</span> GD <span class="hljs-keyword">check</span>(<span class="hljs-keyword">value</span> <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>));<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>Ssex GenderDomain<br>);<br></code></pre></td></tr></table></figure><p>删除域限制条件GD</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> domain GenderDomain<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">constraint</span> GD;<br></code></pre></td></tr></table></figure><p>添加限制条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> domain GenderDomain<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> GDD <span class="hljs-keyword">check</span>(<span class="hljs-keyword">value</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="6-触发器"><a href="#6-触发器" class="headerlink" title="6.触发器"></a>6.触发器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> Student_Insert<br>after <span class="hljs-keyword">insert</span> <span class="hljs-keyword">on</span> Student<br><span class="hljs-keyword">referencing</span> <span class="hljs-keyword">NEW</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">as</span> Delta<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> statement<span class="hljs-comment">/*语句级触发器*/</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> testTable(Nums)<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> Delta;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">use kaoyan;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> Insert_Or_Update_Sal<br>before  <span class="hljs-keyword">insert</span> <span class="hljs-keyword">or</span> update <span class="hljs-keyword">on</span> student<br><span class="hljs-keyword">referencing</span> <span class="hljs-keyword">new</span> <span class="hljs-type">row</span> <span class="hljs-keyword">as</span> newTuple<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br><span class="hljs-keyword">begin</span><br>if(newTuple.Job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;教授&#x27;</span>)<span class="hljs-keyword">and</span>(newTuple.Sal<span class="hljs-operator">&lt;</span><span class="hljs-number">4000</span>)<br><span class="hljs-keyword">Then</span> newTuple.Sal:<span class="hljs-operator">=</span><span class="hljs-number">4000</span>;<br>endif;<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><p>删除触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">trigger</span> trigger_1 <span class="hljs-keyword">on</span> <span class="hljs-keyword">table</span> student; <br></code></pre></td></tr></table></figure><h1 id="关系规范化"><a href="#关系规范化" class="headerlink" title="关系规范化"></a>关系规范化</h1><h2 id="1-函数依赖"><a href="#1-函数依赖" class="headerlink" title="1.函数依赖"></a>1.函数依赖</h2><p>定义：X函数确定Y或Y函数依赖于X，记作X→Y。（X和Y是两个属性）</p><p><strong>复习P181</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring注解及原理学习</title>
    <link href="/2021/12/18/Spring%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/12/18/Spring%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring注解及原理学习"><a href="#Spring注解及原理学习" class="headerlink" title="Spring注解及原理学习"></a>Spring注解及原理学习</h1><h2 id="1-Configuration配置类及向容器中注册Bean"><a href="#1-Configuration配置类及向容器中注册Bean" class="headerlink" title="1.@Configuration配置类及向容器中注册Bean"></a>1.@Configuration配置类及向容器中注册Bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置类==配置文件</span><br><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//告诉spring这是一个配置类,放在类上</span><br></code></pre></td></tr></table></figure><p>利用配置类向容器中注册Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//给容器中注册一个Bean，类型为返回值的类型，id默认是用方法名作为id</span><br>   <span class="hljs-meta">@Bean(&quot;person01&quot;)</span><span class="hljs-comment">//ioc容器中的名字</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">20</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>利用xml文件向容器中注册Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ego.pojo.Person&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-自动扫描组件-amp-指定扫描规则"><a href="#2-自动扫描组件-amp-指定扫描规则" class="headerlink" title="2.自动扫描组件&amp;指定扫描规则"></a>2.自动扫描组件&amp;指定扫描规则</h2><p>若在xml文件中配置,需要扫描包下的指定的类时还需关闭默认过滤规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.ego&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据指定类型<strong>排除</strong>指定的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(value = &quot;com.ego&quot;,excludeFilters = &#123;</span><br><span class="hljs-meta">    @ComponentScan.Filter(type = FilterType.ANNOTATION,//根据注解类型进行排除</span><br><span class="hljs-meta">    classes = &#123;Controller.class, Service.class&#125;)//指定要排除的类</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure><p>根据指定类型<strong>只扫描</strong>指定的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(value = &quot;com.ego&quot;,includeFilters = &#123;</span><br><span class="hljs-meta">        @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class, Service.class&#125;),</span><br><span class="hljs-meta">        @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,classes = &#123;BookService.class&#125;)</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">,useDefaultFilters = false)</span><br><br><br><span class="hljs-comment">//FilterType.ANNOTATION 按照注解</span><br><span class="hljs-comment">//@ComponentScan.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class, Service.class&#125;) </span><br><span class="hljs-comment">//FilterType.ASSIGNABLE_TYPE按照给定的类型</span><br><span class="hljs-comment">//@ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,classes = &#123;BookService.class&#125;)</span><br><br><span class="hljs-comment">//还可以自定义过滤规则</span><br></code></pre></td></tr></table></figure><h2 id="3-自定义扫描规则"><a href="#3-自定义扫描规则" class="headerlink" title="3.自定义扫描规则"></a>3.自定义扫描规则</h2><p>写一个org.springframework.core.type.filter.TypeFilter的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego.config;<br><br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotationMetadata;<br><span class="hljs-keyword">import</span> org.springframework.core.type.ClassMetadata;<br><span class="hljs-keyword">import</span> org.springframework.core.type.classreading.MetadataReader;<br><span class="hljs-keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;<br><span class="hljs-keyword">import</span> org.springframework.core.type.filter.TypeFilter;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTypeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TypeFilter</span> </span>&#123;<br><br>    <span class="hljs-comment">/*metadataReader:读取到的当前正在扫描的类的信息</span><br><span class="hljs-comment">    * metadataReaderFactory:可以获取到其他任何类的信息</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">match</span><span class="hljs-params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        <span class="hljs-comment">//获取当前类注解的信息</span><br>        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();<br>        <span class="hljs-comment">//获取当前正在扫描的类的类信息</span><br>        ClassMetadata classMetadata = metadataReader.getClassMetadata();<br>        <span class="hljs-comment">//获取当前类的资源信息(如类的路径)</span><br>        Resource resource = metadataReader.getResource();<br><br>        String className = classMetadata.getClassName();<br>        System.out.println(<span class="hljs-string">&quot;----&gt;&quot;</span>+className);<br><br>        <span class="hljs-comment">//自定义规则,类名包括er的类都会被注册到IOC容器中</span><br>        <span class="hljs-keyword">if</span>(className.contains(<span class="hljs-string">&quot;er&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-Scope设置组件作用域"><a href="#4-Scope设置组件作用域" class="headerlink" title="4.@Scope设置组件作用域"></a>4.@Scope设置组件作用域</h2><p>通过@Scope设置作用域，设置Scope(“prototype”)时，两次获取的bean不是同一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认都是单实例的</span><br>    <span class="hljs-comment">/*@see ConfigurableBeanFactory#SCOPE_PROTOTYPE</span><br><span class="hljs-comment">     * @see ConfigurableBeanFactory#SCOPE_SINGLETON</span><br><span class="hljs-comment">     * @see org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST</span><br><span class="hljs-comment">     * @see org.springframework.web.context.WebApplicationContext#SCOPE_SESSION</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * prototype: 多实例的</span><br><span class="hljs-comment">     * singleton： 单实例的(默认值)</span><br><span class="hljs-comment">     * request： 同一个请求创建一个实例</span><br><span class="hljs-comment">     * session： 同一个session创建一个实例</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br>    <span class="hljs-meta">@Bean(&quot;person&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">22</span>);<br>    &#125;<br><br><span class="hljs-comment">//重新获取bean时两次获取的</span><br></code></pre></td></tr></table></figure><ul><li> prototype: 多实例的，不会在IOC容器启动时就调用方法创建对象，而是在获取时才创建对象，获取几次则调用方法创建几次</li><li>singleton： 单实例的(默认值)，在IOC容器启动时就会调用方法创建对象放入IOC容器中，以后每次获取直接从容器中取（可看做map.get（））</li></ul><p><strong>懒加载：</strong>使得单实例对象在容器启动时不创建对象，而是在第一次使用（获取）Bean时才创建对象并初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(&quot;person&quot;)</span><br>   <span class="hljs-meta">@Lazy</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;创建了Person...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">22</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="5-Conditional按照条件注册Bean"><a href="#5-Conditional按照条件注册Bean" class="headerlink" title="5.@Conditional按照条件注册Bean"></a>5.@Conditional按照条件注册Bean</h2><p><strong>@Condition放在方法上</strong>，若**@Condition放在类上**，则只有判断条件为真时，才会注册类中所有的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//&#123;&#125;中必须是Condition接口的实现类</span><br><span class="hljs-meta">@Conditional(&#123;WindowsCondition.class&#125;)</span><br>   <span class="hljs-meta">@Bean(&quot;bill&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person01</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bill Gates&quot;</span>,<span class="hljs-number">62</span>);<br>   &#125;<br><br><span class="hljs-meta">@Conditional(&#123;LinuxCondition.class&#125;)</span><br>   <span class="hljs-meta">@Bean(&quot;linus&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person02</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;linux&quot;</span>,<span class="hljs-number">42</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>写两个Condition接口的实现类</p><p><strong>LinuxCondition</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego.condition;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Condition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ConditionContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinuxCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Condition</span> </span>&#123;<br><br>    <span class="hljs-comment">/*ConditionContext：判断条件能使用的上下文环境</span><br><span class="hljs-comment">    *AnnotatedTypeMetadata：注释信息</span><br><span class="hljs-comment">    **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;<br>        <span class="hljs-comment">//TODO判断是否为linux系统</span><br>        <span class="hljs-comment">//1、能获取到IOC使用的beanfactory（创建及装配bean）</span><br>        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();<br>        <span class="hljs-comment">//2、获取类加载器</span><br>        ClassLoader classLoader = context.getClassLoader();<br>        <span class="hljs-comment">//3、获取当前环境信息</span><br>        Environment environment = context.getEnvironment();<br>        <span class="hljs-comment">//4、获取bean定义的注册类</span><br>        BeanDefinitionRegistry registry = context.getRegistry();<br><span class="hljs-comment">//判断容器中是否包含person这个bean，还可使用registry为容器中注册bean</span><br>        <span class="hljs-keyword">boolean</span> definition = registry.containsBeanDefinition(<span class="hljs-string">&quot;person&quot;</span>);<br>        <br>        String property = environment.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>        <span class="hljs-keyword">if</span> (property.contains(<span class="hljs-string">&quot;linux&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>WindowsCondition</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego.condition;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Condition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ConditionContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;<br><br><span class="hljs-comment">//判断是否是Windows系统</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowsCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Condition</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;<br>        Environment environment = context.getEnvironment();<br>        String property = environment.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>        <span class="hljs-keyword">if</span>(property.contains(<span class="hljs-string">&quot;Windows&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-Impor给容器中导入组件的三种方式"><a href="#6-Impor给容器中导入组件的三种方式" class="headerlink" title="6.@Impor给容器中导入组件的三种方式"></a>6.@Impor给容器中导入组件的三种方式</h2><ol><li><strong>直接引入组件的类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Configuration</span><br>   <span class="hljs-meta">@Import(Color.class)</span><br><span class="hljs-comment">//@Import(&#123;Color.class, Red.class&#125;)</span><br>   <span class="hljs-comment">//@Import导入组件，id默认是组件的全类名，如com.ego.pojo.Color</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySpringConfig2</span> </span>&#123;<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>2. 实现ImportSelector接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego.condition;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ImportSelector;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotationMetadata;<br><br><span class="hljs-comment">//自定义逻辑返回需要导入的组件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br><br>    <span class="hljs-comment">//返回值为需要导入的组件的全类名</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;com.ego.pojo.Blue&quot;</span>,<span class="hljs-string">&quot;com.ego.pojo.Yellow&quot;</span>&#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​     <strong>引入自定义ImportSelector的类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;Color.class, Red.class, MyImportSelector.class&#125;)</span><br><span class="hljs-comment">//@Import导入组件，id默认是组件的全类名</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySpringConfig2</span> </span>&#123;<br></code></pre></td></tr></table></figure><ol start="3"><li><p><strong>实现ImportBeanDefinitionRegistrar接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego.condition;<br><br><span class="hljs-keyword">import</span> com.ego.pojo.RainBow;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotationMetadata;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyImportBeanDefinitionRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportBeanDefinitionRegistrar</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * AnnotationMetadata：当前类的注解信息</span><br><span class="hljs-comment">    * BeanDefinitionRegistry：BeanDefinition注册类，</span><br><span class="hljs-comment">    *       把所有要添加到容器中的Bean，通过调用BeanDefinition.registerBeanDefinition()手动注册到容器中</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata,  BeanDefinitionRegistry registry)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> definition1 = registry.containsBeanDefinition(<span class="hljs-string">&quot;com.ego.pojo.Blue&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> definition2 = registry.containsBeanDefinition(<span class="hljs-string">&quot;com.ego.pojo.Red&quot;</span>);<br>        <span class="hljs-keyword">if</span>(definition1 &amp;&amp; definition2)&#123;<br><br>            RootBeanDefinition rootBeanDefinition = <span class="hljs-keyword">new</span> RootBeanDefinition(RainBow.class);<br>            <span class="hljs-comment">//注册一个Bean，指定Bean名和定义信息</span><br>            registry.registerBeanDefinition(<span class="hljs-string">&quot;rainBow&quot;</span>,rootBeanDefinition);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>引入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;Color.class, Red.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="hljs-comment">//@Import导入组件，id默认是组件的全类名</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySpringConfig2</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-使用FactoryBean注册组件"><a href="#7-使用FactoryBean注册组件" class="headerlink" title="7.使用FactoryBean注册组件"></a>7.使用FactoryBean注册组件</h2><p>​    <strong>创建一个实现FactoryBean的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ego.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.FactoryBean;<br><br><span class="hljs-comment">//创建一个Spring定义的FactoryBean</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColorFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">Color</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//返回一个Color对象，这个对象会被添加到容器中</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Color <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Color();<br>    &#125;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> Color.class;<br>    &#125;<br><br>    <span class="hljs-comment">//是否是单例</span><br>    <span class="hljs-comment">// true： 单实例，在容器中只保存一份</span><br>    <span class="hljs-comment">// false：多实例，每次获取都会创建一个新的Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>在Config类中注册Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> ColorFactoryBean <span class="hljs-title">colorFactoryBean</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ColorFactoryBean();<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>实际上通过“colorFactoryBean”这个id获取的是colorFactoryBean中getObject()方法获取的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//工厂Bean获取的是调用其中getObject()方法获取的对象</span><br>   Object bean2 = applicationContext.getBean(<span class="hljs-string">&quot;colorFactoryBean&quot;</span>);<br></code></pre></td></tr></table></figure><p>​    若想获取colorFactoryBean本身需在id前加&amp;，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Object bean2 = applicationContext.getBean(<span class="hljs-string">&quot;&amp;colorFactoryBean&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="8-Bean的生命周期"><a href="#8-Bean的生命周期" class="headerlink" title="8.Bean的生命周期"></a>8.Bean的生命周期</h2><p>Bean的生命周期：Bean创建–&gt;初始化–&gt;销毁的过程</p><h3 id="1-自定义初始化和销毁方法："><a href="#1-自定义初始化和销毁方法：" class="headerlink" title="1.自定义初始化和销毁方法："></a>1.自定义初始化和销毁方法：</h3><p><strong>通过xml定义:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.ego.pojo.Person&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>通过注解@Bean定义：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//init()和destroy都是Car中定义的方法</span><br><span class="hljs-meta">@Bean(initMethod = &quot;init&quot;,destroyMethod = &quot;destroy&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">car</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car();<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>初始化：</strong>对象创建完成（构造函数），并赋值好，调用初始化方法</p><p><strong>销毁：</strong>单实例：容器关闭的时候；多实例：容器只会创建bean，但是不会调用销毁方法。</p><h3 id="2-通过实现InitializingBean（定义初始化逻辑），DisposableBean（定义销毁逻辑）两个接口"><a href="#2-通过实现InitializingBean（定义初始化逻辑），DisposableBean（定义销毁逻辑）两个接口" class="headerlink" title="2.通过实现InitializingBean（定义初始化逻辑），DisposableBean（定义销毁逻辑）两个接口"></a>2.通过实现InitializingBean（定义初始化逻辑），DisposableBean（定义销毁逻辑）两个接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InitializingBean</span>, <span class="hljs-title">DisposableBean</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat...Constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//销毁方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat...destroy&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//初始化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat...init&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-通过JSR250规范中的-PostConstructor和-PreDestroy注解"><a href="#3-通过JSR250规范中的-PostConstructor和-PreDestroy注解" class="headerlink" title="3.通过JSR250规范中的@PostConstructor和@PreDestroy注解"></a>3.通过JSR250规范中的@PostConstructor和@PreDestroy注解</h3><p>​    **@PostConstructor:**在bean创建完成并且完成属性赋值后执行初始化方法</p><p>​    **@PreDestroy:**在容器销毁bean之前通知我们进行清理工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog...Construct&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//对象创建并赋值后调用</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog...init&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//容器移除对象之前</span><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Dog...destroy&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-通过实现BeanPostProcessor（bean的后置处理器）接口"><a href="#3-通过实现BeanPostProcessor（bean的后置处理器）接口" class="headerlink" title="3.通过实现BeanPostProcessor（bean的后置处理器）接口"></a>3.通过实现BeanPostProcessor（bean的后置处理器）接口</h3><p>postProcessBeforeInitialization（）：初始化前调用</p><p>postProcessAfterInitialization（）：初始化后调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在初始化前后进行处理工作</span><br><span class="hljs-comment">//必须将实现类加入到容器中</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before...&quot;</span>+beanName+bean);<br>        <span class="hljs-keyword">return</span> bean;<span class="hljs-comment">//返回值可以是原来的bean或者是处理后的bean</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after...&quot;</span>+beanName+bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-BeanPostProcessor执行过程"><a href="#9-BeanPostProcessor执行过程" class="headerlink" title="9.BeanPostProcessor执行过程"></a>9.BeanPostProcessor执行过程</h2><p><img src="/2021/12/18/Spring%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/Users\hp\AppData\Roaming\Typora\typora-user-images\image-20210220203531255.png" alt="image-20210220203531255"></p><h2 id="10-Value赋值"><a href="#10-Value赋值" class="headerlink" title="10.@Value赋值"></a>10.@Value赋值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 使用@Value进行赋值</span><br><span class="hljs-comment">* 1.基本数值</span><br><span class="hljs-comment">* 2.可以写SpEl；#&#123;&#125;</span><br><span class="hljs-comment">* 3.可以写$&#123;&#125;,取出配置文件中的值（运行环境变量的值）</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-meta">@Value(&quot;张三&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span><br><span class="hljs-keyword">private</span> Integer age;<br><br><br><br></code></pre></td></tr></table></figure><h2 id="11-使用-PropertySource加载外部配置文件"><a href="#11-使用-PropertySource加载外部配置文件" class="headerlink" title="11.使用@PropertySource加载外部配置文件"></a>11.使用@PropertySource加载外部配置文件</h2><p><strong>使用@PropertySource配置：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*使用@PropertySource读取外部配置文件中的看k/v保存到环境变量中,此变量可以通过</span><br><span class="hljs-comment">*ConfigurableEnvironment environment = applicationContext.getEnvironment();</span><br><span class="hljs-comment">*String nickName = environment.getProperty(&quot;person.nickName&quot;);</span><br><span class="hljs-comment">*取出</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:/person.properties&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainConfigOfPropertyValue</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;张三&quot;)</span><br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer age;<br>   <span class="hljs-meta">@Value(&quot;$&#123;person.nickName&#125;&quot;)</span><br>   <span class="hljs-keyword">private</span> String nickName;<br></code></pre></td></tr></table></figure><p><strong>若使用xml配置，需在spring配置文件中添加：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;context:property-placeholder location=<span class="hljs-string">&quot;classpath:person.properties&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h2 id="12-Autowired、-Qualifier、-Primary"><a href="#12-Autowired、-Qualifier、-Primary" class="headerlink" title="12.@Autowired、@Qualifier、@Primary"></a>12.@Autowired、@Qualifier、@Primary</h2><p><strong>自动装配：spring利用依赖注入（DI），完成对IOC容器中各个组件的依赖关系赋值</strong></p><p><strong>@Autowired&amp;@Qualifier</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* @Autowired</span><br><span class="hljs-comment">*   1、默认优先按照类型去容器中找对应的组件，找到就赋值给属性</span><br><span class="hljs-comment">*   2、如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查找</span><br><span class="hljs-comment">*   3、使用@Qualifier(&quot;&quot;)指定要装配的组件的id</span><br><span class="hljs-comment">*   4、使用@Autowired(require=false),则当容器中找不到装配对象时不进行装配，就不会报错</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookService</span> </span>&#123;<br>    <span class="hljs-meta">@Qualifier(&quot;bookDao1&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    BookDao bookDao;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(bookDao);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>@Primary,让spring在进行自动装配的时候默认使用首选的bean</strong></p><p>​    <strong>注意：</strong>使用了@Primary后就不能再使用@Qualifier，若同时使用@Qualifier则会优先装配@Qualifier所指定的bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加了@Primary后会优先装配这个bean</span><br><span class="hljs-meta">@Primary</span><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> BookDao <span class="hljs-title">bookDao2</span><span class="hljs-params">()</span></span>&#123;<br>       BookDao bookDao = <span class="hljs-keyword">new</span> BookDao();<br>       bookDao.setFlag(<span class="hljs-number">2</span>);<br>       <span class="hljs-keyword">return</span> bookDao;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>若把@Autowired放在set方法上</strong>，则会从容器中获取bean然后调用set方法进行装配</p></li><li><p><strong>若把@Autowired放在有参构造器上</strong>，则容器启动时会调用有参构造器构造对象，且构造器用到的组件（bean）也是从容器中进行获取（默认加在IOC容器中的组件，容器启动时会调用无参构造器创建对象，再进行赋值初始化等操作）</p></li><li><p><strong>最后还可以吧@Autowired放在参数前</strong></p></li><li><p><strong>如果组件只有一个有参构造器</strong>，这个有参构造器的@Autowired可以省略，参数位置的组件会从容器中自动获取</p></li><li><p>@Bean创建对象的时候，方法参数可以省略@Autowired，会自动从容器中获取。</p></li></ul><h2 id="13-Resource和-Inject装配"><a href="#13-Resource和-Inject装配" class="headerlink" title="13.@Resource和@Inject装配"></a>13.@Resource和@Inject装配</h2><p>@Resource(JSR250)和@Inject(JSR330)都是java规范的注解</p><p>**@Resource:**不能结合@Qualifier使用，也不能支持@Primary，@Autowired(require=false)，且默认按照属性名进行装配</p><p>**@Inject:**需要导入依赖javax.inject，功能和@Autowired一样，但是没有@Autowired(require=false)功能</p><h2 id="14-Aware注入Spring底层组件"><a href="#14-Aware注入Spring底层组件" class="headerlink" title="14.Aware注入Spring底层组件"></a>14.Aware注入Spring底层组件</h2><p>自定义组件如果想要使用Spring容器底层的一些组件（如ApplicationContext，BeanFactory等），可以实现xxxAware接口,在创建对象的时候，会调用接口规定的方法注入相关组件。由对应的xxxAwareProcessor进行处理，若有类实现了对应的接口，则将对应的组件传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//该接口内的方法参数都会从IOC容器中获取</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Red</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationContextAware</span>, <span class="hljs-title">BeanNameAware</span>, <span class="hljs-title">EmbeddedValueResolverAware</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        <span class="hljs-keyword">this</span>.applicationContext = applicationContext;<br>        System.out.println(<span class="hljs-string">&quot;ApplicationContext--&quot;</span>+applicationContext);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBeanName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;当前的beanName：&quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmbeddedValueResolver</span><span class="hljs-params">(StringValueResolver resolver)</span> </span>&#123;<br>        String s = resolver.resolveStringValue(<span class="hljs-string">&quot;当前的系统为：$&#123;os.name&#125;,我是#&#123;20-15&#125;&quot;</span>);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>原理：</strong></p><p><img src="/2021/12/18/Spring%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/Users\hp\AppData\Roaming\Typora\typora-user-images\image-20210221142710885.png" alt="image-20210221142710885"></p><h2 id="15-Profile根据环境注册Bean"><a href="#15-Profile根据环境注册Bean" class="headerlink" title="15.@Profile根据环境注册Bean"></a>15.@Profile根据环境注册Bean</h2><p><strong>Profile:Spring为我们提供的可以根据当前环境，动态的激活和切换一系列组件的功能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默然会使用@Profile(&quot;default&quot;)表示的环境</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:/db.properties&quot;)</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainConfigOfProfile</span> </span>&#123;<br><br>    <span class="hljs-meta">@Profile(&quot;test&quot;)</span><br>    <span class="hljs-meta">@Bean(&quot;testDataSource&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSourceTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException </span>&#123;<br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        dataSource.setUser(<span class="hljs-string">&quot;$&#123;db.user&#125;&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;$&#123;db.password&#125;&quot;</span>);<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>);<br>        dataSource.setDriverClass(<span class="hljs-string">&quot;$&#123;db.Driver&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>    <span class="hljs-meta">@Profile(&quot;dev&quot;)</span><br>    <span class="hljs-meta">@Bean(&quot;devDataSource&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSourceDev</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException </span>&#123;<br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        dataSource.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/smbms&quot;</span>);<br>        dataSource.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>    <span class="hljs-meta">@Profile(&quot;prod&quot;)</span><br>    <span class="hljs-meta">@Bean(&quot;prodDataSource&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSourceProd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> PropertyVetoException </span>&#123;<br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        dataSource.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/sys&quot;</span>);<br>        dataSource.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>利用代码设置需要激活的环境：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//1.创建一个applicationContext</span><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        <span class="hljs-comment">//2.加载主配置类前设置需要激活的环境</span><br>        ConfigurableEnvironment environment = applicationContext.getEnvironment();<br>        environment.setActiveProfiles(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;dev&quot;</span>);<br>        <span class="hljs-comment">//3.注册主配置类</span><br>        applicationContext.register(MainConfigOfProfile.class);<br>        <span class="hljs-comment">//4.启动刷新容器</span><br>        applicationContext.refresh();<br>        String[] namesForType = applicationContext.getBeanNamesForType(DataSource.class);<br>        <span class="hljs-keyword">for</span> (String name: namesForType<br>             ) &#123;<br>            System.out.println(name);<br>        &#125;<br>        applicationContext.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面的1、3、4步骤相当于源码中的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AnnotationConfigApplicationContext</span><span class="hljs-params">(Class&lt;?&gt;... componentClasses)</span> </span>&#123;<br><span class="hljs-keyword">this</span>();<span class="hljs-comment">//创建applicationContext</span><br>register(componentClasses);<span class="hljs-comment">//注册配置类</span><br>refresh();<br>&#125;<br></code></pre></td></tr></table></figure><p>测试时可以在虚拟机参数位置添加：<img src="/2021/12/18/Spring%E6%B3%A8%E8%A7%A3%E5%8F%8A%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/Users\hp\AppData\Roaming\Typora\typora-user-images\image-20210221151432104.png" alt="image-20210221151432104"></p><p>进行测试</p><p><em><strong>注意：当@Profile写在配置类上时，只有是指定环境时，配置类里的所有配置才会生效</strong></em></p><h2 id="16-AOP"><a href="#16-AOP" class="headerlink" title="16.AOP"></a>16.AOP</h2><p><strong>AOP:动态代理，指在程序运行期间动态的将某段代码切入到指定方法的指定位置进行运行的编程方式</strong></p><p><strong>配置类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* AOP:动态代理，指在程序运行期间动态的将某段代码切入到指定方法的指定位置进行运行的编程方式；</span><br><span class="hljs-comment">* 1.导入aop依赖</span><br><span class="hljs-comment">* 2.定义一个业务逻辑类，在业务逻辑运行的时候将日志进行打印</span><br><span class="hljs-comment">* 3.定义一个日志切面类：切面里面的方法需要动态感知MathCalculator运行到了哪一步</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 通知方法：</span><br><span class="hljs-comment">*   前置通知(@Before)：logStart,在目标方法运行前运行</span><br><span class="hljs-comment">*   后置通知(@After)：logEnd，在目标方法运行结束后运行（无论方法正常结束或者异常结束）</span><br><span class="hljs-comment">*   返回通知(@AfterReturning)：在目标方法正常返回后运行</span><br><span class="hljs-comment">*   异常通知(@AfterThrowing)：在目标方法出现异常后运行</span><br><span class="hljs-comment">*   环绕通知(@Around)：动态代理，手动推动目标方法运行</span><br><span class="hljs-comment">* 4.给切面类的目标方法标注何时何地运行</span><br><span class="hljs-comment">* 5.将切入面和业务逻辑类（目标方法所在类）都加入到容器中</span><br><span class="hljs-comment">* 6.告诉Spring哪个是切面类（给切面类上加上@Aspects注解）</span><br><span class="hljs-comment">* 7.给配置类中加@EnableAspectJAutoProxy，开启基于注解的aop模式</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainConfigOfAop</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MathCalculator <span class="hljs-title">mathCalculator</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MathCalculator();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LogAspects <span class="hljs-title">logAspects</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LogAspects();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写切面类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspects</span> </span>&#123;<br>    <span class="hljs-comment">//本类引用可以只写方法名</span><br>    <span class="hljs-comment">//其他的切面引用需要全类名</span><br>    <span class="hljs-comment">//抽取公共的切入点表达式</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public int com.ego.aop.MathCalculator.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pointCut</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//@Before在目标方法之前切入，切入点表达式（指定在那个方法切入，*代表任意方法，..代表任意参数）</span><br>    <span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logStart</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<span class="hljs-comment">//JointPoint必须写在参数列表第一位</span><br>        Object[] args = joinPoint.getArgs();<br>        System.out.println(joinPoint.getSignature()+<span class="hljs-string">&quot;除法运行....参数列表是：&#123;&quot;</span>+ Arrays.asList(args) +<span class="hljs-string">&quot;&#125;&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After(&quot;pointCut()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logEnd</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;除法结束&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterReturning(value=&quot;pointCut()&quot;,returning = &quot;result&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logReturn</span><span class="hljs-params">(Object result)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;除法正常返回....结果是：&quot;</span>+result+<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pointCut()&quot;,throwing = &quot;exception&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logException</span><span class="hljs-params">(Exception exception)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;除法异常....异常信息：&#123;&#125;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>编写业务逻辑类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MathCalculator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">div</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i ,<span class="hljs-keyword">int</span> j)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;除法运行.....&quot;</span>);<br>        <span class="hljs-keyword">return</span> i/j;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>SpringMVC</category>
      
      <category>Annotation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringAnnotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习</title>
    <link href="/2021/12/18/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/12/18/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis学习"><a href="#Redis学习" class="headerlink" title="Redis学习"></a>Redis学习</h1><h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><h4 id="1-查看所有键"><a href="#1-查看所有键" class="headerlink" title="1.查看所有键"></a>1.查看所有键</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">keys</span> *<br></code></pre></td></tr></table></figure><h4 id="2-判断某个键是否存在"><a href="#2-判断某个键是否存在" class="headerlink" title="2.判断某个键是否存在"></a>2.判断某个键是否存在</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">exists</span> key-<span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><h4 id="3-移动某个键"><a href="#3-移动某个键" class="headerlink" title="3.移动某个键"></a>3.移动某个键</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">move</span> key-<span class="hljs-built_in">name</span> <span class="hljs-number">1</span>    <span class="hljs-comment">//1代表当前数据库</span><br></code></pre></td></tr></table></figure><h4 id="4-添加键"><a href="#4-添加键" class="headerlink" title="4.添加键"></a>4.添加键</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">set</span> <span class="hljs-built_in">key</span>-name <span class="hljs-built_in">key</span>-value<br></code></pre></td></tr></table></figure><h4 id="5-获取某个键的值"><a href="#5-获取某个键的值" class="headerlink" title="5.获取某个键的值"></a>5.获取某个键的值</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">get</span> key-<span class="hljs-built_in">name</span><br></code></pre></td></tr></table></figure><h4 id="6-为键设置过期时间"><a href="#6-为键设置过期时间" class="headerlink" title="6.为键设置过期时间"></a>6.为键设置过期时间</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">expire</span> key-name <span class="hljs-number">10</span>//<span class="hljs-number">10</span>代表<span class="hljs-number">10</span>s后过期<br></code></pre></td></tr></table></figure><h4 id="7-查看剩余过期时间"><a href="#7-查看剩余过期时间" class="headerlink" title="7.查看剩余过期时间"></a>7.查看剩余过期时间</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ttl key-<span class="hljs-built_in">name</span><br></code></pre></td></tr></table></figure><h4 id="8-查看键的类型"><a href="#8-查看键的类型" class="headerlink" title="8.查看键的类型"></a>8.查看键的类型</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">type</span> key-<span class="hljs-keyword">name</span><br></code></pre></td></tr></table></figure><h4 id="9-切换数据库"><a href="#9-切换数据库" class="headerlink" title="9.切换数据库"></a>9.切换数据库</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> <span class="hljs-number">0</span>//<span class="hljs-number">0</span>代表数据库序号<br></code></pre></td></tr></table></figure><h4 id="10-清空所有数据库信息"><a href="#10-清空所有数据库信息" class="headerlink" title="10.清空所有数据库信息"></a>10.清空所有数据库信息</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flushall</span><br></code></pre></td></tr></table></figure><h4 id="11-删除某个键"><a href="#11-删除某个键" class="headerlink" title="11.删除某个键"></a>11.删除某个键</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">del</span> <span class="hljs-built_in">key</span>-name<br></code></pre></td></tr></table></figure><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><h4 id="1-追加字符"><a href="#1-追加字符" class="headerlink" title="1.追加字符"></a>1.追加字符</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">append</span> <span class="hljs-built_in">key</span>-name <span class="hljs-string">&quot;value&quot;</span>//如果<span class="hljs-built_in">key</span>不存在则新建一个<span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><h4 id="2-获取字符串的长度"><a href="#2-获取字符串的长度" class="headerlink" title="2.获取字符串的长度"></a>2.获取字符串的长度</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">strlen</span> <span class="hljs-built_in">key</span>-name<br></code></pre></td></tr></table></figure><h4 id="3-使指定键的值加1"><a href="#3-使指定键的值加1" class="headerlink" title="3.使指定键的值加1"></a>3.使指定键的值加1</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">incr key-<span class="hljs-built_in">name</span><br></code></pre></td></tr></table></figure><h4 id="4-使指定键的值减1"><a href="#4-使指定键的值减1" class="headerlink" title="4.使指定键的值减1"></a>4.使指定键的值减1</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">decr key-<span class="hljs-built_in">name</span><br></code></pre></td></tr></table></figure><h4 id="5-指定一次增长的大小"><a href="#5-指定一次增长的大小" class="headerlink" title="5.指定一次增长的大小"></a>5.指定一次增长的大小</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">incrby</span> key-name <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="6-指定一次减少的大小"><a href="#6-指定一次减少的大小" class="headerlink" title="6.指定一次减少的大小"></a>6.指定一次减少的大小</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">decrby</span> key-name <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="7-指定获取键的值的范围"><a href="#7-指定获取键的值的范围" class="headerlink" title="7.指定获取键的值的范围"></a>7.指定获取键的值的范围</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">getrange key-name startIndex endIndex<br><span class="hljs-regexp">//</span>startIndex = <span class="hljs-number">0</span>,endIndex = -<span class="hljs-number">1</span>代表全部字符串<br></code></pre></td></tr></table></figure><h4 id="8-替换指定位置字符串"><a href="#8-替换指定位置字符串" class="headerlink" title="8.替换指定位置字符串"></a>8.替换指定位置字符串</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">setrange key-<span class="hljs-built_in">name</span> startindex value<br></code></pre></td></tr></table></figure><p><img src="/2021/12/18/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Users\hp\AppData\Roaming\Typora\typora-user-images\image-20210327154731563.png" alt="image-20210327154731563"></p><h4 id="9-设置过期时间"><a href="#9-设置过期时间" class="headerlink" title="9.设置过期时间"></a>9.设置过期时间</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">setex</span> key-name <span class="hljs-number">10</span> value//<span class="hljs-number">10</span>为过期时间<br></code></pre></td></tr></table></figure><h4 id="10-根据键是否存在进行创建"><a href="#10-根据键是否存在进行创建" class="headerlink" title="10.根据键是否存在进行创建"></a>10.根据键是否存在进行创建</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">setnx key-name <span class="hljs-string">&quot;value&quot;</span><br><span class="hljs-regexp">//</span>不存在该键则创建<br><span class="hljs-regexp">//</span>存在则创建失败<br></code></pre></td></tr></table></figure><h4 id="11-批量创建键"><a href="#11-批量创建键" class="headerlink" title="11.批量创建键"></a>11.批量创建键</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mset</span> k<span class="hljs-number">1</span> v<span class="hljs-number">1</span> k<span class="hljs-number">2</span> v<span class="hljs-number">2</span> k<span class="hljs-number">3</span> v<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="12-批量获取值"><a href="#12-批量获取值" class="headerlink" title="12.批量获取值"></a>12.批量获取值</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mget</span> k<span class="hljs-number">1</span> k<span class="hljs-number">2</span> k<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="13-不存在时批量创建"><a href="#13-不存在时批量创建" class="headerlink" title="13.不存在时批量创建"></a>13.不存在时批量创建</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">msetnx</span> k<span class="hljs-number">1</span> v<span class="hljs-number">1</span> k<span class="hljs-number">5</span> v<span class="hljs-number">5</span>//msetnx是原子性的操作，要么都成功，要么都失败<br></code></pre></td></tr></table></figure><h4 id="14-组合命令getset"><a href="#14-组合命令getset" class="headerlink" title="14.组合命令getset"></a>14.组合命令getset</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">getset key-<span class="hljs-type">name</span> <span class="hljs-keyword">value</span>//先<span class="hljs-keyword">get</span>再<span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><p><img src="/2021/12/18/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Users\hp\AppData\Roaming\Typora\typora-user-images\image-20210327161040858.png" alt="image-20210327161040858"></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven常用依赖及配置文件</title>
    <link href="/2021/12/18/Maven%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2021/12/18/Maven%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><h4 id="Dubbo-Spring"><a href="#Dubbo-Spring" class="headerlink" title="Dubbo-Spring"></a>Dubbo-Spring</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="Zookeeper-Client"><a href="#Zookeeper-Client" class="headerlink" title="Zookeeper Client"></a>Zookeeper Client</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.sgroschupf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc"></a>springmvc</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="mybatis-spring"><a href="#mybatis-spring" class="headerlink" title="mybatis-spring"></a>mybatis-spring</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="spring-jdbc"><a href="#spring-jdbc" class="headerlink" title="spring-jdbc"></a>spring-jdbc</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="资源过滤设置"><a href="#资源过滤设置" class="headerlink" title="资源过滤设置"></a>资源过滤设置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在build中配置resources，防止资源导出失效的问题--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main.java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="XMl文件模板"><a href="#XMl文件模板" class="headerlink" title="XMl文件模板"></a>XMl文件模板</h2><h4 id="Spring-applicationContext-xml"><a href="#Spring-applicationContext-xml" class="headerlink" title="Spring        applicationContext.xml"></a>Spring        applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Mapper-xml"><a href="#Mapper-xml" class="headerlink" title="Mapper.xml"></a>Mapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.ego&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Mybatis-config-xml"><a href="#Mybatis-config-xml" class="headerlink" title="Mybatis-config.xml"></a>Mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    引入外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--标准日志工厂--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
      <category>XML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pom</tag>
      
      <tag>maven</tag>
      
      <tag>dependencies</tag>
      
      <tag>xml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试题</title>
    <link href="/2021/12/18/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/12/18/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Java面试题"><a href="#Java面试题" class="headerlink" title="Java面试题"></a>Java面试题</h1><h2 id="一、java基础"><a href="#一、java基础" class="headerlink" title="一、java基础"></a>一、java基础</h2><h4 id="1-JDK-和-JRE-有什么区别？"><a href="#1-JDK-和-JRE-有什么区别？" class="headerlink" title="1.JDK 和 JRE 有什么区别？"></a><strong>1.JDK 和 JRE 有什么区别？</strong></h4><ul><li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li></ul><h4 id="2-和-equals-的区别是什么？"><a href="#2-和-equals-的区别是什么？" class="headerlink" title="2.== 和 equals 的区别是什么？"></a><strong>2.== 和 equals 的区别是什么？</strong></h4><p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；</li></ul><p><strong>总结</strong> ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重写了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h4 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h4><p>不对</p><ul><li>如果两个对象相等，那么它们的hashCode()值一定相同。这里的相等是指，通过equals()比较两个对象时返回true。</li><li>如果两个对象hashCode()相等，它们并不一定相等。因为在散列表中，hashCode()相等，即两个键值对的哈希值相等。然而哈希值相等，并不一定能得出键值对相等，此时就出现所谓的<strong>哈希冲突</strong>场景。</li></ul><h4 id="4-final-在-java-中有什么作用？"><a href="#4-final-在-java-中有什么作用？" class="headerlink" title="4.final 在 java 中有什么作用？"></a>4.final 在 java 中有什么作用？</h4><ul><li>final 修饰的类叫最终类，该类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><h4 id="5-java-中的-Math-round-1-5-等于多少？"><a href="#5-java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5.java 中的 Math.round(-1.5) 等于多少？"></a>5.java 中的 Math.round(-1.5) 等于多少？</h4><p>-1</p><p>Math的round方法是四舍五入,如果参数是负数,则往大的数如,Math.round(-1.5)=-1，如果是Math.round(1.5)则结果为2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>System.out.println(Math.round(<span class="hljs-number">1.3</span>));   <span class="hljs-comment">//1</span><br>System.out.println(Math.round(<span class="hljs-number">1.4</span>));   <span class="hljs-comment">//1</span><br>System.out.println(Math.round(<span class="hljs-number">1.5</span>));   <span class="hljs-comment">//2</span><br>System.out.println(Math.round(<span class="hljs-number">1.6</span>));   <span class="hljs-comment">//2</span><br>System.out.println(Math.round(<span class="hljs-number">1.7</span>));   <span class="hljs-comment">//2</span><br>System.out.println(Math.round(-<span class="hljs-number">1.3</span>));  <span class="hljs-comment">//-1</span><br>System.out.println(Math.round(-<span class="hljs-number">1.4</span>));  <span class="hljs-comment">//-1</span><br>System.out.println(Math.round(-<span class="hljs-number">1.5</span>));  <span class="hljs-comment">//-1</span><br>System.out.println(Math.round(-<span class="hljs-number">1.6</span>));  <span class="hljs-comment">//-2</span><br>System.out.println(Math.round(-<span class="hljs-number">1.7</span>));  <span class="hljs-comment">//-2</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6.String 属于基础的数据类型吗？"></a>6.String 属于基础的数据类型吗？</h4><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p><h4 id="7-java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#7-java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="7.java 中操作字符串都有哪些类？它们之间有什么区别？"></a>7.java 中操作字符串都有哪些类？它们之间有什么区别？</h4><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 <strong>String 声明的是不可变的对象</strong>，<strong>每次操作都会生成新的 String 对象</strong>，然后将指针指向新的 String 对象，而 <strong>StringBuffer、StringBuilder 可以在原有对象的基础上进行操作</strong>，<strong>所以在经常改变字符串内容的情况下最好不要使用 String。</strong></p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h4 id="8-String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8.String str=”i”与 String str=new String(“i”)一样吗？"></a>8.String str=”i”与 String str=new String(“i”)一样吗？</h4><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。 </p><h4 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9.如何将字符串反转？"></a>9.如何将字符串反转？</h4><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StringBuffer reverse</span><br>StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();<br>stringBuffer.append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System.out.println(stringBuffer.reverse()); <span class="hljs-comment">// gfedcba</span><br><span class="hljs-comment">// StringBuilder reverse</span><br>StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>stringBuilder.append(<span class="hljs-string">&quot;abcdefg&quot;</span>);<br>System.out.println(stringBuilder.reverse()); <span class="hljs-comment">// gfedcba</span><br></code></pre></td></tr></table></figure><h4 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10.String 类的常用方法都有那些？"></a>10.String 类的常用方法都有那些？</h4><ul><li><p>indexOf(char)：返回指定字符的索引。（从0开始）</p></li><li><p>charAt(int)：返回指定索引处的字符。</p></li><li><p>replace(oldChar,newChar)：字符串替换，<strong>所有oldChar字符都会被替换</strong></p></li><li><p>trim()：去除字符串两端空白。</p></li><li><p>split(regex)：根据regex来分割字符串，返回一个分割后的字符串数组。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">String</span> s = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;aaa|bbb|ccc&quot;</span>);<br><span class="hljs-keyword">String</span>[] <span class="hljs-built_in">split</span> = s.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;\\|&quot;</span>);<span class="hljs-comment">//分割后为 aaa bbb ccc</span><br></code></pre></td></tr></table></figure></li><li><p>getBytes()：返回字符串的 byte 类型数组，即字符对应的编码，如a（97）</p></li><li><p>length()：返回字符串长度。</p></li><li><p>toLowerCase()：将字符串转成小写字母。</p></li><li><p>toUpperCase()：将字符串转成大写字符。</p></li><li><p>substring(beginIndex,endIndex)：截取字符串，<strong>包含beginIndex但不包含endIndex。</strong></p></li><li><p>equals()：字符串比较，比较的是字符串内容是否相等。</p></li></ul><h4 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11.抽象类必须要有抽象方法吗？"></a>11.抽象类必须要有抽象方法吗？</h4><p>不需要，抽象类不一定非要有抽象方法。</p><p><strong>抽象类无法直接创建对象，只能被子类继承后，创建子类对象。</strong><br>子类需要继承抽象父类并完成最终的方法实现细节(即重写方法，完成方法体)。而此时，方法重写不再是加强父类方法功能，而是父类没有具体实现，子类完成了具体实现，我们将这种方法重写也叫做实现方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> 返回值类型 方法名(参数);<br>抽象类定义的格式：<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>&#125;<br>看如下代码：<br><span class="hljs-comment">//员工抽象类 </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//抽象函数。需要abstract修饰，并分号;结束</span><br>&#125;<br><br><span class="hljs-comment">//manager子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;正在赋予权限&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//customer子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Assistant</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employee</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;正在使用该系统&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13.抽象类能使用 final 修饰吗？"></a>13.抽象类能使用 final 修饰吗？</h4><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：</p><h4 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14.接口和抽象类有什么区别？"></a>14.接口和抽象类有什么区别？</h4><ul><li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li><li>构造函数：抽象类可以有构造函数；接口不能有。</li><li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</li><li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li><li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li><li>接口中变量全部默认是用public static final修饰的常量，抽象类中不限制</li></ul><h4 id="15-java-中-IO-流分为几种？"><a href="#15-java-中-IO-流分为几种？" class="headerlink" title="15.java 中 IO 流分为几种？"></a>15.java 中 IO 流分为几种？</h4><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h4 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16.BIO、NIO、AIO 有什么区别？"></a>16.BIO、NIO、AIO 有什么区别？</h4><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h4 id="17-Files的常用方法都有哪些？"><a href="#17-Files的常用方法都有哪些？" class="headerlink" title="17.Files的常用方法都有哪些？"></a>17.Files的常用方法都有哪些？</h4><ul><li>Files.exists()：检测文件路径是否存在。</li><li>Files.createFile()：创建文件。</li><li>Files.createDirectory()：创建文件夹。</li><li>Files.delete()：删除一个文件或目录。</li><li>Files.copy()：复制文件。</li><li>Files.move()：移动文件。</li><li>Files.size()：查看文件个数。</li><li>Files.read()：读取文件。</li><li>Files.write()：写入文件。</li></ul><h2 id="二、容器"><a href="#二、容器" class="headerlink" title="二、容器"></a>二、容器</h2><h4 id="1-java-容器都有哪些？"><a href="#1-java-容器都有哪些？" class="headerlink" title="1. java 容器都有哪些？"></a><strong>1. java 容器都有哪些？</strong></h4><p><img src="https://img-blog.csdnimg.cn/20190317184953342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="2-Collection-和-Collections-有什么区别？"><a href="#2-Collection-和-Collections-有什么区别？" class="headerlink" title="2. Collection 和 Collections 有什么区别？"></a><strong>2. Collection 和 Collections 有什么区别？</strong></h4><ul><li><strong>java.util.Collection 是一个集合接口</strong>（集合类的一个顶级接口）。<strong>它提供了对集合对象进行基本操作的通用接口方法</strong>。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</li><li><strong>Collections则是集合类的一个工具类</strong>/帮助类，<strong>其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</strong></li></ul><h4 id="3-List、Set、Map-之间的区别是什么？"><a href="#3-List、Set、Map-之间的区别是什么？" class="headerlink" title="3. List、Set、Map 之间的区别是什么？  ****************************************"></a><strong>3. List、Set、Map 之间的区别是什么？</strong>  ****************************************</h4><p><img src="https://img-blog.csdnimg.cn/20190317185014560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="4-HashMap-和-Hashtable-有什么区别？"><a href="#4-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="4. HashMap 和 Hashtable 有什么区别？"></a><strong>4. HashMap 和 Hashtable 有什么区别？</strong></h4><ul><li>hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。</li><li>hashTable同步的，而HashMap是非同步的，效率上比hashTable要高。</li><li>hashMap允许空键值，而hashTable不允许。</li></ul><h4 id="5-如何决定使用-HashMap-还是-TreeMap？"><a href="#5-如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="5. 如何决定使用 HashMap 还是 TreeMap？"></a><strong>5. 如何决定使用 HashMap 还是 TreeMap？</strong></h4><p>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p><h4 id="6-说一下-HashMap-的实现原理？"><a href="#6-说一下-HashMap-的实现原理？" class="headerlink" title="6. 说一下 HashMap 的实现原理？***************************"></a><strong>6. 说一下 HashMap 的实现原理？</strong>***************************</h4><p>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p><p><strong>HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</strong></p><p><strong>当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。</strong></p><p>需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)</p><h4 id="7-说一下-HashSet-的实现原理？"><a href="#7-说一下-HashSet-的实现原理？" class="headerlink" title="7. 说一下 HashSet 的实现原理？ ******************************"></a><strong>7. 说一下 HashSet 的实现原理？</strong> ******************************</h4><ul><li>HashSet底层由HashMap实现</li><li>HashSet的值存放于HashMap的key上</li><li>HashMap的value统一为PRESENT</li></ul><h4 id="8-ArrayList-和-LinkedList-的区别是什么？"><a href="#8-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="8. ArrayList 和 LinkedList 的区别是什么？"></a><strong>8. ArrayList 和 LinkedList 的区别是什么？</strong></h4><p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><h4 id="9-如何实现数组和-List-之间的转换？"><a href="#9-如何实现数组和-List-之间的转换？" class="headerlink" title="9. 如何实现数组和 List 之间的转换？"></a><strong>9. 如何实现数组和 List 之间的转换？</strong></h4><ul><li>List转换成为数组：调用ArrayList的toArray方法。</li><li>数组转换成为List：调用Arrays的asList方法。</li></ul><h4 id="10-ArrayList-和-Vector-的区别是什么？"><a href="#10-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="10. ArrayList 和 Vector 的区别是什么？"></a><strong>10. ArrayList 和 Vector 的区别是什么？</strong></h4><ul><li>Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 </li><li>ArrayList比Vector快，它因为有同步，不会过载。 </li><li>ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</li></ul><h4 id="11-在-Queue-中-poll-和-remove-有什么区别？"><a href="#11-在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="11. 在 Queue 中 poll()和 remove()有什么区别？"></a><strong>11. 在 Queue 中 poll()和 remove()有什么区别？</strong></h4><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h4 id="12-哪些集合类是线程安全的？"><a href="#12-哪些集合类是线程安全的？" class="headerlink" title="12. 哪些集合类是线程安全的？"></a><strong>12. 哪些集合类是线程安全的？</strong></h4><ul><li>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</li><li>statck：堆栈类，先进后出。</li><li>hashtable：就比hashmap多了个线程安全。</li><li>enumeration：枚举，相当于迭代器。</li></ul><h4 id="13-迭代器-Iterator-是什么？"><a href="#13-迭代器-Iterator-是什么？" class="headerlink" title="13. 迭代器 Iterator 是什么？"></a><strong>13. 迭代器 Iterator 是什么？</strong></h4><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p><h4 id="14-Iterator-怎么使用？有什么特点？"><a href="#14-Iterator-怎么使用？有什么特点？" class="headerlink" title="14. Iterator 怎么使用？有什么特点？"></a><strong>14. Iterator 怎么使用？有什么特点？</strong></h4><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><p>(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p><p>(2) 使用next()获得序列中的下一个元素。</p><p>(3) 使用hasNext()检查序列中是否还有元素。</p><p>(4) 使用remove()将迭代器新返回的元素删除。　</p><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h4 id="15-Iterator-和-ListIterator-有什么区别？"><a href="#15-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="15. Iterator 和 ListIterator 有什么区别？"></a><strong>15. Iterator 和 ListIterator 有什么区别？</strong></h4><ul><li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </li><li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </li><li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</li></ul><h2 id="三、多线程"><a href="#三、多线程" class="headerlink" title="三、多线程"></a>三、多线程</h2><h4 id="1-并行和并发有什么区别？"><a href="#1-并行和并发有什么区别？" class="headerlink" title="1. 并行和并发有什么区别？"></a>1. 并行和并发有什么区别？</h4><ul><li>并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。</li><li>并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。</li><li>在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。</li></ul><p>所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。</p><h4 id="2-线程和进程的区别？"><a href="#2-线程和进程的区别？" class="headerlink" title="2. 线程和进程的区别？"></a><strong>2. 线程和进程的区别？</strong></h4><p>简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。</p><h4 id="3-守护线程是什么？"><a href="#3-守护线程是什么？" class="headerlink" title="3. 守护线程是什么？"></a><strong>3. 守护线程是什么？</strong></h4><p>守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。</p><h4 id="4-创建线程有哪几种方式？"><a href="#4-创建线程有哪几种方式？" class="headerlink" title="4. 创建线程有哪几种方式？"></a><strong>4. 创建线程有哪几种方式？</strong></h4><p>①. 继承Thread类创建线程类</p><ul><li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>②. 通过Runnable接口创建线程类</p><ul><li>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>③. 通过Callable和Future创建线程</p><ul><li>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</li><li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</li><li>使用FutureTask对象作为Thread对象的target创建并启动新线程。</li><li>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</li></ul><h4 id="5-说一下-runnable-和-callable-有什么区别？"><a href="#5-说一下-runnable-和-callable-有什么区别？" class="headerlink" title="5. 说一下 runnable 和 callable 有什么区别？"></a><strong>5. 说一下 runnable 和 callable 有什么区别？</strong></h4><p>有点深的问题了，也看出一个Java程序员学习知识的广度。</p><ul><li>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；</li><li>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</li></ul><h4 id="6-线程有哪些状态"><a href="#6-线程有哪些状态" class="headerlink" title="6. 线程有哪些状态"></a>6. 线程有哪些状态</h4><p>线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。</p><ul><li>创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。</li><li>就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。</li><li>运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。</li><li>阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。</li><li>死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　</li></ul><h4 id="7-sleep-和-wait-有什么区别？"><a href="#7-sleep-和-wait-有什么区别？" class="headerlink" title="7. sleep() 和 wait() 有什么区别？"></a><strong>7. sleep() 和 wait() 有什么区别？</strong></h4><p>sleep()：方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</p><p>wait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程</p><h4 id="8-notify-和-notifyAll-有什么区别？"><a href="#8-notify-和-notifyAll-有什么区别？" class="headerlink" title="8. notify()和 notifyAll()有什么区别？**"></a>8. notify()和 notifyAll()有什么区别？**</h4><ul><li>如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。</li><li>当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。</li><li>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</li></ul><h4 id="9-线程的-run-和-start-有什么区别？"><a href="#9-线程的-run-和-start-有什么区别？" class="headerlink" title="9. 线程的 run()和 start()有什么区别？**"></a>9. 线程的 run()和 start()有什么区别？**</h4><p>每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。</p><p>start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。</p><p>run()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。 如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。</p><h4 id="10-创建线程池有哪几种方式？"><a href="#10-创建线程池有哪几种方式？" class="headerlink" title="10. 创建线程池有哪几种方式？"></a>10. 创建线程池有哪几种方式？</h4><p>①. newFixedThreadPool(int nThreads)</p><p>创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。</p><p>②. newCachedThreadPool()</p><p>创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。</p><p>③. newSingleThreadExecutor()</p><p>这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。</p><p>④. newScheduledThreadPool(int corePoolSize)</p><p>创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。</p><h4 id="11-线程池都有哪些状态？"><a href="#11-线程池都有哪些状态？" class="headerlink" title="11. 线程池都有哪些状态？"></a><strong>11. 线程池都有哪些状态？</strong></h4><p>线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。</p><p>线程池各个状态切换框架图：</p><p><img src="https://img-blog.csdnimg.cn/20190317183139734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p><p>详细解释见:<a href="https://blog.csdn.net/l_kanglin/article/details/57411851">Java多线程线程池（4）–线程池的五种状态</a></p><h4 id="12-线程池中-submit-和-execute-方法有什么区别？"><a href="#12-线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="12. 线程池中 submit()和 execute()方法有什么区别？"></a><strong>12. 线程池中 submit()和 execute()方法有什么区别？</strong></h4><ul><li>接收的参数不一样</li><li>submit有返回值，而execute没有</li><li>submit方便Exception处理</li></ul><h4 id="13-在-java-程序中怎么保证多线程的运行安全？"><a href="#13-在-java-程序中怎么保证多线程的运行安全？" class="headerlink" title="13. 在 java 程序中怎么保证多线程的运行安全？"></a><strong>13. 在 java 程序中怎么保证多线程的运行安全？</strong></h4><p>线程安全在三个方面体现：</p><ul><li>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；</li><li>可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；</li><li>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。</li></ul><h4 id="14-多线程锁的升级原理是什么？"><a href="#14-多线程锁的升级原理是什么？" class="headerlink" title="14. 多线程锁的升级原理是什么？"></a><strong>14. 多线程锁的升级原理是什么？</strong></h4><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。</p><p>锁升级的图示过程： </p><p><img src="https://img-blog.csdnimg.cn/20190317183206697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYWRvd196ZWQ=,size_16,color_FFFFFF,t_70" alt="img"></p><p>锁共有4种状态详解: <a href="http://ifeve.com/java-synchronized/">【Java多线程策略 一】锁的三种状态切换</a></p><h4 id="15-什么是死锁？"><a href="#15-什么是死锁？" class="headerlink" title="15. 什么是死锁？"></a><strong>15. 什么是死锁？</strong></h4><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p><h4 id="16-怎么防止死锁？"><a href="#16-怎么防止死锁？" class="headerlink" title="16. 怎么防止死锁？"></a><strong>16. 怎么防止死锁？</strong></h4><p>死锁的四个必要条件：</p><ul><li>互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源</li><li>请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放</li><li>不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放</li><li>环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系</li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。</p><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。</p><p>所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。</p><p>此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p><h4 id="17-ThreadLocal-是什么？有哪些使用场景？"><a href="#17-ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="17. ThreadLocal 是什么？有哪些使用场景？"></a><strong>17. ThreadLocal 是什么？有哪些使用场景？</strong></h4><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><h4 id="18-说一下-synchronized-底层实现原理？"><a href="#18-说一下-synchronized-底层实现原理？" class="headerlink" title="18.说一下 synchronized 底层实现原理？"></a><strong>18.说一下 synchronized 底层实现原理？</strong></h4><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。</p><p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p><ul><li>普通同步方法，锁是当前实例对象</li><li>静态同步方法，锁是当前类的class对象</li><li>同步方法块，锁是括号里面的对象</li></ul><h4 id="19-synchronized-和-volatile-的区别是什么？"><a href="#19-synchronized-和-volatile-的区别是什么？" class="headerlink" title="19. synchronized 和 volatile 的区别是什么？"></a><strong>19. synchronized 和 volatile 的区别是什么？</strong></h4><ul><li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li><li>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</li><li>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</li><li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li><li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</li></ul><h4 id="20-synchronized-和-Lock-有什么区别？"><a href="#20-synchronized-和-Lock-有什么区别？" class="headerlink" title="20. synchronized 和 Lock 有什么区别？"></a><strong>20. synchronized 和 Lock 有什么区别？</strong></h4><ul><li>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</li><li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</li><li>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li><li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li><li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</li><li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li></ul><h4 id="21-synchronized-和-ReentrantLock-区别是什么？"><a href="#21-synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="21. synchronized 和 ReentrantLock 区别是什么？"></a><strong>21. synchronized 和 ReentrantLock 区别是什么？</strong></h4><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： </p><ul><li>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 </li><li>ReentrantLock可以获取各种锁的信息</li><li>ReentrantLock可以灵活地实现多路通知 </li></ul><p>另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。</p><h4 id="22-说一下-atomic-的原理？"><a href="#22-说一下-atomic-的原理？" class="headerlink" title="22. 说一下 atomic 的原理？"></a><strong>22. 说一下 atomic 的原理？</strong></h4><p>Atomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。</p><p>Atomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。</p><h2 id="四、反射"><a href="#四、反射" class="headerlink" title="四、反射"></a>四、反射</h2><h4 id="1-什么是反射？"><a href="#1-什么是反射？" class="headerlink" title="1. 什么是反射？"></a><strong>1. 什么是反射？</strong></h4><p>反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力</p><p><strong>Java反射</strong>：</p><p>在Java运行时环境中，对于任意一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法</p><p>Java反射机制主要提供了以下功能：</p><ul><li>在运行时判断任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时判断任意一个类所具有的成员变量和方法。</li><li>在运行时调用任意一个对象的方法。 </li></ul><h4 id="2-什么是-java-序列化？什么情况下需要序列化？"><a href="#2-什么是-java-序列化？什么情况下需要序列化？" class="headerlink" title="2. 什么是 java 序列化？什么情况下需要序列化？"></a><strong>2. 什么是 java 序列化？什么情况下需要序列化？</strong></h4><p>简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。</p><p>什么情况下需要序列化：</p><p>a）当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；<br>b）当你想用套接字在网络上传送对象的时候；<br>c）当你想通过RMI传输对象的时候；</p><h4 id="3-动态代理是什么？有哪些应用？"><a href="#3-动态代理是什么？有哪些应用？" class="headerlink" title="3. 动态代理是什么？有哪些应用？"></a><strong>3. 动态代理是什么？有哪些应用？</strong></h4><p>动态代理：</p><p>当想要给实现了某个接口的类中的方法，加一些额外的处理。比如说加日志，加事务等。可以给这个类创建一个代理，故名思议就是创建一个新的类，这个类不仅包含原来类方法的功能，而且还在原来的基础上添加了额外处理的新类。这个代理类并不是定义好的，是动态生成的。具有解耦意义，灵活，扩展性强。</p><p>动代理的应用：</p><ul><li>Spring的AOP</li><li>加事务</li><li>加权限</li><li>加日志</li></ul><h4 id="4-怎么实现动态代理？"><a href="#4-怎么实现动态代理？" class="headerlink" title="4. 怎么实现动态代理？"></a><strong>4. 怎么实现动态代理？</strong></h4><p>首先必须定义一个接口，还要有一个InvocationHandler(将实现接口的类的对象传递给它)处理类。再有一个工具类Proxy(习惯性将其称为代理类，因为调用他的newInstance()可以产生代理对象,其实他只是一个产生代理对象的工具类）。利用到InvocationHandler，拼接代理类源码，将其编译生成代理类的二进制码，利用加载器加载，并将其实例化产生代理对象，最后返回。</p><h2 id="五、对象拷贝"><a href="#五、对象拷贝" class="headerlink" title="五、对象拷贝"></a>五、对象拷贝</h2><h4 id="1-为什么要使用克隆？"><a href="#1-为什么要使用克隆？" class="headerlink" title="1. 为什么要使用克隆？"></a><strong>1. 为什么要使用克隆？</strong></h4><p>想对一个对象进行处理，又想保留原有的数据进行接下来的操作，就需要克隆了，Java语言中克隆针对的是类的实例。</p><h4 id="2-如何实现对象克隆？"><a href="#2-如何实现对象克隆？" class="headerlink" title="2. 如何实现对象克隆？"></a><strong>2. 如何实现对象克隆？</strong></h4><p>有两种方式：</p><ul><li>实现Cloneable接口并重写Object类中的clone()方法；</li><li>实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MyUtil</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError();<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T extends Serializable&gt; <span class="hljs-function">T <span class="hljs-title">clone</span><span class="hljs-params">(T obj)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ByteArrayOutputStream bout = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bout);<br>        oos.writeObject(obj);<br><br>        ByteArrayInputStream bin = <span class="hljs-keyword">new</span> ByteArrayInputStream(bout.toByteArray());<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(bin);<br>        <span class="hljs-keyword">return</span> (T) ois.readObject();<br><br>        <span class="hljs-comment">// 说明：调用ByteArrayInputStream或ByteArrayOutputStream对象的close方法没有任何意义</span><br>        <span class="hljs-comment">// 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这一点不同于对外部资源（如文件流）的释放</span><br>    &#125;<br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627</span><br></code></pre></td></tr></table></figure><p>下面是测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 人类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> nnngu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">9102017020286042305L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;        <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">private</span> Car car;        <span class="hljs-comment">// 座驾</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, Car car)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">getCar</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> car;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCar</span><span class="hljs-params">(Car car)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.car = car;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, car=&quot;</span> + car + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小汽车类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> nnngu</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">5713945027627603702L</span>;<br><br>    <span class="hljs-keyword">private</span> String brand;       <span class="hljs-comment">// 品牌</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSpeed;       <span class="hljs-comment">// 最高时速</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(String brand, <span class="hljs-keyword">int</span> maxSpeed)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>        <span class="hljs-keyword">this</span>.maxSpeed = maxSpeed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBrand</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBrand</span><span class="hljs-params">(String brand)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMaxSpeed</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> maxSpeed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxSpeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSpeed)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.maxSpeed = maxSpeed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car [brand=&quot;</span> + brand + <span class="hljs-string">&quot;, maxSpeed=&quot;</span> + maxSpeed + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-number">123456789101112131415161718192021222324252627282930313233343536373839</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CloneTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;郭靖&quot;</span>, <span class="hljs-number">33</span>, <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;Benz&quot;</span>, <span class="hljs-number">300</span>));<br>            Person p2 = MyUtil.clone(p1);   <span class="hljs-comment">// 深度克隆</span><br>            p2.getCar().setBrand(<span class="hljs-string">&quot;BYD&quot;</span>);<br>            <span class="hljs-comment">// 修改克隆的Person对象p2关联的汽车对象的品牌属性</span><br>            <span class="hljs-comment">// 原来的Person对象p1关联的汽车不会受到任何影响</span><br>            <span class="hljs-comment">// 因为在克隆Person对象时其关联的汽车对象也被克隆了</span><br>            System.out.println(p1);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617</span><br></code></pre></td></tr></table></figure><p>注意：基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种是方案明显优于使用Object类的clone方法克隆对象。让问题在编译的时候暴露出来总是好过把问题留到运行时。</p><h4 id="3-深拷贝和浅拷贝区别是什么？"><a href="#3-深拷贝和浅拷贝区别是什么？" class="headerlink" title="3. 深拷贝和浅拷贝区别是什么？"></a><strong>3. 深拷贝和浅拷贝区别是什么？</strong></h4><ul><li>浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化，这就是浅拷贝（例：assign()）</li><li>深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变，这就是深拷贝（例：JSON.parse()和JSON.stringify()，但是此方法无法复制函数类型）</li></ul><h2 id="六、JavaWeb"><a href="#六、JavaWeb" class="headerlink" title="六、JavaWeb"></a>六、JavaWeb</h2><h2 id="七、异常"><a href="#七、异常" class="headerlink" title="七、异常"></a>七、异常</h2><h4 id="1-throw-和-throws-的区别？"><a href="#1-throw-和-throws-的区别？" class="headerlink" title="1. throw 和 throws 的区别？"></a><strong>1. throw 和 throws 的区别？</strong></h4><p>throws是用来声明一个方法可能抛出的所有异常信息，throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。而throw则是指抛出的一个具体的异常类型。</p><h4 id="2-final、finally、finalize-有什么区别？"><a href="#2-final、finally、finalize-有什么区别？" class="headerlink" title="2. final、finally、finalize 有什么区别？"></a><strong>2. final、finally、finalize 有什么区别？</strong></h4><ul><li>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li><li>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li><li>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾。</li></ul><h4 id="3-try-catch-finally-中哪个部分可以省略？"><a href="#3-try-catch-finally-中哪个部分可以省略？" class="headerlink" title="3. try-catch-finally 中哪个部分可以省略？"></a><strong>3. try-catch-finally 中哪个部分可以省略？</strong></h4><p>答：catch 可以省略</p><p><strong>原因：</strong></p><p>更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。</p><p>理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾处理，或者加上catch捕获以便进一步处理。</p><p>至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p><h4 id="4-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？"><a href="#4-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？" class="headerlink" title="4. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？"></a><strong>4. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？</strong></h4><p>答：会执行，在 return 前执行。</p><p>代码示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * java面试题--如果catch里面有return语句，finally里面的代码还会执行吗？</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinallyDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(getInt());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getInt</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(a / <span class="hljs-number">0</span>);<br>            a = <span class="hljs-number">20</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            a = <span class="hljs-number">30</span>;<br>            <span class="hljs-keyword">return</span> a;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span><br><span class="hljs-comment">             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span><br><span class="hljs-comment">             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span><br><span class="hljs-comment">             */</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            a = <span class="hljs-number">40</span>;<br>        &#125;<br><br><span class="hljs-comment">//      return a;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526272829</span><br></code></pre></td></tr></table></figure><p>执行结果：30</p><p>代码示例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java_02;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * java面试题--如果catch里面有return语句，finally里面的代码还会执行吗？</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinallyDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(getInt());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getInt</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(a / <span class="hljs-number">0</span>);<br>            a = <span class="hljs-number">20</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            a = <span class="hljs-number">30</span>;<br>            <span class="hljs-keyword">return</span> a;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span><br><span class="hljs-comment">             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span><br><span class="hljs-comment">             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span><br><span class="hljs-comment">             */</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            a = <span class="hljs-number">40</span>;<br>            <span class="hljs-keyword">return</span> a; <span class="hljs-comment">//如果这样，就又重新形成了一条返回路径，由于只能通过1个return返回，所以这里直接返回40</span><br>        &#125;<br><br><span class="hljs-comment">//      return a;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-number">1234567891011121314151617181920212223242526272829303132</span><br></code></pre></td></tr></table></figure><p>执行结果：40</p><h4 id="5-常见的异常类有哪些？"><a href="#5-常见的异常类有哪些？" class="headerlink" title="5. 常见的异常类有哪些？"></a><strong>5. 常见的异常类有哪些？</strong></h4><ul><li>NullPointerException：当应用程序试图访问空对象时，则抛出该异常。</li><li>SQLException：提供关于数据库访问错误或其他错误信息的异常。</li><li>IndexOutOfBoundsException：指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</li><li>NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li><li>FileNotFoundException：当试图打开指定路径名表示的文件失败时，抛出此异常。</li><li>IOException：当发生某种I/O异常时，抛出此异常。此类是失败或中断的I/O操作生成的异常的通用类。</li><li>ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常。</li><li>ArrayStoreException：试图将错误类型的对象存储到一个对象数组时抛出的异常。</li><li>IllegalArgumentException：抛出的异常表明向方法传递了一个不合法或不正确的参数。</li><li>ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。</li><li>NegativeArraySizeException：如果应用程序试图创建大小为负的数组，则抛出该异常。</li><li>NoSuchMethodException：无法找到某一特定方法时，抛出该异常。</li><li>SecurityException：由安全管理器抛出的异常，指示存在安全侵犯。</li><li>UnsupportedOperationException：当不支持请求的操作时，抛出该异常。</li><li>RuntimeExceptionRuntimeException：是那些可能在Java虚拟机正常运行期间抛出的异常的超类。</li></ul><h2 id="八、Spring-SpringMVC"><a href="#八、Spring-SpringMVC" class="headerlink" title="八、Spring/SpringMVC"></a>八、Spring/SpringMVC</h2><h4 id="1-为什么要使用-spring？"><a href="#1-为什么要使用-spring？" class="headerlink" title="1. 为什么要使用 spring？"></a><strong>1. 为什么要使用 spring？</strong></h4><p><strong>1.简介</strong></p><ul><li>目的：解决企业应用开发的复杂性</li><li>功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能</li><li>范围：任何Java应用</li></ul><p>简单来说，Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。</p><p><strong>2.轻量</strong></p><p>从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。</p><p><strong>3.控制反转</strong></p><p>Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</p><p><strong>4.面向切面</strong></p><p>Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。</p><p><strong>5.容器</strong></p><p>Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。</p><p><strong>6.框架</strong></p><p>Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。</p><p>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。</p><h4 id="2-解释一下什么是-aop？"><a href="#2-解释一下什么是-aop？" class="headerlink" title="2. 解释一下什么是 aop？"></a><strong>2. 解释一下什么是 aop？</strong></h4><p>AOP（Aspect-Oriented Programming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p><p>使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p><h4 id="3-解释一下什么是-ioc？"><a href="#3-解释一下什么是-ioc？" class="headerlink" title="3. 解释一下什么是 ioc？"></a><strong>3. 解释一下什么是 ioc？</strong></h4><p>IOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”。</p><p>1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC 这个概念。对于面向对象设计及编程的基本思想，前面我们已经讲了很多了，不再赘述，简单来说就是把复杂系统分解成相互合作的对象，这些对象类通过封装以后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。</p><p>IOC理论提出的观点大体是这样的：借助于“第三方”实现具有依赖关系的对象之间的解耦。如下图：<br><img src="https://img-blog.csdnimg.cn/20190403225122217.png" alt="在这里插入图片描述"><br>大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。</p><p>我们再来做个试验：把上图中间的IOC容器拿掉，然后再来看看这套系统：<br><img src="https://img-blog.csdnimg.cn/20190403225133997.png" alt="在这里插入图片描述"><br>我们现在看到的画面，就是我们要实现整个系统所需要完成的全部内容。这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。所以，如果真能实现IOC容器，对于系统开发而言，这将是一件多么美好的事情，参与开发的每一成员只要实现自己的类就可以了，跟别人没有任何关系！</p><p>我们再来看看，控制反转(IOC)到底为什么要起这么个名字？我们来对比一下：</p><p>软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。</p><p>软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。</p><p>通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。</p><h4 id="4-spring-有哪些主要模块？"><a href="#4-spring-有哪些主要模块？" class="headerlink" title="4. spring 有哪些主要模块？"></a><strong>4. spring 有哪些主要模块？</strong></h4><p>Spring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。</p><p><img src="https://img-blog.csdnimg.cn/20190403225214984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTMyNTE2OTAyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190403225236863.png" alt="在这里插入图片描述"></p><h4 id="5-spring-常用的注入方式有哪些？"><a href="#5-spring-常用的注入方式有哪些？" class="headerlink" title="5. spring 常用的注入方式有哪些？"></a><strong>5. spring 常用的注入方式有哪些？</strong></h4><p>Spring通过DI（依赖注入）实现IOC（控制反转），常用的注入方式主要有三种：</p><ul><li>构造方法注入</li><li>setter注入</li><li>基于注解的注入</li></ul><h4 id="6-spring-中的-bean-是线程安全的吗？"><a href="#6-spring-中的-bean-是线程安全的吗？" class="headerlink" title="6. spring 中的 bean 是线程安全的吗？"></a><strong>6. spring 中的 bean 是线程安全的吗？</strong></h4><p>Spring容器中的Bean是否线程安全，容器本身并没有提供Bean的线程安全策略，因此可以说spring容器中的Bean本身不具备线程安全的特性，但是具体还是要结合具体scope的Bean去研究。</p><h4 id="7-spring-支持几种-bean-的作用域？"><a href="#7-spring-支持几种-bean-的作用域？" class="headerlink" title="7. spring 支持几种 bean 的作用域？"></a><strong>7. spring 支持几种 bean 的作用域？</strong></h4><p>当通过spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下5种作用域：</p><ul><li>singleton：单例模式，在整个Spring IoC容器中，使用singleton定义的Bean将只有一个实例</li><li>prototype：原型模式，每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例</li><li>equest：对于每次HTTP请求，使用request定义的Bean都将产生一个新实例，即每次HTTP请求将会产生不同的Bean实例。只有在Web应用中使用Spring时，该作用域才有效</li><li>session：对于每次HTTP Session，使用session定义的Bean豆浆产生一个新实例。同样只有在Web应用中使用Spring时，该作用域才有效</li><li>globalsession：每个全局的HTTP Session，使用session定义的Bean都将产生一个新实例。典型情况下，仅在使用portlet context的时候有效。同样只有在Web应用中使用Spring时，该作用域才有效</li></ul><p>其中比较常用的是singleton和prototype两种作用域。对于singleton作用域的Bean，每次请求该Bean都将获得相同的实例。容器负责跟踪Bean实例的状态，负责维护Bean实例的生命周期行为；如果一个Bean被设置成prototype作用域，程序每次请求该id的Bean，Spring都会新建一个Bean实例，然后返回给程序。在这种情况下，Spring容器仅仅使用new 关键字创建Bean实例，一旦创建成功，容器不在跟踪实例，也不会维护Bean实例的状态。</p><p>如果不指定Bean的作用域，Spring默认使用singleton作用域。Java在创建Java实例时，需要进行内存申请；销毁实例时，需要完成垃圾回收，这些工作都会导致系统开销的增加。因此，prototype作用域Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成功，可以重复使用。因此，除非必要，否则尽量避免将Bean被设置成prototype作用域。</p><h4 id="8-spring-自动装配-bean-有哪些方式？"><a href="#8-spring-自动装配-bean-有哪些方式？" class="headerlink" title="8. spring 自动装配 bean 有哪些方式？"></a><strong>8. spring 自动装配 bean 有哪些方式？</strong></h4><p>Spring容器负责创建应用程序中的bean同时通过ID来协调这些对象之间的关系。作为开发人员，我们需要告诉Spring要创建哪些bean并且如何将其装配到一起。</p><p>spring中bean装配有两种方式：</p><ul><li>隐式的bean发现机制和自动装配</li><li>在java代码或者XML中进行显示配置</li></ul><p>当然这些方式也可以配合使用。</p><h4 id="9-spring-事务实现方式有哪些？"><a href="#9-spring-事务实现方式有哪些？" class="headerlink" title="9. spring 事务实现方式有哪些？"></a><strong>9. spring 事务实现方式有哪些？</strong></h4><ul><li>编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。</li><li>基于 TransactionProxyFactoryBean 的声明式事务管理</li><li>基于 @Transactional 的声明式事务管理</li><li>基于 Aspectj AOP 配置事务</li></ul><h4 id="10-说一下-spring-的事务隔离？"><a href="#10-说一下-spring-的事务隔离？" class="headerlink" title="10. 说一下 spring 的事务隔离？"></a><strong>10. 说一下 spring 的事务隔离？</strong></h4><p>事务隔离级别指的是一个事务对数据的修改与另一个并行的事务的隔离程度，当多个事务同时访问相同数据时，如果没有采取必要的隔离机制，就可能发生以下问题：</p><ul><li>脏读：一个事务读到另一个事务未提交的更新数据。</li><li>幻读：例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样。</li><li>不可重复读：比方说在同一个事务中先后执行两条一模一样的select语句，期间在此次事务中没有执行过任何DDL语句，但先后得到的结果不一致，这就是不可重复读。</li></ul><h4 id="11-说一下-spring-mvc-运行流程？"><a href="#11-说一下-spring-mvc-运行流程？" class="headerlink" title="11. 说一下 spring mvc 运行流程？"></a><strong>11. 说一下 spring mvc 运行流程？</strong></h4><p>Spring MVC运行流程图：</p><p><img src="https://img-blog.csdnimg.cn/20190403225709389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTMyNTE2OTAyMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">Spring运行流程描述：</p><ol><li>用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获；</li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；</li><li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</li><li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li></ol><blockquote><p>1、HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>2、数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>3、数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等<br>4、数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p></blockquote><ol><li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；</li><li>根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；</li><li>ViewResolver 结合Model和View，来渲染视图；</li><li>将渲染结果返回给客户端。</li></ol><h4 id="12-spring-mvc-有哪些组件？"><a href="#12-spring-mvc-有哪些组件？" class="headerlink" title="12. spring mvc 有哪些组件？"></a><strong>12. spring mvc 有哪些组件？</strong></h4><p>Spring MVC的核心组件：</p><ul><li>DispatcherServlet：中央控制器，把请求给转发到具体的控制类</li><li>Controller：具体处理请求的控制器</li><li>HandlerMapping：映射处理器，负责映射中央处理器转发给controller时的映射策略</li><li>ModelAndView：服务层返回的数据和视图层的封装类</li><li>ViewResolver：视图解析器，解析具体的视图</li><li>Interceptors ：拦截器，负责拦截我们定义的请求然后做处理工作</li></ul><h4 id="13-RequestMapping-的作用是什么？"><a href="#13-RequestMapping-的作用是什么？" class="headerlink" title="13. @RequestMapping 的作用是什么？"></a><strong>13. @RequestMapping 的作用是什么？</strong></h4><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p>RequestMapping注解有六个属性，下面我们把她分成三类进行说明。</p><p><strong>value， method：</strong></p><ul><li>value：指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</li><li>method：指定请求的method类型， GET、POST、PUT、DELETE等；<br><strong>consumes，produces</strong></li><li>consumes：指定处理请求的提交内容类型（Content-Type），例如application/json, text/html；</li><li>produces：指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</li></ul><p><strong>params，headers</strong></p><ul><li>arams： 指定request中必须包含某些参数值是，才让该方法处理。</li><li>headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。</li></ul><h4 id="14-Autowired-的作用是什么？"><a href="#14-Autowired-的作用是什么？" class="headerlink" title="14. @Autowired 的作用是什么？"></a><strong>14. @Autowired 的作用是什么？</strong></h4>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>面试</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java规范</title>
    <link href="/2021/12/18/java%E8%A7%84%E8%8C%83/"/>
    <url>/2021/12/18/java%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Java规范"><a href="#Java规范" class="headerlink" title="Java规范"></a>Java规范</h1><h2 id="一、命名规范"><a href="#一、命名规范" class="headerlink" title="一、命名规范"></a>一、命名规范</h2><ol><li>【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。<br>反例： _name / _<em>name / $Object / name</em> / name$ / Object$</li><li>【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br>说明： 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式<br>也要避免采用。<br>正例： alibaba / taobao / youku / hangzhou 等国际通用的名称， 可视同英文。<br>反例： DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</li><li>【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： DO / BO /<br>DTO / VO / AO<br>正例： MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion<br>反例： macroPolo / UserDo / XMLService / TCPUDPDeal / TAPromotion</li><li>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<br>驼峰形式。<br>正例： localValue / getHttpMessage() / inputUserId</li><li>【 强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>正例： MAX_STOCK_COUNT<br>反例： MAX_COUNT</li><li>【强制】抽象类命名使用 Abstract 或 Base 开头； 异常类命名使用 Exception 结尾； 测试类<br>命名以它要测试的类的名称开始，以 Test 结尾。</li><li>【强制】中括号是数组类型的一部分，数组定义如下： String[] args;<br>反例： 使用 String args[]的方式来定义。</li><li>【强制】 POJO 类中布尔类型的变量，都不要加 is，否则部分框架解析会引起序列化错误。<br>反例： 定义为基本数据类型 Boolean isDeleted； 的属性，它的方法也是 isDeleted()， RPC<br>框架在反向解析的时候， “以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异<br>常。</li><li>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<br>单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>正例： 应用工具类包名为 com.alibaba.open.util、类名为 MessageUtils（ 此规则参考<br>spring 的框架结构）</li><li>【强制】杜绝完全不规范的缩写， 避免望文不知义。<br>反例： AbstractClass“ 缩写” 命名成 AbsClass； condition“ 缩写” 命名成 condi，此类<br>随意缩写严重降低了代码的可阅读性。</li><li>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。<br>说明： 将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br>正例： public class OrderFactory;<br>public class LoginProxy;<br>public class ResourceObserver;</li><li>【推荐】接口类中的方法和属性不要加任何修饰符号（ public 也不要加） ，保持代码的简洁<br>性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是<br>与接口方法相关，并且是整个应用的基础常量。<br>正例： 接口方法签名： void f();<br>接口基础常量表示： String COMPANY = “alibaba”;<br>反例： 接口方法定义： public abstract void f();<br>说明： JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默<br>认实现。</li><li>接口和实现类的命名有两套规则：<br>1） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部<br>的实现类用 Impl 的后缀与接口区别。<br>正例： CacheServiceImpl 实现 CacheService 接口。<br>2）【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是–able 的形式）。<br>正例： AbstractTranslator 实现 Translatable。</li><li>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>说明： 枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br>正例： 枚举名字： DealStatusEnum， 成员名称： SUCCESS / UNKOWN_REASON。</li><li>【参考】各层命名规约：<br>A) Service/DAO 层方法命名规约<br>1） 获取单个对象的方法用 get 做前缀。<br>2） 获取多个对象的方法用 list 做前缀。<br>3） 获取统计值的方法用 count 做前缀。<br>4） 插入的方法用 save（ 推荐） 或 insert 做前缀。<br>5） 删除的方法用 remove（ 推荐） 或 delete 做前缀。<br>6） 修改的方法用 update 做前缀。<br>B) 领域模型命名规约<br>1） 数据对象： xxxDO， xxx 即为数据表名。<br>2） 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。<br>3） 展示对象： xxxVO， xxx 一般为网页名称。<br>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li></ol><h2 id="二、常量定义"><a href="#二、常量定义" class="headerlink" title="二、常量定义"></a>二、常量定义</h2><ol><li>【强制】不允许任何魔法值（ 即未经定义的常量） 直接出现在代码中。<br>反例： String key = “Id#taobao_” + tradeId;<br>cache.put(key, value);</li><li>【强制】 long 或者 Long 初始赋值时，必须使用大写的 L，不能是小写的 l，小写容易跟数字<br>1 混淆，造成误解。<br>说明： Long a = 2l; 写的是数字的 21，还是 Long 型的 2?</li><li>【推荐】不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。如：缓存<br>相关的常量放在类： CacheConsts 下； 系统配置相关的常量放在类： ConfigConsts 下。<br>说明： 大而全的常量类，非得使用查找功能才能定位到修改的常量，不利于理解和维护。</li><li>【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包<br>内共享常量、类内共享常量。<br>1） 跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。<br>2） 应用内共享常量：放置在一方库的 modules 中的 constant 目录下。<br>反例： 易懂变量也要统一定义成应用内共享常量，两位攻城师在两个类中分别定义了表示<br>“是”的变量：<br>类 A 中： public static final String YES = “yes”;<br>类 B 中： public static final String YES = “y”;<br>A.YES.equals(B.YES)，预期是 true，但实际返回为 false，导致线上问题。<br>3） 子工程内部共享常量：即在当前子工程的 constant 目录下。<br>4） 包内共享常量：即在当前包下单独的 constant 目录下。<br>5） 类内共享常量：直接在类内部 private static final 定义。</li><li>【推荐】如果变量值仅在一个范围内变化，且带有名称之外的延伸属性， 定义为枚举类。下面<br>正例中的数字就是延伸信息，表示星期几。<br>正例： public Enum { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6),<br>SUNDAY(7);}</li></ol><h2 id="三、代码格式"><a href="#三、代码格式" class="headerlink" title="三、代码格式"></a>三、代码格式</h2><ol><li>【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行； 如果<br>是非空代码块则：<br>1） 左大括号前不换行。<br>2） 左大括号后换行。<br>3） 右大括号前换行。<br>4） 右大括号后还有 else 等代码则不换行； 表示终止的右大括号后必须换行。</li><li>【强制】 左小括号和字符之间不出现空格； 同样，右小括号和字符之间也不出现空格。详见<br>第 5 条下方正例提示。<br>反例： if (空格 a == b 空格)</li><li>【强制】 if/for/while/switch/do 等保留字与括号之间都必须加空格。</li><li>【强制】任何二目、 三目运算符的左右两边都需要加一个空格。<br>说明： 运算符包括赋值运算符=、逻辑运算符&amp;&amp;、加减乘除符号等。</li><li>【强制】 缩进采用 4 个空格，禁止使用 tab 字符。<br>说明： 如果使用 tab 缩进，必须设置 1 个 tab 为 4 个空格。 IDEA 设置 tab 为 4 个空格时，<br>请勿勾选 Use tab character；而在 eclipse 中，必须勾选 insert spaces for tabs。<br>正例： （ 涉及 1-5 点）<br>public static void main(String[] args) {<br>// 缩进 4 个空格<br>String say = “hello”;<br>// 运算符的左右必须有一个空格<br>int flag = 0;<br>// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号， 0 与右括号不需要空格<br>if (flag == 0) {<br>System.out.println(say);<br>}<br>// 左大括号前加空格且不换行；左大括号后换行<br>if (flag == 1) {<br>System.out.println(“world”);<br>// 右大括号前换行，右大括号后有 else，不用换行<br>} else {<br>System.out.println(“ok”);<br>// 在右大括号后直接结束，则必须换行<br>}<br>}</li><li>【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：<br>1） 第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。<br>2） 运算符与下文一起换行。<br>3） 方法调用的点符号与下文一起换行。<br>4） 在多个参数超长， 在逗号后换行。<br>5） 在括号前不要换行，见反例。<br>正例：<br>StringBuffer sb = new StringBuffer();<br>//超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点符号一起换行<br>sb.append(“zi”).append(“xin”)…<br>.append(“huang”)…<br>.append(“huang”)…<br>.append(“huang”);<br>反例：<br>StringBuffer sb = new StringBuffer();<br>//超过 120 个字符的情况下，不要在括号前换行<br>sb.append(“zi”).append(“xin”)…append<br>(“huang”);<br>//参数很多的方法调用可能超过 120 个字符， 不要在逗号前换行<br>method(args1, args2, args3, …<br>, argsX);</li><li>【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。<br>正例： 下例中实参的”a”,后边必须要有一个空格。<br>method(“a”, “b”, “c”);</li><li>【强制】 IDE 的 text file encoding 设置为 UTF-8; IDE 中文件的换行符使用 Unix 格式，<br>不要使用 windows 格式。</li><li>【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。<br>正例：<br>int a = 3;<br>long b = 4L;<br>float c = 5F;<br>StringBuffer sb = new StringBuffer();<br>说明： 增加 sb 这个变量，如果需要对齐，则给 a、 b、 c 都要增加几个空格，在变量比较多的<br>情况下，是一种累赘的事情。</li><li>【推荐】方法体内的执行语句组、变量的定义语句组、不同的业务逻辑之间或者不同的语义<br>之间插入一个空行。相同业务逻辑和语义之间不需要插入空行。<br>说明： 没有必要插入多个空行进行隔开。</li></ol><h2 id="四、OOP-规约"><a href="#四、OOP-规约" class="headerlink" title="四、OOP 规约"></a>四、OOP 规约</h2><ol><li>【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成<br>本，直接用类名来访问即可。</li><li>【强制】所有的覆写方法，必须加@Override 注解。<br>说明： getObject()与 get0bject()的问题。一个是字母的 O，一个是数字的 0，加@Override<br>可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编<br>译报错。</li><li>【强制】 相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。<br>说明： 可变参数必须放置在参数列表的最后。 （ 提倡同学们尽量不用可变参数编程）<br>正例： public User getUsers(String type, Integer… ids) {…}</li><li>【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生<br>影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</li><li>【强制】不能使用过时的类或方法。<br>说明： java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应<br>该使用双参数 decode(String source, String encode)。接口提供方既然明确是过时接口，<br>那么有义务同时提供新的接口； 作为调用方来说，有义务去考证过时方法的新实现是什么。</li><li>【强制】 Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用<br>equals。<br>正例： “test”.equals(object);<br>反例： object.equals(“test”);<br>说明： 推荐使用 java.util.Objects#equals （ JDK7 引入的工具类）</li><li>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。<br>说明： 对于 Integer var = ? 在-128 至 127 范围内的赋值， Integer 对象是在<br>IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行<br>判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，<br>推荐使用 equals 方法进行判断。</li><li>关于基本数据类型与包装数据类型的使用标准如下：<br>1） 【强制】 所有的 POJO 类属性必须使用包装数据类型。<br>2） 【强制】 RPC 方法的返回值和参数必须使用包装数据类型。<br>3） 【 推荐】 所有的局部变量使用基本数据类型。<br>说明： POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何<br>NPE 问题，或者入库检查，都由使用者来保证。<br>正例： 数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。<br>反例： 比如显示成交总额涨跌情况，即正负 x%， x 为基本数据类型，调用的 RPC 服务，调用<br>不成功时， 返回的是默认值，页面显示： 0%，这是不合理的，应该显示成中划线-。所以包装<br>数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。</li><li>【强制】定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。<br>反例： POJO 类的 gmtCreate 默认值为 new Date();但是这个属性在数据提取时并没有置入具<br>体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</li><li>【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败； 如<br>果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。<br>说明： 注意 serialVersionUID 不一致会抛出序列化运行时异常。</li><li>【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</li><li>【强制】 POJO 类必须写 toString 方法。使用 IDE 的中工具： source&gt; generate toString<br>时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。<br>说明： 在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排<br>查问题。</li><li>【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无<br>内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。<br>说明：<br>String str = “a,b,c,,”;<br>String[] ary = str.split(“,”);<br>//预期大于 3，结果是 3<br>System.out.println(ary.length);</li><li>【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，<br>便于阅读。</li><li>【推荐】 类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter/setter<br>方法。<br>说明： 公有方法是类的调用者和维护者最关心的方法，首屏展示最好； 保护方法虽然只是子类<br>关心，也可能是“模板设计模式”下的核心方法； 而私有方法外部一般不需要特别关心，是一个<br>黑盒实现； 因为方法信息价值较低，所有 Service 和 DAO 的 getter/setter 方法放在类体最<br>后。</li><li>【推荐】 setter 方法中，参数名称与类成员变量名称一致， this.成员名 = 参数名。在<br>getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。<br>反例：<br>public Integer getData() {<br>if (true) {<br>return this.data + 100;<br>} else {<br>return this.data - 100;<br>}<br>}</li><li>【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。<br>说明： 反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行<br>append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。<br>反例：<br>String str = “start”;<br>for (int i = 0; i &lt; 100; i++) {<br>str = str + “hello”;<br>}</li><li>【推荐】 final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：<br>1） 不允许被继承的类，如： String 类。<br>2） 不允许修改引用的域对象，如： POJO 类的域变量。<br>3） 不允许被重写的方法，如： POJO 类的 setter 方法。<br>4） 不允许运行过程中重新赋值的局部变量。<br>5） 避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好<br>地进行重构。</li><li>【推荐】慎用 Object 的 clone 方法来拷贝对象。<br>说明： 对象的 clone 方法默认是浅拷贝，若想实现深拷贝需要重写 clone 方法实现属性对象<br>的拷贝。</li><li>【推荐】类成员与方法访问控制从严：<br>1） 如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。<br>2） 工具类不允许有 public 或 default 构造方法。<br>3） 类非 static 成员变量并且与子类共享，必须是 protected。<br>4） 类非 static 成员变量并且仅在本类使用，必须是 private。<br>5） 类 static 成员变量如果仅在本类使用，必须是 private。<br>6） 若是 static 成员变量，必须考虑是否为 final。<br>7） 类成员方法只供类内部调用，必须是 private。<br>8） 类成员方法只对继承类公开，那么限制为 protected。<br>说明： 任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。<br>思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 方法，或者<br>一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的<br>视线内，变量作用域太大，如果无限制的到处跑，那么你会担心的</li></ol><h2 id="五、集合处理"><a href="#五、集合处理" class="headerlink" title="五、集合处理"></a>五、集合处理</h2><ol><li><p>【强制】 关于 hashCode 和 equals 的处理，遵循如下规则：<br> 1） 只要重写 equals，就必须重写 hashCode。<br> 2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的<br> 对象必须重写这两个方法。<br> 3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。<br> 说明： String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象<br> 作为 key 来使用。</p></li><li><p>【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException<br> 异常： java.util.RandomAccessSubList cannot be cast to java.util.ArrayList ;<br> 说明： subList 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList ，而是<br> ArrayList 的一个视图，对于 SubList 子列表的所有操作最终会反映到原列表上。</p></li><li><p>【强制】 在 subList 场景中， 高度注意对原集合元素个数的修改，会导致子列表的遍历、增<br> 加、删除均产生 ConcurrentModificationException 异常。</p></li><li><p>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全<br> 一样的数组，大小就是 list.size()。<br> 说明： 使用 toArray 带参方法，入参分配的数组空间不够大时， toArray 方法内部将重新分配<br> 内存空间，并返回新数组地址； 如果数组元素大于实际所需，下标为[ list.size() ]的数组<br> 元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素<br> 个数一致。<br> 正例：</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(<span class="hljs-number">2</span>);<br>list.add(<span class="hljs-string">&quot;guan&quot;</span>);<br>list.add(<span class="hljs-string">&quot;bao&quot;</span>);<br>String[] array = <span class="hljs-keyword">new</span> String[list.size()];<br>array = list.toArray(array);<br></code></pre></td></tr></table></figure><p>  反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它<br>  类型数组将出现 ClassCastException 错误。</p><ol start="5"><li><p>【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方<br> 法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。<br> 说明： asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList<br> 体现的是适配器模式，只是转换接口，后台的数据仍是数组。<br> String[] str = new String[] { “a”, “b” };<br> List list = Arrays.asList(str);<br> 第一种情况： list.add(“c”); 运行时异常。<br> 第二种情况： str[0] = “gujin”; 那么 list.get(0)也会随之修改。</p></li><li><p>【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方<br>法， 而&lt;? super T&gt;不能使用 get 方法，做为接口调用赋值时易出错。<br>说明： 扩展说一下 PECS(Producer Extends Consumer Super)原则：</p></li></ol><p>1） 频繁往外读取内容的，适合用上界 Extends。</p><p>2） 经常往里插入的，适合用下界 Super。<br>7. 【强制】不要在 foreach 循环里进行元素的 remove/add 操作。 remove 元素请使用 Iterator<br>    方式，如果并发操作，需要对 Iterator 对象加锁。<br>    正例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;String&gt; it = a.iterator();<br>    <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>        String temp = it.next();<br>        <span class="hljs-keyword">if</span> (删除元素的条件) &#123;<br>        it.remove();<br>        &#125;<br>    &#125;<br>反例：<br>    List&lt;String&gt; a = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>    a.add(<span class="hljs-string">&quot;1&quot;</span>);<br>    a.add(<span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String temp : a) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(temp)) &#123;<br>            a.remove(temp);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>  说明： 以上代码的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”，会是同样的<br>  结果吗？</p><p>如果在foreach中1换成2删除就会报这个错误。</p><p>Exception in thread “main” java.util.ConcurrentModificationException<br>    at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)<br>    at java.util.ArrayList$Itr.next(ArrayList.java:851)<br>    at com.dsm.script.business.questionnaire.Demo.main(Demo.java:12)<br>总结：如果我们我们用foreach删除的元素刚好是最后一个，删除完成前cursor刚好等于size的大小。但是，删除完成后size的数量减1，但是cursor并没有变化。导致下一次循环不相等继续向下执行，导致检查数组不通过，抛出java.util.ConcurrentModificationException</p><ol start="8"><li>【强制】 在 JDK7 版本及以上， Comparator 要满足如下三个条件，不然 Arrays.sort，<br> Collections.sort 会报 IllegalArgumentException 异常。<br> 说明：<br> 1） x， y 的比较结果和 y， x 的比较结果相反。<br> 2） x&gt;y， y&gt;z， 则 x&gt;z。<br> 3） x=y， 则 x， z 比较结果和 y， z 比较结果相同。<br> 反例： 下例中没有处理相等的情况，实际使用中可能会出现异常：</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="9"><li><p>【推荐】集合初始化时， 指定集合初始值大小。<br> 说明： HashMap 使用 HashMap(int initialCapacity) 初始化，<br> 正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子 （ 即 loader<br> factor） 默认为 0.75， 如果暂时无法确定初始值大小， 请设置为 16。<br> 反例： HashMap 需要放置 1024 个元素， 由于没有设置容量初始大小，随着元素不断增加，容<br> 量 7 次被迫扩大， resize 需要重建 hash 表，严重影响性能。</p></li><li><p>【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。<br>说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出<br>key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效<br>率更高。如果是 JDK8，使用 Map.foreach 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; infoMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>infoMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Zebe&quot;</span>);<br>infoMap.put(<span class="hljs-string">&quot;site&quot;</span>, <span class="hljs-string">&quot;www.zebe.me&quot;</span>);<br>infoMap.put(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;zebe@vip.qq.com&quot;</span>);<br><span class="hljs-comment">// 传统的Map迭代方式</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : infoMap.entrySet()) &#123;<br>    System.out.println(entry.getKey() + <span class="hljs-string">&quot;：&quot;</span> + entry.getValue());<br>&#125;<br><span class="hljs-comment">//// JDK8的迭代方式</span><br>infoMap.forEach((key, value) -&gt; &#123;<br>    System.out.println(key + <span class="hljs-string">&quot;：&quot;</span> + value);<br>&#125;);<br></code></pre></td></tr></table></figure></li></ol><p>正例： values()返回的是 V 值集合，是一个 list 集合对象； keySet()返回的是 K 值集合，是<br>一个 Set 集合对象； entrySet()返回的是 K-V 值组合集合。<br>11. 【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</p><p>集合类    Key    Value    Super    说明<br>Hashtable    不允许为 null    不允许为 null    Dictionary    线程安全<br>ConcurrentHashMap    不允许为 null    不允许为 null    AbstractMap    分段锁技术<br>TreeMap    不允许为 null    允许为 null    AbstractMap    线程不安全<br>HashMap    允许为 null    允许为 null    AbstractMap    线程不安全<br>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，<br>存储 null 值时会抛出 NPE 异常。<br>12. 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和<br>不稳定性(unorder)带来的负面影响。<br>说明： 有序性是指遍历的结果是按某种比较规则依次排列的。 稳定性指集合每次遍历的元素次<br>序是一定的。 如： ArrayList 是 order/unsort； HashMap 是 unorder/unsort； TreeSet 是<br>order/sort。<br>13. 【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的<br>contains 方法进行遍历、对比、 去重操作。</p><h2 id="六、并发处理"><a href="#六、并发处理" class="headerlink" title="六、并发处理"></a>六、并发处理</h2><ol><li>【强制】 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。<br>说明： 资源驱动类、工具类、单例工厂类都需要注意。</li><li>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。<br>正例：<br>public class TimerTaskThread extends Thread {<br>public TimerTaskThread() {<br>super.setName(“TimerTaskThread”); …<br>}</li><li>【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。<br>说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资<br>源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者<br>“过度切换”的问题。</li><li>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样<br>的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>说明： Executors 返回的线程池对象的弊端如下：<br>1） FixedThreadPool 和 SingleThreadPool:<br>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。<br>2） CachedThreadPool 和 ScheduledThreadPool:<br>允许的创建线程数量为 Integer.MAX_VALUE， 可能会创建大量的线程，从而导致 OOM。</li><li>【强制】 SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为<br>static，必须加锁，或者使用 DateUtils 工具类。<br>正例： 注意线程安全，使用 DateUtils。亦推荐如下处理：</li></ol><p>public class Demo {<br>    public static void main(String[] args) {</p><pre><code>    Demo demo = new Demo();    System.out.println(demo.df.get().format(new Date()));&#125;</code></pre><p>private static final ThreadLocal<DateFormat> df = new ThreadLocal<DateFormat>() {<br>    @Override<br>    protected DateFormat initialValue() {<br>    return new SimpleDateFormat(“yyyy-MM-dd”);<br>    }<br>};<br>说明： 如果是 JDK8 的应用，可以使用 Instant 代替 Date， LocalDateTime 代替 Calendar，<br>DateTimeFormatter代替Simpledateformatter，官方给出的解释：simple beautiful strong<br>immutable thread-safe。<br>6. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁； 能<br>锁区块，就不要锁整个方法体； 能用对象锁，就不要用类锁。<br>说明： 尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。<br>7. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造<br>成死锁。<br>说明： 线程一需要对表 A、 B、 C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序<br>也必须是 A、 B、 C，否则可能出现死锁。<br>8. 【强制】并发修改同一记录时，避免更新丢失， 需要加锁。 要么在应用层加锁， 要么在缓存加<br>锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。<br>说明： 如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次<br>数不得小于 3 次。<br>9. 【强制】多线程并行处理定时任务时， Timer 运行多个 TimeTask 时，只要其中之一没有捕获<br>抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。<br>10. 【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown<br>方法，线程执行代码注意 catch 异常，确保 countDown 方法可以执行，避免主线程无法执行<br>至 await 方法，直到超时才返回结果。<br>说明： 注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。<br>11. 【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一<br>seed 导致的性能下降。<br>说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。<br>正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保<br>证每个线程持有一个实例。<br>12. 【推荐】 在并发场景下， 通过双重检查锁（ double-checked locking） 实现延迟初始化的优<br>化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)， 推荐问<br>题解决方案中较为简单一种（ 适用于 JDK5 及以上版本） ，将目标属性声明为 volatile 型。<br>反例：<br>class Foo {<br>private Helper helper = null;<br>public Helper getHelper() {<br>if (helper == null) synchronized(this) {<br>if (helper == null)<br>helper = new Helper();<br>}<br>return helper;<br>}<br>// other functions and members…<br>}<br>13. 【参考】 volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，<br>但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现：<br>AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推<br>荐使用 LongAdder 对象，比 AtomicLong 性能更好（ 减少乐观锁的重试次数） 。<br>14. 【参考】 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在<br>开发过程中可以使用其它数据结构或加锁来规避此风险。<br>15. 【参考】 ThreadLocal 无法解决共享对象的更新问题， ThreadLocal 对象建议使用 static<br>修饰。这个变量是针对一个线程内所有操作共有的，所以设置为静态变量，所有此类实例共享<br>此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只<br>要是这个线程内定义的)都可以操控这个变量。</DateFormat></DateFormat></p><h2 id="七、控制语句"><a href="#七、控制语句" class="headerlink" title="七、控制语句"></a>七、控制语句</h2><ol><li>【强制】在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程<br>序将继续执行到哪一个 case 为止； 在一个 switch 块内，都必须包含一个 default 语句并且<br>放在最后，即使它什么代码也没有。</li><li>【强制】在 if/else/for/while/do 语句中必须使用大括号。 即使只有一行代码，避免使用<br>单行的形式： if (condition) statements;</li><li>【推荐】 表达异常的分支时， 少用 if-else 方式， 这种方式可以改写成：<br>if (condition) {<br>…<br>return obj;<br>}<br>// 接着写 else 的业务逻辑代码;<br>说明： 如果非得使用 if()…else if()…else…方式表达逻辑，【强制】 避免后续代码维<br>护困难， 请勿超过 3 层。<br>正例： 逻辑上超过 3 层的 if-else 代码可以使用卫语句，或者状态模式来实现。 卫语句示例<br>如下：<br>public void today() {<br>if (isBusy()) {<br>System.out.println(“change time.”);<br>return;<br>}<br>if (isFree()) {<br>System.out.println(“go to travel.”);<br>return;<br>}<br>System.out.println(“stay at home to learn Alibaba Java Coding Guideline.”);<br>return;<br>}</li><li>【推荐】除常用方法（如 getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复<br>杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。<br>说明： 很多 if 语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么<br>样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？<br>正例：<br>//伪代码如下<br>final boolean existed = (file.open(fileName, “w”) != null) &amp;&amp; (…) || (…);<br>if (existed) {<br>…<br>}<br>反例：<br>if ((file.open(fileName, “w”) != null) &amp;&amp; (…) || (…)) {<br>…<br>}</li><li>【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、<br>获取数据库连接，进行不必要的 try-catch 操作（ 这个 try-catch 是否可以移至循环体外） 。</li><li>【推荐】接口入参保护，这种场景常见的是用于做批量操作的接口。</li><li>【参考】 下列情形，需要进行参数校验：<br>1） 调用频次低的方法。<br>2） 执行时间开销很大的方法。 此情形中， 参数校验时间几乎可以忽略不计，但如果因为参<br>数错误导致中间执行回退，或者错误，那得不偿失。<br>3） 需要极高稳定性和可用性的方法。<br>4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。<br>5） 敏感权限入口。</li><li>【参考】 下列情形， 不需要进行参数校验：<br>1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。<br>2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底<br>层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所<br>以 DAO 的参数校验，可以省略。<br>3） 被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参<br>数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li></ol><h2 id="八、注释约束"><a href="#八、注释约束" class="headerlink" title="八、注释约束"></a>八、注释约束</h2><ol><li>【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用/*<em>内容</em>/格式，不得使用<br>//xxx 方式。<br>说明： 在 IDE 编辑窗口中， Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注<br>释； 在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高<br>阅读效率。</li><li>【强制】所有的抽象方法（ 包括接口中的方法） 必须要用 Javadoc 注释、除了返回值、参数、<br>异常说明外，还必须指出该方法做什么事情，实现什么功能。<br>说明： 对子类的实现要求，或者调用注意事项，请一并说明。</li><li>【强制】所有的类都必须添加创建者和创建日期。</li><li>【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释<br>使用/* */注释，注意与代码对齐。</li><li>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</li><li>【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持<br>英文原文即可。<br>反例： “TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</li><li>【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑<br>等的修改。<br>说明： 代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，<br>就失去了导航的意义。</li><li>【参考】合理处理注释掉的代码。 在上方详细说明，而不是简单的注释掉。 如果无用，则删除。<br>说明： 代码被注释掉有两种可能性： 1） 后续会恢复此段代码逻辑。 2） 永久不用。前者如果没<br>有备注信息，难以知晓注释动机。后者建议直接删掉（ 代码仓库保存了历史代码） 。</li><li>【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑； 第二、能够描述业务含<br>义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同<br>天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路； 注释也是给继任者看<br>的，使其能够快速接替自己的工作。</li><li>【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的<br>一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。<br>反例：<br>// put elephant into fridge<br>put(elephant, fridge);<br>方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语<br>义清晰的代码不需要额外的注释。</li><li>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，<br>经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。<br>1） 待办事宜（ TODO） :（标记人，标记时间， [预计处理时间]）<br>表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc<br>还没有实现，但已经被广泛使用。只能应用于类，接口和方法（ 因为它是一个 Javadoc 标签） 。<br>2） 错误，不能工作（ FIXME） :（ 标记人，标记时间， [预计处理时间]）<br>在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li></ol><h2 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h2><ol><li>【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。<br>说明： 不要在方法体内定义： Pattern pattern = Pattern.compile(规则);</li><li>【强制】 velocity 调用 POJO 类的属性时，建议直接使用属性名取值即可， 模板引擎会自动按<br>规范调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（ boolean 命名不需要加 is<br>前缀） ，会自动调用 isXxx()方法。<br>说明： 注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。</li><li>【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。<br>说明： 如果 var=null 或者不存在，那么${var}会直接显示在页面上。</li><li>【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x&lt;1（ 能够<br>取到零值，注意除零异常） ， 如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后<br>取整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</li><li>【强制】获取当前毫秒数 System.currentTimeMillis(); 而不是 new Date().getTime();<br>说明： 如果想获取更加精确的纳秒级时间值， 使用 System.nanoTime()的方式。在 JDK8 中，<br>针对统计时间等场景，推荐使用 Instant 类。</li><li>【推荐】 不要在视图模板中加入任何复杂的逻辑。<br>说明： 根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</li><li>【推荐】 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</li><li>【推荐】对于“明确停止使用的代码和配置”，如方法、变量、类、配置文件、动态配置属性<br>等要坚决从程序中清理出去，避免造成过多垃圾。<br>————————————————<br>版权声明：本文为CSDN博主「码农新锐」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_31984879/article/details/89235010">https://blog.csdn.net/qq_31984879/article/details/89235010</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java杂文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令</title>
    <link href="/2021/12/18/git%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/12/18/git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h1><h4 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-comment">#查看所有文件状态</span><br>git status<br><br><span class="hljs-comment">#添加所有文件到暂存区</span><br>git add .<br><br><span class="hljs-comment">#提交暂存区中的文件到本地仓库</span><br>git commit -m<br><br><span class="hljs-comment">#提交到远程仓库</span><br>git push<br></code></pre></td></tr></table></figure><h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>在主目录下建立“.gitignore”文件，此文件规则如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#为注释</span><br>*.txt<span class="hljs-comment">#忽略所有.txt结尾的文件</span><br>!lib.txt<span class="hljs-comment">#不要忽略lib.txt</span><br>/temp<span class="hljs-comment">#忽略temp目录下的文件，但temp目录下的子目录中的文件不忽略</span><br>build/<span class="hljs-comment">#忽略build/目录下的所有文件和目录</span><br>doc/*.txt<span class="hljs-comment">#会忽略doc/notes.txt但不会忽略doc/server/arch.txt</span><br><br>temp/*/    <span class="hljs-comment"># 忽略temp目录下的所有目录，但不会忽略该目录下的文件</span><br></code></pre></td></tr></table></figure><h4 id="分支相关命令"><a href="#分支相关命令" class="headerlink" title="分支相关命令"></a>分支相关命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#列出所有本地分支</span><br>git branch<br><br><span class="hljs-comment">#列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-comment">#新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-comment">#切换到指定分支</span><br>git checkout [branch-name]<br><br><span class="hljs-comment">#新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-comment">#合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-comment">#删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-comment">#删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><h4 id="git设置免密提交"><a href="#git设置免密提交" class="headerlink" title="git设置免密提交"></a>git设置免密提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global credential.helper store<br></code></pre></td></tr></table></figure><h4 id="查看远程仓库地址"><a href="#查看远程仓库地址" class="headerlink" title="查看远程仓库地址"></a>查看远程仓库地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br></code></pre></td></tr></table></figure><h4 id="更换远程仓库地址"><a href="#更换远程仓库地址" class="headerlink" title="更换远程仓库地址"></a>更换远程仓库地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote set-url origin [url]<br></code></pre></td></tr></table></figure><h2 id="远程仓库配置（码云）"><a href="#远程仓库配置（码云）" class="headerlink" title="远程仓库配置（码云）"></a>远程仓库配置（码云）</h2><h4 id="本地生成密钥和公钥-路径在c盘当前用户目录下的-ssh文件夹中-如C-Users-hp-ssh"><a href="#本地生成密钥和公钥-路径在c盘当前用户目录下的-ssh文件夹中-如C-Users-hp-ssh" class="headerlink" title="本地生成密钥和公钥(路径在c盘当前用户目录下的.ssh文件夹中  如C:\Users\hp.ssh)"></a>本地生成密钥和公钥(路径在c盘当前用户目录下的.ssh文件夹中  如C:\Users\hp.ssh)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><h4 id="将公钥添加到码云"><a href="#将公钥添加到码云" class="headerlink" title="将公钥添加到码云"></a>将公钥添加到码云</h4><img src="/2021/12/18/git%E5%91%BD%E4%BB%A4/image-20210330141214610.png" class title="将公钥添加到码云"><h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h4><img src="/2021/12/18/git%E5%91%BD%E4%BB%A4/image-20210330141523628.png" class title="新建仓库">]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
